# Generated by Django 4.2.11 on 2025-10-21 11:06

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AnalysisSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Optional session name", max_length=255
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("uploading", "Uploading"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("porcine", "Porcine"),
                            ("human", "Human"),
                            ("bovine", "Bovine"),
                            ("mouse", "Mouse"),
                            ("other", "Other"),
                        ],
                        default="porcine",
                        max_length=50,
                    ),
                ),
                ("uploaded_file", models.FileField(upload_to="uploads/%Y/%m/%d/")),
                ("original_filename", models.CharField(max_length=255)),
                ("file_size", models.IntegerField(help_text="File size in bytes")),
                (
                    "r2_threshold",
                    models.FloatField(
                        default=0.75,
                        help_text="Minimum RÂ² for regression validity",
                        validators=[
                            django.core.validators.MinValueValidator(0.5),
                            django.core.validators.MaxValueValidator(0.999),
                        ],
                    ),
                ),
                (
                    "outlier_threshold",
                    models.FloatField(
                        default=2.5,
                        help_text="Standardized residual threshold (sigma)",
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "rt_tolerance",
                    models.FloatField(
                        default=0.1,
                        help_text="RT tolerance for fragmentation detection (minutes)",
                        validators=[
                            django.core.validators.MinValueValidator(0.01),
                            django.core.validators.MaxValueValidator(0.5),
                        ],
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("celery_task_id", models.CharField(blank=True, max_length=255)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analysis_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AnalysisResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("total_compounds", models.IntegerField(default=0)),
                ("anchor_compounds", models.IntegerField(default=0)),
                ("valid_compounds", models.IntegerField(default=0)),
                ("outlier_count", models.IntegerField(default=0)),
                ("success_rate", models.FloatField(default=0.0)),
                (
                    "regression_analysis",
                    models.JSONField(
                        default=dict, help_text="Regression models per prefix group"
                    ),
                ),
                (
                    "regression_quality",
                    models.JSONField(
                        default=dict, help_text="Quality metrics for each regression"
                    ),
                ),
                (
                    "sugar_analysis",
                    models.JSONField(
                        default=dict, help_text="Sugar count and isomer analysis"
                    ),
                ),
                (
                    "oacetylation_analysis",
                    models.JSONField(
                        default=dict, help_text="O-acetylation validation results"
                    ),
                ),
                (
                    "rt_filtering_summary",
                    models.JSONField(
                        default=dict, help_text="Fragmentation detection summary"
                    ),
                ),
                (
                    "categorization",
                    models.JSONField(
                        default=dict, help_text="GM/GD/GT/GQ/GP categorization data"
                    ),
                ),
                (
                    "rule1_valid",
                    models.IntegerField(default=0, help_text="Valid after Rule 1"),
                ),
                (
                    "rule1_outliers",
                    models.IntegerField(default=0, help_text="Outliers from Rule 1"),
                ),
                (
                    "rule4_valid",
                    models.IntegerField(default=0, help_text="Valid OAc compounds"),
                ),
                (
                    "rule4_invalid",
                    models.IntegerField(default=0, help_text="Invalid OAc compounds"),
                ),
                (
                    "rule5_fragments",
                    models.IntegerField(default=0, help_text="Fragments detected"),
                ),
                (
                    "session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="result",
                        to="analysis.analysissession",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RegressionModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("prefix_group", models.CharField(db_index=True, max_length=100)),
                (
                    "model_type",
                    models.CharField(
                        default="Ridge",
                        help_text="Ridge, Linear, or Fallback",
                        max_length=50,
                    ),
                ),
                ("intercept", models.FloatField()),
                ("coefficients", models.JSONField(help_text="Feature coefficients")),
                ("feature_names", models.JSONField(help_text="List of features used")),
                ("regularization_alpha", models.FloatField(blank=True, null=True)),
                ("r2", models.FloatField()),
                ("adjusted_r2", models.FloatField(blank=True, null=True)),
                ("rmse", models.FloatField(blank=True, null=True)),
                ("durbin_watson", models.FloatField(blank=True, null=True)),
                (
                    "n_samples",
                    models.IntegerField(help_text="Total compounds in group"),
                ),
                (
                    "n_anchors",
                    models.IntegerField(help_text="Anchor compounds used for training"),
                ),
                ("equation", models.TextField()),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="regression_models",
                        to="analysis.analysissession",
                    ),
                ),
            ],
            options={
                "ordering": ["session", "prefix_group"],
                "indexes": [
                    models.Index(
                        fields=["session", "prefix_group"],
                        name="analysis_re_session_bb977f_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Compound",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("rt", models.FloatField(help_text="Retention time (minutes)")),
                ("volume", models.FloatField(help_text="Peak volume/area")),
                ("log_p", models.FloatField(help_text="Lipophilicity")),
                (
                    "is_anchor",
                    models.BooleanField(
                        default=False, help_text="Anchor compound for training"
                    ),
                ),
                ("prefix", models.CharField(blank=True, db_index=True, max_length=50)),
                ("suffix", models.CharField(blank=True, max_length=50)),
                (
                    "a_component",
                    models.IntegerField(
                        blank=True, help_text="Carbon chain length", null=True
                    ),
                ),
                (
                    "b_component",
                    models.IntegerField(
                        blank=True, help_text="Unsaturation degree", null=True
                    ),
                ),
                (
                    "c_component",
                    models.CharField(
                        blank=True, help_text="Oxygen component", max_length=10
                    ),
                ),
                ("sugar_count", models.IntegerField(blank=True, null=True)),
                ("sialic_acid_count", models.IntegerField(blank=True, null=True)),
                ("can_have_isomers", models.BooleanField(default=False)),
                ("isomer_type", models.CharField(blank=True, max_length=50)),
                ("has_oacetylation", models.BooleanField(default=False)),
                ("has_dhex", models.BooleanField(default=False)),
                ("has_hexnac", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("valid", "Valid"),
                            ("outlier", "Outlier"),
                            ("fragment", "Fragment"),
                        ],
                        default="valid",
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("GM", "Monosialoganglioside"),
                            ("GD", "Disialoganglioside"),
                            ("GT", "Trisialoganglioside"),
                            ("GQ", "Tetrasialoganglioside"),
                            ("GP", "Pentasialoganglioside"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        default="UNKNOWN",
                        max_length=10,
                    ),
                ),
                ("regression_group", models.CharField(blank=True, max_length=100)),
                ("predicted_rt", models.FloatField(blank=True, null=True)),
                ("residual", models.FloatField(blank=True, null=True)),
                ("standardized_residual", models.FloatField(blank=True, null=True)),
                ("outlier_reason", models.TextField(blank=True)),
                (
                    "reference_compound",
                    models.CharField(
                        blank=True, help_text="Parent for fragments", max_length=255
                    ),
                ),
                (
                    "merged_compounds",
                    models.IntegerField(
                        default=1, help_text="Number of merged fragments"
                    ),
                ),
                (
                    "fragmentation_sources",
                    models.JSONField(
                        default=list, help_text="Names of fragment sources"
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="compounds",
                        to="analysis.analysissession",
                    ),
                ),
            ],
            options={
                "ordering": ["session", "name"],
                "indexes": [
                    models.Index(
                        fields=["session", "status"],
                        name="analysis_co_session_0459ea_idx",
                    ),
                    models.Index(
                        fields=["session", "category"],
                        name="analysis_co_session_a7f0c3_idx",
                    ),
                    models.Index(
                        fields=["prefix"], name="analysis_co_prefix_8afb8e_idx"
                    ),
                    models.Index(
                        fields=["is_anchor"], name="analysis_co_is_anch_3fc896_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="analysissession",
            index=models.Index(
                fields=["user", "-created_at"], name="analysis_an_user_id_9f5333_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysissession",
            index=models.Index(fields=["status"], name="analysis_an_status_d73abf_idx"),
        ),
        migrations.AddIndex(
            model_name="analysissession",
            index=models.Index(
                fields=["celery_task_id"], name="analysis_an_celery__729349_idx"
            ),
        ),
    ]
