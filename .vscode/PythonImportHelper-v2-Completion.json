[
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "DummyGangliosideDataProcessor",
        "importPath": "backend.services.dummy.processors",
        "description": "backend.services.dummy.processors",
        "isExtraImport": true,
        "detail": "backend.services.dummy.processors",
        "documentation": {}
    },
    {
        "label": "DummyVisualizationService",
        "importPath": "backend.services.dummy.processors",
        "description": "backend.services.dummy.processors",
        "isExtraImport": true,
        "detail": "backend.services.dummy.processors",
        "documentation": {}
    },
    {
        "label": "DummyGangliosideDataProcessor",
        "importPath": "backend.services.dummy.processors",
        "description": "backend.services.dummy.processors",
        "isExtraImport": true,
        "detail": "backend.services.dummy.processors",
        "documentation": {}
    },
    {
        "label": "DummyVisualizationService",
        "importPath": "backend.services.dummy.processors",
        "description": "backend.services.dummy.processors",
        "isExtraImport": true,
        "detail": "backend.services.dummy.processors",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Ridge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Ridge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Ridge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Ridge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Lasso",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "importPath": "utils.ganglioside_categorizer",
        "description": "utils.ganglioside_categorizer",
        "isExtraImport": true,
        "detail": "utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "importPath": "utils.ganglioside_categorizer",
        "description": "utils.ganglioside_categorizer",
        "isExtraImport": true,
        "detail": "utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "importPath": "utils.ganglioside_categorizer",
        "description": "utils.ganglioside_categorizer",
        "isExtraImport": true,
        "detail": "utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "Rule1PrefixRegression",
        "importPath": "rules",
        "description": "rules",
        "isExtraImport": true,
        "detail": "rules",
        "documentation": {}
    },
    {
        "label": "Rule2SugarCount",
        "importPath": "rules",
        "description": "rules",
        "isExtraImport": true,
        "detail": "rules",
        "documentation": {}
    },
    {
        "label": "Rule3IsomerClassification",
        "importPath": "rules",
        "description": "rules",
        "isExtraImport": true,
        "detail": "rules",
        "documentation": {}
    },
    {
        "label": "Rule4OAcetylation",
        "importPath": "rules",
        "description": "rules",
        "isExtraImport": true,
        "detail": "rules",
        "documentation": {}
    },
    {
        "label": "Rule5Fragmentation",
        "importPath": "rules",
        "description": "rules",
        "isExtraImport": true,
        "detail": "rules",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "make_subplots",
        "importPath": "plotly.subplots",
        "description": "plotly.subplots",
        "isExtraImport": true,
        "detail": "plotly.subplots",
        "documentation": {}
    },
    {
        "label": "make_subplots",
        "importPath": "plotly.subplots",
        "description": "plotly.subplots",
        "isExtraImport": true,
        "detail": "plotly.subplots",
        "documentation": {}
    },
    {
        "label": "make_subplots",
        "importPath": "plotly.subplots",
        "description": "plotly.subplots",
        "isExtraImport": true,
        "detail": "plotly.subplots",
        "documentation": {}
    },
    {
        "label": "VisualizationData",
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "isExtraImport": true,
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "calculate_mass_to_charge",
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "isExtraImport": true,
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "VisualizationData",
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "isExtraImport": true,
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "calculate_mass_to_charge",
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "isExtraImport": true,
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LeaveOneOut",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LeaveOneOut",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LeaveOneOut",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LeaveOneOut",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LeaveOneOut",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cross_val_score",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "apps.core.models",
        "description": "apps.core.models",
        "isExtraImport": true,
        "detail": "apps.core.models",
        "documentation": {}
    },
    {
        "label": "SoftDeleteModel",
        "importPath": "apps.core.models",
        "description": "apps.core.models",
        "isExtraImport": true,
        "detail": "apps.core.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularRedocView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularSwaggerView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "importPath": "src.utils.ganglioside_categorizer",
        "description": "src.utils.ganglioside_categorizer",
        "isExtraImport": true,
        "detail": "src.utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "importPath": "src.utils.ganglioside_categorizer",
        "description": "src.utils.ganglioside_categorizer",
        "isExtraImport": true,
        "detail": "src.utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "importPath": "services.ganglioside_processor",
        "description": "services.ganglioside_processor",
        "isExtraImport": true,
        "detail": "services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "RegressionAnalyzer",
        "importPath": "services.regression_analyzer",
        "description": "services.regression_analyzer",
        "isExtraImport": true,
        "detail": "services.regression_analyzer",
        "documentation": {}
    },
    {
        "label": "VisualizationService",
        "importPath": "services.visualization_service",
        "description": "services.visualization_service",
        "isExtraImport": true,
        "detail": "services.visualization_service",
        "documentation": {}
    },
    {
        "label": "analysis_bp",
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "isExtraImport": true,
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "init_services",
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "isExtraImport": true,
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "visualization_bp",
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "isExtraImport": true,
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "init_visualization_service",
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "isExtraImport": true,
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "settings_bp",
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "isExtraImport": true,
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "init_processor_service",
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "isExtraImport": true,
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "web_bp",
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "isExtraImport": true,
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "importPath": "backend.services.ganglioside_processor",
        "description": "backend.services.ganglioside_processor",
        "isExtraImport": true,
        "detail": "backend.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "importPath": "backend.services.ganglioside_processor",
        "description": "backend.services.ganglioside_processor",
        "isExtraImport": true,
        "detail": "backend.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "importPath": "src.services.ganglioside_processor",
        "description": "src.services.ganglioside_processor",
        "isExtraImport": true,
        "detail": "src.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorFixed",
        "importPath": "backend.services.ganglioside_processor_fixed",
        "description": "backend.services.ganglioside_processor_fixed",
        "isExtraImport": true,
        "detail": "backend.services.ganglioside_processor_fixed",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "importPath": "backend.core.analysis_service",
        "description": "backend.core.analysis_service",
        "isExtraImport": true,
        "detail": "backend.core.analysis_service",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "importPath": "backend.core.analysis_service",
        "description": "backend.core.analysis_service",
        "isExtraImport": true,
        "detail": "backend.core.analysis_service",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorModular",
        "importPath": "backend.services.ganglioside_processor_modular",
        "description": "backend.services.ganglioside_processor_modular",
        "isExtraImport": true,
        "detail": "backend.services.ganglioside_processor_modular",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorModular",
        "importPath": "backend.services.ganglioside_processor_modular",
        "description": "backend.services.ganglioside_processor_modular",
        "isExtraImport": true,
        "detail": "backend.services.ganglioside_processor_modular",
        "documentation": {}
    },
    {
        "label": "Rule1PrefixRegression",
        "importPath": "backend.rules",
        "description": "backend.rules",
        "isExtraImport": true,
        "detail": "backend.rules",
        "documentation": {}
    },
    {
        "label": "Rule2SugarCount",
        "importPath": "backend.rules",
        "description": "backend.rules",
        "isExtraImport": true,
        "detail": "backend.rules",
        "documentation": {}
    },
    {
        "label": "Rule3IsomerClassification",
        "importPath": "backend.rules",
        "description": "backend.rules",
        "isExtraImport": true,
        "detail": "backend.rules",
        "documentation": {}
    },
    {
        "label": "Rule4OAcetylation",
        "importPath": "backend.rules",
        "description": "backend.rules",
        "isExtraImport": true,
        "detail": "backend.rules",
        "documentation": {}
    },
    {
        "label": "Rule5Fragmentation",
        "importPath": "backend.rules",
        "description": "backend.rules",
        "isExtraImport": true,
        "detail": "backend.rules",
        "documentation": {}
    },
    {
        "label": "get_rule_summary",
        "importPath": "backend.rules",
        "description": "backend.rules",
        "isExtraImport": true,
        "detail": "backend.rules",
        "documentation": {}
    },
    {
        "label": "init_services",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"NumPy/pandas 객체를 JSON 직렬화 가능한 형태로 변환\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def convert_to_serializable(obj):\n    \"\"\"NumPy/pandas 객체를 JSON 직렬화 가능한 형태로 변환\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):\n        return float(obj)",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def upload_csv():\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        if file.filename == \"\":\n            return jsonify({\"error\": \"파일이 선택되지 않았습니다.\"}), 400\n        if not file.filename.lower().endswith('.csv'):\n            return jsonify({\"error\": \"CSV 파일만 업로드 가능합니다.\"}), 400",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "analyze_data",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def analyze_data():\n    \"\"\"데이터 분석 실행\"\"\"\n    try:\n        # 파일 및 설정 가져오기\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"분석할 파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "sample_test",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def sample_test():\n    \"\"\"샘플 데이터 테스트\"\"\"\n    try:\n        # 요청에서 설정 가져오기\n        data = request.get_json()\n        if not data:\n            return jsonify({\"error\": \"JSON 데이터가 필요합니다.\"}), 400\n        data_type = data.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(data.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(data.get(\"r2_threshold\", 0.99))",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "download_results",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def download_results():\n    \"\"\"분석 결과 다운로드\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify({\"error\": \"분석 결과 데이터가 없습니다.\"}), 400\n        results = data[\"results\"]\n        # CSV 형태로 변환\n        output_data = []\n        # 유효한 화합물들",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "processor = None\nregression_analyzer = None\nvisualization_service = None\n# Blueprint 생성\nanalysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "regression_analyzer",
        "kind": 5,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "regression_analyzer = None\nvisualization_service = None\n# Blueprint 생성\nanalysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "visualization_service = None\n# Blueprint 생성\nanalysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service\ndef convert_to_serializable(obj):",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_bp",
        "kind": 5,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "analysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"NumPy/pandas 객체를 JSON 직렬화 가능한 형태로 변환\"\"\"\n    if isinstance(obj, dict):",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def convert_to_serializable(obj: Any) -> Any:\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):\n        return float(obj)",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "analyze_data_enhanced",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def analyze_data_enhanced():\n    \"\"\"\n    Enhanced data analysis with fixed regression algorithms\n    \"\"\"\n    try:\n        print(\"🚀 Enhanced analysis request received\")\n        # Validate request\n        if 'file' not in request.files:\n            return jsonify({\"error\": \"No file provided\"}), 400\n        file = request.files['file']",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "upload_csv_enhanced",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def upload_csv_enhanced():\n    \"\"\"Enhanced CSV upload with better validation\"\"\"\n    try:\n        if 'file' not in request.files:\n            return jsonify({\"error\": \"No file provided\"}), 400\n        file = request.files['file']\n        if file.filename == '' or not file.filename.endswith('.csv'):\n            return jsonify({\"error\": \"Invalid file. Please upload a CSV file.\"}), 400\n        # Read and validate CSV\n        try:",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "analysis_settings",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def analysis_settings():\n    \"\"\"Get or update analysis settings\"\"\"\n    try:\n        if request.method == \"GET\":\n            # Return current settings\n            current_settings = g.analysis_service.get_current_settings()\n            return jsonify({\n                \"status\": \"success\",\n                \"settings\": current_settings,\n                \"timestamp\": datetime.now().isoformat()",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "export_results",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def export_results(format: str):\n    \"\"\"Export analysis results in different formats\"\"\"\n    try:\n        # This would typically use stored results from a session or database\n        # For now, return a placeholder\n        if format not in ['csv', 'xlsx', 'json']:\n            return jsonify({\"error\": \"Unsupported format. Use: csv, xlsx, json\"}), 400\n        return jsonify({\n            \"message\": f\"Export in {format} format - Feature coming soon\",\n            \"available_formats\": [\"csv\", \"xlsx\", \"json\"],",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "analysis_bp",
        "kind": 5,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "analysis_bp = Blueprint('analysis', __name__)\ndef convert_to_serializable(obj: Any) -> Any:\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "get_data_processor",
        "kind": 2,
        "importPath": "backend.api.routes.data_legacy",
        "description": "backend.api.routes.data_legacy",
        "peekOfCode": "def get_data_processor():\n    return data_processor\ndef get_visualization_service():\n    return visualization_service\n@router.post(\"/upload\")\nasync def upload_csv(file: UploadFile = File(...)):\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if not file.filename.endswith(\".csv\"):\n            raise HTTPException(",
        "detail": "backend.api.routes.data_legacy",
        "documentation": {}
    },
    {
        "label": "get_visualization_service",
        "kind": 2,
        "importPath": "backend.api.routes.data_legacy",
        "description": "backend.api.routes.data_legacy",
        "peekOfCode": "def get_visualization_service():\n    return visualization_service\n@router.post(\"/upload\")\nasync def upload_csv(file: UploadFile = File(...)):\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if not file.filename.endswith(\".csv\"):\n            raise HTTPException(\n                status_code=400, detail=\"CSV 파일만 업로드 가능합니다.\"\n            )",
        "detail": "backend.api.routes.data_legacy",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.routes.data_legacy",
        "description": "backend.api.routes.data_legacy",
        "peekOfCode": "router = APIRouter(prefix=\"/api\", tags=[\"data\"])\n# 서비스 인스턴스 초기화\ntry:\n    from backend.services.data_processor import GangliosideDataProcessor\n    from backend.services.visualization_service import VisualizationService\n    data_processor = GangliosideDataProcessor()\n    visualization_service = VisualizationService()\n    print(\"✅ 실제 분석 모듈 로드 성공\")\nexcept ImportError as e:\n    print(f\"⚠️ 분석 모듈 로드 실패: {e}\")",
        "detail": "backend.api.routes.data_legacy",
        "documentation": {}
    },
    {
        "label": "init_processor_service",
        "kind": 2,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "def init_processor_service(ganglioside_processor):\n    \"\"\"Initialize processor service instance\"\"\"\n    global processor\n    processor = ganglioside_processor\n@settings_bp.route(\"/settings\", methods=[\"GET\", \"POST\"])\ndef manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"\n    try:\n        if request.method == \"GET\":\n            # Return current settings",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "manage_settings",
        "kind": 2,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "def manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"\n    try:\n        if request.method == \"GET\":\n            # Return current settings\n            current_settings = processor.get_settings()\n            return jsonify({\n                \"message\": \"Current settings retrieved\",\n                \"settings\": current_settings,\n                \"timestamp\": datetime.now().isoformat()",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "def health_check():\n    \"\"\"Health check endpoint for service status\"\"\"\n    try:\n        # Check if processor is available and working\n        if processor is None:\n            return jsonify({\n                \"status\": \"unhealthy\",\n                \"error\": \"Processor service not initialized\"\n            }), 503\n        # Get current settings as a basic health check",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "processor = None\n# Blueprint creation\nsettings_bp = Blueprint('settings', __name__, url_prefix='/api')\ndef init_processor_service(ganglioside_processor):\n    \"\"\"Initialize processor service instance\"\"\"\n    global processor\n    processor = ganglioside_processor\n@settings_bp.route(\"/settings\", methods=[\"GET\", \"POST\"])\ndef manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "settings_bp",
        "kind": 5,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "settings_bp = Blueprint('settings', __name__, url_prefix='/api')\ndef init_processor_service(ganglioside_processor):\n    \"\"\"Initialize processor service instance\"\"\"\n    global processor\n    processor = ganglioside_processor\n@settings_bp.route(\"/settings\", methods=[\"GET\", \"POST\"])\ndef manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"\n    try:\n        if request.method == \"GET\":",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "get_analyzer",
        "kind": 2,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "def get_analyzer(session_id: str) -> StepwiseAnalyzer:\n    \"\"\"Get or create analyzer for session\"\"\"\n    if session_id not in analyzers:\n        analyzers[session_id] = StepwiseAnalyzer()\n    return analyzers[session_id]\n@stepwise_bp.route('/api/stepwise/upload', methods=['POST'])\ndef upload_data():\n    \"\"\"\n    Step 0: Upload and preprocess data\n    Request: CSV file upload",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "upload_data",
        "kind": 2,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "def upload_data():\n    \"\"\"\n    Step 0: Upload and preprocess data\n    Request: CSV file upload\n    Returns: Preprocessing results with feature statistics\n    \"\"\"\n    try:\n        if 'file' not in request.files:\n            return jsonify({'error': 'No file uploaded'}), 400\n        file = request.files['file']",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "execute_rule1",
        "kind": 2,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "def execute_rule1():\n    \"\"\"\n    Step 1: Execute Rule 1 - Prefix-based Regression\n    Returns: Regression results with classification\n    \"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        analyzer = get_analyzer(session_id)\n        result = analyzer.execute_rule1()\n        if 'error' in result:",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "execute_rule23",
        "kind": 2,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "def execute_rule23():\n    \"\"\"\n    Step 2: Execute Rules 2-3 - Sugar Count & Isomer Classification\n    Returns: Sugar analysis and isomer detection results\n    \"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        analyzer = get_analyzer(session_id)\n        result = analyzer.execute_rule23()\n        if 'error' in result:",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "execute_rule4",
        "kind": 2,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "def execute_rule4():\n    \"\"\"\n    Step 3: Execute Rule 4 - O-acetylation Validation\n    Returns: O-acetylation validation results\n    \"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        analyzer = get_analyzer(session_id)\n        result = analyzer.execute_rule4()\n        if 'error' in result:",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "execute_rule5",
        "kind": 2,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "def execute_rule5():\n    \"\"\"\n    Step 4: Execute Rule 5 - Fragmentation Detection\n    Returns: Fragmentation analysis results\n    \"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        analyzer = get_analyzer(session_id)\n        result = analyzer.execute_rule5()\n        if 'error' in result:",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "get_summary",
        "kind": 2,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "def get_summary():\n    \"\"\"\n    Get final analysis summary\n    Returns: Comprehensive summary of all rules\n    \"\"\"\n    try:\n        session_id = request.args.get('session_id', 'default')\n        analyzer = get_analyzer(session_id)\n        result = analyzer.get_final_summary()\n        if 'error' in result:",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "reset_analysis",
        "kind": 2,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "def reset_analysis():\n    \"\"\"\n    Reset analysis state\n    Returns: Confirmation\n    \"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        if session_id in analyzers:\n            analyzers[session_id].reset()\n            return jsonify({'status': 'reset', 'session_id': session_id}), 200",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "get_status",
        "kind": 2,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "def get_status():\n    \"\"\"\n    Get current analysis status\n    Returns: Current state and completed rules\n    \"\"\"\n    try:\n        session_id = request.args.get('session_id', 'default')\n        if session_id not in analyzers:\n            return jsonify({\n                'status': 'no_session',",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "stepwise_bp",
        "kind": 5,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "stepwise_bp = Blueprint('stepwise', __name__)\n# Global analyzer instance (in production, use session storage or database)\nanalyzers = {}\ndef get_analyzer(session_id: str) -> StepwiseAnalyzer:\n    \"\"\"Get or create analyzer for session\"\"\"\n    if session_id not in analyzers:\n        analyzers[session_id] = StepwiseAnalyzer()\n    return analyzers[session_id]\n@stepwise_bp.route('/api/stepwise/upload', methods=['POST'])\ndef upload_data():",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "analyzers",
        "kind": 5,
        "importPath": "backend.api.routes.stepwise_analysis",
        "description": "backend.api.routes.stepwise_analysis",
        "peekOfCode": "analyzers = {}\ndef get_analyzer(session_id: str) -> StepwiseAnalyzer:\n    \"\"\"Get or create analyzer for session\"\"\"\n    if session_id not in analyzers:\n        analyzers[session_id] = StepwiseAnalyzer()\n    return analyzers[session_id]\n@stepwise_bp.route('/api/stepwise/upload', methods=['POST'])\ndef upload_data():\n    \"\"\"\n    Step 0: Upload and preprocess data",
        "detail": "backend.api.routes.stepwise_analysis",
        "documentation": {}
    },
    {
        "label": "init_visualization_service",
        "kind": 2,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "def init_visualization_service(vis_service):\n    \"\"\"Initialize visualization service instance\"\"\"\n    global visualization_service\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "def convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):\n        return float(obj)",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "create_visualizations",
        "kind": 2,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "def create_visualizations():\n    \"\"\"Create all visualizations from analysis results\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify({\"error\": \"Analysis results data is required.\"}), 400\n        results = data[\"results\"]\n        # Generate all visualizations\n        plots = visualization_service.create_all_plots(results)\n        return jsonify({",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "create_3d_visualization",
        "kind": 2,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "def create_3d_visualization():\n    \"\"\"Dedicated endpoint for 3D distribution visualization\"\"\"\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({\"error\": \"Request data is required.\"}), 400\n        # Check for file data\n        if \"file_data\" in data:\n            # Process CSV data directly\n            df = pd.DataFrame(data[\"file_data\"])",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "visualization_service = None\n# Blueprint creation\nvisualization_bp = Blueprint('visualization', __name__, url_prefix='/api')\ndef init_visualization_service(vis_service):\n    \"\"\"Initialize visualization service instance\"\"\"\n    global visualization_service\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "visualization_bp",
        "kind": 5,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "visualization_bp = Blueprint('visualization', __name__, url_prefix='/api')\ndef init_visualization_service(vis_service):\n    \"\"\"Initialize visualization service instance\"\"\"\n    global visualization_service\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def index():\n    \"\"\"Main page - Working analyzer\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving working analyzer: {str(e)}\")\n        return f\"Error loading working analyzer: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "interactive_analyzer",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def interactive_analyzer():\n    \"\"\"Interactive analyzer page\"\"\"\n    try:\n        return render_template(\"interactive_analyzer.html\")\n    except Exception as e:\n        print(f\"Template error for interactive: {str(e)}\")\n        return f\"Template rendering error: {str(e)}\", 500\n@web_bp.route(\"/legacy\")\ndef simple_analyzer():\n    \"\"\"Simple analyzer page (legacy)\"\"\"",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "simple_analyzer",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def simple_analyzer():\n    \"\"\"Simple analyzer page (legacy)\"\"\"\n    try:\n        return render_template(\"analyzer.html\")\n    except Exception as e:\n        print(f\"Template error for legacy: {str(e)}\")\n        return f\"Template rendering error: {str(e)}\", 500\n@web_bp.route(\"/integrated\")\ndef integrated_view():\n    \"\"\"Integrated visualization page - combined 2D and 3D displays\"\"\"",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "integrated_view",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def integrated_view():\n    \"\"\"Integrated visualization page - combined 2D and 3D displays\"\"\"\n    try:\n        with open(\"integrated_visualization_english.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Integrated visualization file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving integrated view: {str(e)}\")\n        return f\"Error loading integrated view: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "diagnostic_test",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def diagnostic_test():\n    \"\"\"Diagnostic test page for JavaScript debugging\"\"\"\n    try:\n        with open(\"diagnostic_test.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Diagnostic test file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving diagnostic test: {str(e)}\")\n        return f\"Error loading diagnostic test: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "simple_analyzer_working",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def simple_analyzer_working():\n    \"\"\"Simple working analyzer page\"\"\"\n    try:\n        with open(\"simple_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Simple analyzer file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving simple analyzer: {str(e)}\")\n        return f\"Error loading simple analyzer: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "working_analyzer",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def working_analyzer():\n    \"\"\"Working analyzer with integrated features\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving working analyzer: {str(e)}\")\n        return f\"Error loading working analyzer: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "web_bp",
        "kind": 5,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "web_bp = Blueprint('web', __name__)\n@web_bp.route(\"/\")\ndef index():\n    \"\"\"Main page - Working analyzer\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n    except Exception as e:",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "kind": 6,
        "importPath": "backend.core.analysis_service",
        "description": "backend.core.analysis_service",
        "peekOfCode": "class AnalysisService:\n    \"\"\"\n    Central analysis service that orchestrates all analysis components\n    \"\"\"\n    def __init__(self):\n        \"\"\"Initialize all analysis components\"\"\"\n        self.ganglioside_processor = GangliosideProcessorFixed()\n        self.regression_analyzer = RegressionAnalyzer()\n        self.visualization_service = VisualizationService()\n        print(\"🚀 Analysis Service 초기화 완료\")",
        "detail": "backend.core.analysis_service",
        "documentation": {}
    },
    {
        "label": "Rule1PrefixRegression",
        "kind": 6,
        "importPath": "backend.rules.rule1_regression",
        "description": "backend.rules.rule1_regression",
        "peekOfCode": "class Rule1PrefixRegression:\n    \"\"\"\n    Rule 1: Prefix-based regression analysis with multiple features\n    Purpose:\n    - Groups compounds by their prefix (e.g., GD1, GM1, GT1)\n    - Performs multiple regression: RT = f(Log P, Carbon, Sugar Count, Modifications, etc.)\n    - Identifies outliers based on standardized residuals\n    - Only uses anchor compounds (Anchor='T') for training\n    \"\"\"\n    def __init__(",
        "detail": "backend.rules.rule1_regression",
        "documentation": {}
    },
    {
        "label": "Rule2SugarCount",
        "kind": 6,
        "importPath": "backend.rules.rule2_sugar_count",
        "description": "backend.rules.rule2_sugar_count",
        "peekOfCode": "class Rule2SugarCount:\n    \"\"\"\n    Rule 2: Sugar Count Calculation\n    Purpose:\n    - Calculates total sugar count from prefix nomenclature\n    - Ganglioside naming: G[d][e][f]\n      - d: Always 'G' for ganglioside\n      - e: Sialic acid count (A=0, M=1, D=2, T=3, Q=4, P=5)\n      - f: Series number (1-4), where total neutral sugars = 5 - f\n    - Example: GM1 = G + M(1 sialic) + 1 → 1 + (5-1) = 5 total sugars",
        "detail": "backend.rules.rule2_sugar_count",
        "documentation": {}
    },
    {
        "label": "Rule3IsomerClassification",
        "kind": 6,
        "importPath": "backend.rules.rule3_isomer_classification",
        "description": "backend.rules.rule3_isomer_classification",
        "peekOfCode": "class Rule3IsomerClassification:\n    \"\"\"\n    Rule 3: Structural Isomer Classification\n    Purpose:\n    - Identifies compounds that can exist as structural isomers\n    - Classifies isomers based on sugar modifications:\n      * GD1 series: GD1a (+HexNAc) vs GD1b (+dHex)\n      * GQ1 series: GQ1b vs GQ1c (species-dependent)\n      * GT1 series: GT1a vs GT1b vs GT1c\n    - Uses biological source (Porcine/Human/Mouse) for species-specific rules",
        "detail": "backend.rules.rule3_isomer_classification",
        "documentation": {}
    },
    {
        "label": "Rule4OAcetylation",
        "kind": 6,
        "importPath": "backend.rules.rule4_oacetylation",
        "description": "backend.rules.rule4_oacetylation",
        "peekOfCode": "class Rule4OAcetylation:\n    \"\"\"\n    Rule 4: O-acetylation Effect Validation\n    Purpose:\n    - Validates chemical behavior of O-acetylation\n    - O-acetyl groups add hydrophobic character → increases RT\n    - Compares OAc-modified compounds to their base structures\n    - Flags compounds where OAc decreases RT (unexpected behavior)\n    Chemistry:\n    - O-acetylation: Addition of -COCH₃ group to hydroxyl (-OH)",
        "detail": "backend.rules.rule4_oacetylation",
        "documentation": {}
    },
    {
        "label": "Rule5Fragmentation",
        "kind": 6,
        "importPath": "backend.rules.rule5_fragmentation",
        "description": "backend.rules.rule5_fragmentation",
        "peekOfCode": "class Rule5Fragmentation:\n    \"\"\"\n    Rule 5: In-source Fragmentation Detection and Consolidation\n    Purpose:\n    - Detects in-source fragmentation during LC-MS analysis\n    - Fragments have: same lipid chain, similar RT, decreasing sugar count\n    - Identifies parent molecule (highest sugar count)\n    - Consolidates fragment volumes into parent\n    Chemistry:\n    - In-source fragmentation: Molecules break before mass analysis",
        "detail": "backend.rules.rule5_fragmentation",
        "documentation": {}
    },
    {
        "label": "DummyGangliosideDataProcessor",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_backup",
        "description": "backend.services.dummy.processors_backup",
        "peekOfCode": "class DummyGangliosideDataProcessor:\n    \"\"\"더미 데이터 프로세서 - 실제 분석 로직 시뮬레이션\"\"\"\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.rt_tolerance = 0.1\n        print(\"🧪 Dummy Ganglioside Data Processor 초기화\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None\n    ):",
        "detail": "backend.services.dummy.processors_backup",
        "documentation": {}
    },
    {
        "label": "DummyVisualizationService",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_backup",
        "description": "backend.services.dummy.processors_backup",
        "peekOfCode": "class DummyVisualizationService:\n    \"\"\"더미 시각화 서비스\"\"\"\n    def __init__(self):\n        print(\"📊 Dummy Visualization Service 초기화\")\n    def create_all_plots(self, results: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"더미 시각화 생성\"\"\"\n        return {\n            \"message\": \"더미 시각화 기능 준비 중\",\n            \"available_plots\": [\n                \"regression_plots\",",
        "detail": "backend.services.dummy.processors_backup",
        "documentation": {}
    },
    {
        "label": "DummyGangliosideDataProcessor",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_new",
        "description": "backend.services.dummy.processors_new",
        "peekOfCode": "class DummyGangliosideDataProcessor:\n    \"\"\"개선된 Ganglioside 분석 더미 클래스 (위음성 감소)\"\"\"\n    def __init__(self):\n        # 기본 설정값 (더 관대한 기준으로 설정)\n        self.outlier_threshold = 2.0  # 표준화 잔차 임계값 (기본값 더 관대하게)\n        self.r2_threshold = 0.90  # R² 임계값 (기본값 더 낮게)\n        self.rt_tolerance = 0.3  # RT 허용 오차 (기본값 더 크게)\n        print(\"🧪 Dummy Ganglioside Data Processor 초기화 (개선된 버전)\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None",
        "detail": "backend.services.dummy.processors_new",
        "documentation": {}
    },
    {
        "label": "DummyVisualizationService",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_new",
        "description": "backend.services.dummy.processors_new",
        "peekOfCode": "class DummyVisualizationService:\n    \"\"\"더미 시각화 서비스 (변경사항 없음)\"\"\"\n    def __init__(self):\n        print(\"📊 Dummy Visualization Service 초기화\")\n    def create_dashboard(self, results: Dict[str, Any]) -> str:\n        return \"<div>더미 시각화 대시보드</div>\"\nclass DummyRegressionAnalyzer:\n    \"\"\"더미 회귀분석기 (변경사항 없음)\"\"\"\n    def __init__(self):\n        print(\"🔬 Dummy Regression Analyzer 초기화\")",
        "detail": "backend.services.dummy.processors_new",
        "documentation": {}
    },
    {
        "label": "DummyRegressionAnalyzer",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_new",
        "description": "backend.services.dummy.processors_new",
        "peekOfCode": "class DummyRegressionAnalyzer:\n    \"\"\"더미 회귀분석기 (변경사항 없음)\"\"\"\n    def __init__(self):\n        print(\"🔬 Dummy Regression Analyzer 초기화\")\n    def analyze_regression(self, data: pd.DataFrame) -> Dict[str, Any]:\n        return {\"r2\": 0.95, \"slope\": -0.5, \"intercept\": 8.0}",
        "detail": "backend.services.dummy.processors_new",
        "documentation": {}
    },
    {
        "label": "GangliosideDataProcessor",
        "kind": 6,
        "importPath": "backend.services.data_processor",
        "description": "backend.services.data_processor",
        "peekOfCode": "class GangliosideDataProcessor:\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.rt_tolerance = 0.1\n        print(\"🔬 Ganglioside Data Processor 초기화 완료\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None\n    ):\n        \"\"\"분석 설정 업데이트\"\"\"",
        "detail": "backend.services.data_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "kind": 6,
        "importPath": "backend.services.ganglioside_processor",
        "description": "backend.services.ganglioside_processor",
        "peekOfCode": "class GangliosideProcessor:\n    def __init__(self):\n        # Fixed thresholds for realistic chemical data analysis\n        self.r2_threshold = 0.75  # Lowered from 0.99 to realistic value\n        self.outlier_threshold = 2.5  # Lowered from 3.0 for better sensitivity\n        self.rt_tolerance = 0.1\n        # Initialize categorizer\n        self.categorizer = GangliosideCategorizer()\n        print(\"🧬 Ganglioside Processor 초기화 완료 (Fixed Version with Categorization)\")\n    def update_settings(",
        "detail": "backend.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorFixed",
        "kind": 6,
        "importPath": "backend.services.ganglioside_processor_fixed",
        "description": "backend.services.ganglioside_processor_fixed",
        "peekOfCode": "class GangliosideProcessorFixed:\n    \"\"\"\n    Fixed Ganglioside Processor with improved regression analysis\n    \"\"\"\n    def __init__(self):\n        # Realistic thresholds for chemical analysis\n        self.r2_threshold = 0.75  # Lowered from 0.99 to realistic value\n        self.outlier_threshold = 2.5  # Lowered from 3.0 for better sensitivity\n        self.rt_tolerance = 0.1\n        self.min_compounds_for_regression = 2",
        "detail": "backend.services.ganglioside_processor_fixed",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorModular",
        "kind": 6,
        "importPath": "backend.services.ganglioside_processor_modular",
        "description": "backend.services.ganglioside_processor_modular",
        "peekOfCode": "class GangliosideProcessorModular:\n    \"\"\"\n    Ganglioside Analysis Processor using Modular Rules\n    Key Design Principles:\n    1. Carbon chain variation (e.g., 36:1 vs 38:1) within same prefix is EXPECTED\n    2. Multiple regression accounts for carbon chain effects via a_component\n    3. Outliers are determined by residuals, not by having different carbon chains\n    4. Realistic thresholds based on LC-MS data variability\n    Example:\n    - GT3(36:1;O2), Log P: 2.8, RT: 9.599  ✅ Valid",
        "detail": "backend.services.ganglioside_processor_modular",
        "documentation": {}
    },
    {
        "label": "RegressionAnalyzer",
        "kind": 6,
        "importPath": "backend.services.regression_analyzer",
        "description": "backend.services.regression_analyzer",
        "peekOfCode": "class RegressionAnalyzer:\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.confidence_level = 0.95\n        print(\"📈 Regression Analyzer 초기화 완료\")\n    def perform_comprehensive_regression(\n        self, x_data: np.ndarray, y_data: np.ndarray, compound_names: List[str] = None,\n        feature_names: List[str] = None\n    ) -> Dict[str, Any]:",
        "detail": "backend.services.regression_analyzer",
        "documentation": {}
    },
    {
        "label": "StepwiseAnalyzer",
        "kind": 6,
        "importPath": "backend.services.stepwise_analyzer",
        "description": "backend.services.stepwise_analyzer",
        "peekOfCode": "class StepwiseAnalyzer:\n    \"\"\"\n    Provides step-by-step analysis with rule separation for interactive supervision\n    \"\"\"\n    def __init__(self):\n        self.processor = GangliosideProcessor()\n        self.current_data = None\n        self.preprocessed_data = None\n        self.rule_results = {}\n        self.analysis_state = \"initialized\"",
        "detail": "backend.services.stepwise_analyzer",
        "documentation": {}
    },
    {
        "label": "VisualizationService",
        "kind": 6,
        "importPath": "backend.services.visualization_service",
        "description": "backend.services.visualization_service",
        "peekOfCode": "class VisualizationService:\n    def __init__(self):\n        self.color_palette = {\n            \"valid\": \"#2ecc71\",  # Green\n            \"outlier\": \"#e74c3c\",  # Red\n            \"anchor\": \"#3498db\",  # Blue\n            \"regression\": \"#9b59b6\",  # Purple\n            \"background\": \"#ecf0f1\",  # Light gray\n            \"grid\": \"#bdc3c7\",  # Gray\n        }",
        "detail": "backend.services.visualization_service",
        "documentation": {}
    },
    {
        "label": "CompoundData",
        "kind": 6,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "class CompoundData:\n    \"\"\"Single compound data structure\"\"\"\n    name: str\n    rt: float  # Retention Time\n    volume: float\n    log_p: float  # Partition Coefficient (Log P)\n    anchor: str  # 'T' or 'F'\n    # Derived properties\n    prefix: Optional[str] = None\n    suffix: Optional[str] = None",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "VisualizationData",
        "kind": 6,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "class VisualizationData:\n    \"\"\"3D visualization data structure\"\"\"\n    x_data: List[float]  # Mass-to-charge ratio (m/z)\n    y_data: List[float]  # Retention Time\n    z_data: List[float]  # Partition Coefficient (Log P)\n    # Additional properties\n    labels: List[str]\n    colors: List[str]\n    sizes: List[float]\n    anchor_mask: List[bool]",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "RegressionResult",
        "kind": 6,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "class RegressionResult:\n    \"\"\"Regression analysis result\"\"\"\n    prefix: str\n    slope: float\n    intercept: float\n    r2: float\n    n_samples: int\n    equation: str\n    p_value: float\n    def predict(self, log_p_values: np.ndarray) -> np.ndarray:",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "AnalysisResults",
        "kind": 6,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "class AnalysisResults:\n    \"\"\"Complete analysis results structure\"\"\"\n    valid_compounds: List[CompoundData]\n    outliers: List[CompoundData]\n    regression_results: Dict[str, RegressionResult]\n    statistics: Dict[str, Any]\n    # Additional analysis data\n    sugar_analysis: Dict[str, Any]\n    oacetylation_analysis: Dict[str, Any]\n    detailed_analysis: Dict[str, Any]",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "calculate_mass_to_charge",
        "kind": 2,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "def calculate_mass_to_charge(compound_name: str, base_mass: Optional[float] = None) -> float:\n    \"\"\"\n    Calculate mass-to-charge ratio from compound name\n    Args:\n        compound_name: Compound name like \"GD1a(36:1;O2)\"\n        base_mass: Optional base mass for the ganglioside class\n    Returns:\n        Estimated m/z ratio\n    \"\"\"\n    import re",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "kind": 6,
        "importPath": "backend.utils.ganglioside_categorizer",
        "description": "backend.utils.ganglioside_categorizer",
        "peekOfCode": "class GangliosideCategorizer:\n    \"\"\"\n    Categorizes gangliosides based on their prefix patterns for better visualization grouping.\n    Examples:\n    - GD1(34:1;O2) → Base: GD1, Category: GD (disialo)\n    - GD1+dHex(36:1;O2) → Base: GD1, Category: GD (disialo), Modified: dHex\n    - GM3+OAc(18:1;O2) → Base: GM3, Category: GM (monosialo), Modified: OAc\n    \"\"\"\n    def __init__(self):\n        # Define ganglioside categories based on sialic acid content",
        "detail": "backend.utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "test_categorizer",
        "kind": 2,
        "importPath": "backend.utils.ganglioside_categorizer",
        "description": "backend.utils.ganglioside_categorizer",
        "peekOfCode": "def test_categorizer():\n    \"\"\"Test function for the categorizer\"\"\"\n    import pandas as pd\n    # Sample data\n    test_data = {\n        'Name': [\n            'GD1(34:1;O2)',\n            'GD1+dHex(36:1;O2)',\n            'GM3+OAc(18:1;O2)',\n            'GT1(40:1;O2)',",
        "detail": "backend.utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class Settings(BaseModel):\n    \"\"\"애플리케이션 설정\"\"\"\n    # Database\n    database_url: str = \"postgresql://postgres:password@localhost:5432/ganglioside_db\"\n    # Redis\n    redis_url: str = \"redis://localhost:6379\"\n    # Application\n    secret_key: str = \"your-secret-key-here\"\n    debug: bool = True\n    # File Upload",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "settings = Settings()\n# 디렉토리 생성\nos.makedirs(settings.upload_dir, exist_ok=True)\nos.makedirs(settings.output_dir, exist_ok=True)",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = FastAPI(\n    title=\"🧬 Ganglioside Analyzer\",\n    description=\"산성 당지질 LC-MS/MS 데이터 자동 분석 시스템\",\n    version=\"2.0.0\",\n)\n# CORS 설정\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # 모든 오리진 허용 (개발용)\n    allow_credentials=True,",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "static_dir",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "static_dir = os.path.join(os.path.dirname(__file__), \"static\")\nif os.path.exists(static_dir):\n    app.mount(\"/static\", StaticFiles(directory=static_dir), name=\"static\")\n# 라우터 등록\napp.include_router(data_router)\napp.include_router(settings_router)\napp.include_router(web_router)\n# 루트 엔드포인트\n@app.get(\"/\")\nasync def root():",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "ValidationMetrics",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "description": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "peekOfCode": "class ValidationMetrics:\n    \"\"\"Container for validation metrics\"\"\"\n    # Regression metrics\n    r2_train: float\n    r2_test: float\n    rmse_train: float\n    rmse_test: float\n    mae_train: float\n    mae_test: float\n    # Classification metrics (valid vs outlier)",
        "detail": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "documentation": {}
    },
    {
        "label": "AlgorithmValidator",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "description": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "peekOfCode": "class AlgorithmValidator:\n    \"\"\"\n    Validates ganglioside analysis algorithm performance\n    Features:\n    - Cross-validation with multiple folds\n    - Leave-one-out validation for small datasets\n    - Train/test split validation\n    - Performance metrics calculation\n    - Overfitting detection\n    - Anchor compound learning effectiveness",
        "detail": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "description": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@dataclass\nclass ValidationMetrics:\n    \"\"\"Container for validation metrics\"\"\"\n    # Regression metrics\n    r2_train: float\n    r2_test: float\n    rmse_train: float\n    rmse_test: float\n    mae_train: float",
        "detail": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "description": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "peekOfCode": "class GangliosideCategorizer:\n    \"\"\"\n    Categorizes gangliosides based on their prefix patterns for better visualization grouping.\n    Examples:\n    - GD1(34:1;O2) → Base: GD1, Category: GD (disialo)\n    - GD1+dHex(36:1;O2) → Base: GD1, Category: GD (disialo), Modified: dHex\n    - GM3+OAc(18:1;O2) → Base: GM3, Category: GM (monosialo), Modified: OAc\n    \"\"\"\n    def __init__(self):\n        # Define ganglioside categories based on sialic acid content",
        "detail": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "test_categorizer",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "description": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "peekOfCode": "def test_categorizer():\n    \"\"\"Test function for the categorizer\"\"\"\n    import pandas as pd\n    # Sample data\n    test_data = {\n        'Name': [\n            'GD1(34:1;O2)',\n            'GD1+dHex(36:1;O2)',\n            'GM3+OAc(18:1;O2)',\n            'GT1(40:1;O2)',",
        "detail": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.ganglioside_processor",
        "description": "django_ganglioside.apps.analysis.services.ganglioside_processor",
        "peekOfCode": "class GangliosideProcessor:\n    def __init__(self):\n        # Fixed thresholds for realistic chemical data analysis\n        self.r2_threshold = 0.75  # Lowered from 0.99 to realistic value\n        self.outlier_threshold = 2.5  # Lowered from 3.0 for better sensitivity\n        self.rt_tolerance = 0.1\n        # Initialize categorizer\n        self.categorizer = GangliosideCategorizer()\n        print(\"🧬 Ganglioside Processor 초기화 완료 (Fixed Version with Categorization)\")\n    def update_settings(",
        "detail": "django_ganglioside.apps.analysis.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "RegressionAnalyzer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.regression_analyzer",
        "description": "django_ganglioside.apps.analysis.services.regression_analyzer",
        "peekOfCode": "class RegressionAnalyzer:\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.confidence_level = 0.95\n        print(\"📈 Regression Analyzer 초기화 완료\")\n    def perform_comprehensive_regression(\n        self, x_data: np.ndarray, y_data: np.ndarray, compound_names: List[str] = None\n    ) -> Dict[str, Any]:\n        \"\"\"",
        "detail": "django_ganglioside.apps.analysis.services.regression_analyzer",
        "documentation": {}
    },
    {
        "label": "AnalysisSessionAdmin",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.admin",
        "description": "django_ganglioside.apps.analysis.admin",
        "peekOfCode": "class AnalysisSessionAdmin(admin.ModelAdmin):\n    list_display = [\n        'id', 'user', 'colored_status', 'data_type', 'success_rate_display',\n        'duration_display', 'created_at'\n    ]\n    list_filter = ['status', 'data_type', 'created_at']\n    search_fields = ['name', 'user__username', 'original_filename']\n    readonly_fields = [\n        'created_at', 'updated_at', 'started_at', 'completed_at',\n        'celery_task_id', 'file_size'",
        "detail": "django_ganglioside.apps.analysis.admin",
        "documentation": {}
    },
    {
        "label": "AnalysisResultAdmin",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.admin",
        "description": "django_ganglioside.apps.analysis.admin",
        "peekOfCode": "class AnalysisResultAdmin(admin.ModelAdmin):\n    list_display = [\n        'id', 'session', 'total_compounds', 'valid_compounds',\n        'outlier_count', 'success_rate_percent', 'created_at'\n    ]\n    list_filter = ['created_at']\n    search_fields = ['session__name', 'session__user__username']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('Session', {",
        "detail": "django_ganglioside.apps.analysis.admin",
        "documentation": {}
    },
    {
        "label": "CompoundAdmin",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.admin",
        "description": "django_ganglioside.apps.analysis.admin",
        "peekOfCode": "class CompoundAdmin(admin.ModelAdmin):\n    list_display = [\n        'name', 'session', 'colored_status', 'category', 'rt',\n        'log_p', 'is_anchor', 'sugar_count'\n    ]\n    list_filter = ['status', 'category', 'is_anchor', 'session__data_type']\n    search_fields = ['name', 'prefix', 'session__name']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('Basic Info', {",
        "detail": "django_ganglioside.apps.analysis.admin",
        "documentation": {}
    },
    {
        "label": "RegressionModelAdmin",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.admin",
        "description": "django_ganglioside.apps.analysis.admin",
        "peekOfCode": "class RegressionModelAdmin(admin.ModelAdmin):\n    list_display = [\n        'prefix_group', 'session', 'model_type', 'r2_display',\n        'n_samples', 'n_anchors', 'created_at'\n    ]\n    list_filter = ['model_type', 'created_at']\n    search_fields = ['prefix_group', 'session__name']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('Model Info', {",
        "detail": "django_ganglioside.apps.analysis.admin",
        "documentation": {}
    },
    {
        "label": "AnalysisConfig",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.apps",
        "description": "django_ganglioside.apps.analysis.apps",
        "peekOfCode": "class AnalysisConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.analysis'\n    verbose_name = 'Analysis'",
        "detail": "django_ganglioside.apps.analysis.apps",
        "documentation": {}
    },
    {
        "label": "AnalysisSession",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "class AnalysisSession(TimeStampedModel, SoftDeleteModel):\n    \"\"\"\n    Analysis session - represents a complete analysis run\n    \"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('uploading', 'Uploading'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),\n        ('failed', 'Failed'),",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "class AnalysisResult(TimeStampedModel):\n    \"\"\"\n    Analysis results - stores aggregated analysis output\n    \"\"\"\n    session = models.OneToOneField(\n        AnalysisSession,\n        on_delete=models.CASCADE,\n        related_name='result'\n    )\n    # Statistics",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "Compound",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "class Compound(TimeStampedModel):\n    \"\"\"\n    Individual compound data and classification\n    \"\"\"\n    STATUS_CHOICES = [\n        ('valid', 'Valid'),\n        ('outlier', 'Outlier'),\n        ('fragment', 'Fragment'),\n    ]\n    CATEGORY_CHOICES = [",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "RegressionModel",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "class RegressionModel(TimeStampedModel):\n    \"\"\"\n    Stores regression model details for each prefix group\n    \"\"\"\n    session = models.ForeignKey(\n        AnalysisSession,\n        on_delete=models.CASCADE,\n        related_name='regression_models'\n    )\n    # Model identification",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "User = get_user_model()\nclass AnalysisSession(TimeStampedModel, SoftDeleteModel):\n    \"\"\"\n    Analysis session - represents a complete analysis run\n    \"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('uploading', 'Uploading'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "django_ganglioside.apps.core.apps",
        "description": "django_ganglioside.apps.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.core'\n    verbose_name = 'Core'",
        "detail": "django_ganglioside.apps.core.apps",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "kind": 6,
        "importPath": "django_ganglioside.apps.core.models",
        "description": "django_ganglioside.apps.core.models",
        "peekOfCode": "class TimeStampedModel(models.Model):\n    \"\"\"\n    Abstract base class with created_at and updated_at timestamps\n    \"\"\"\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\nclass SoftDeleteModel(models.Model):\n    \"\"\"",
        "detail": "django_ganglioside.apps.core.models",
        "documentation": {}
    },
    {
        "label": "SoftDeleteModel",
        "kind": 6,
        "importPath": "django_ganglioside.apps.core.models",
        "description": "django_ganglioside.apps.core.models",
        "peekOfCode": "class SoftDeleteModel(models.Model):\n    \"\"\"\n    Abstract base class with soft delete functionality\n    \"\"\"\n    deleted_at = models.DateTimeField(null=True, blank=True)\n    is_deleted = models.BooleanField(default=False)\n    class Meta:\n        abstract = True\n    def delete(self, using=None, keep_parents=False):\n        \"\"\"Soft delete - mark as deleted instead of removing from database\"\"\"",
        "detail": "django_ganglioside.apps.core.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "django_ganglioside.apps.core.urls",
        "description": "django_ganglioside.apps.core.urls",
        "peekOfCode": "app_name = 'core'\nurlpatterns = [\n    path('', views.health_check, name='health-check'),\n]",
        "detail": "django_ganglioside.apps.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "django_ganglioside.apps.core.urls",
        "description": "django_ganglioside.apps.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.health_check, name='health-check'),\n]",
        "detail": "django_ganglioside.apps.core.urls",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "django_ganglioside.apps.core.views",
        "description": "django_ganglioside.apps.core.views",
        "peekOfCode": "def health_check(request):\n    \"\"\"\n    Health check endpoint for monitoring\n    Tests database and Redis connectivity\n    \"\"\"\n    health = {\n        'status': 'healthy',\n        'timestamp': timezone.now().isoformat(),\n        'service': 'ganglioside-analysis-django',\n        'version': '2.0.0',",
        "detail": "django_ganglioside.apps.core.views",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent.parent\n# Environment variables\nenv = environ.Env(\n    DEBUG=(bool, False)\n)\n# Read .env file if it exists\nenv_file = BASE_DIR / '.env'\nif env_file.exists():\n    environ.Env.read_env(str(env_file))\n# SECURITY WARNING: keep the secret key used in production secret!",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "env = environ.Env(\n    DEBUG=(bool, False)\n)\n# Read .env file if it exists\nenv_file = BASE_DIR / '.env'\nif env_file.exists():\n    environ.Env.read_env(str(env_file))\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY', default='django-insecure-dev-key-change-in-production')\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "env_file",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "env_file = BASE_DIR / '.env'\nif env_file.exists():\n    environ.Env.read_env(str(env_file))\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY', default='django-insecure-dev-key-change-in-production')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env('DEBUG')\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nDJANGO_APPS = [",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "SECRET_KEY = env('SECRET_KEY', default='django-insecure-dev-key-change-in-production')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env('DEBUG')\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DEBUG = env('DEBUG')\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DJANGO_APPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nTHIRD_PARTY_APPS = [\n    'rest_framework',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "THIRD_PARTY_APPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "THIRD_PARTY_APPS = [\n    'rest_framework',\n    'corsheaders',\n    'drf_spectacular',\n    'django_celery_beat',\n    'django_celery_results',\n]\nLOCAL_APPS = [\n    'apps.core',\n    'apps.users',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOCAL_APPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "LOCAL_APPS = [\n    'apps.core',\n    'apps.users',\n    'apps.analysis',\n    'apps.rules',\n    'apps.visualization',\n]\nINSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'corsheaders.middleware.CorsMiddleware',  # CORS before CommonMiddleware\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'corsheaders.middleware.CorsMiddleware',  # CORS before CommonMiddleware\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "ROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\n# Database\nDATABASES = {\n    'default': env.db('DATABASE_URL', default='sqlite:///db.sqlite3')\n}\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DATABASES = {\n    'default': env.db('DATABASE_URL', default='sqlite:///db.sqlite3')\n}\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.JSONParser',\n        'rest_framework.parsers.FormParser',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.JSONParser',\n        'rest_framework.parsers.FormParser',\n        'rest_framework.parsers.MultiPartParser',\n    ],",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SPECTACULAR_SETTINGS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "SPECTACULAR_SETTINGS = {\n    'TITLE': 'Ganglioside Analysis API',\n    'DESCRIPTION': 'LC-MS/MS Ganglioside Analysis Platform - 5-Rule Algorithm',\n    'VERSION': '2.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'COMPONENT_SPLIT_REQUEST': True,\n}\n# CORS Settings\nCORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development\nCORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development\nCORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[\n    'http://localhost:3000',\n    'http://localhost:8000',\n])\nCORS_ALLOW_CREDENTIALS = True\n# Celery Configuration\nCELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[\n    'http://localhost:3000',\n    'http://localhost:8000',\n])\nCORS_ALLOW_CREDENTIALS = True\n# Celery Configuration\nCELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# Celery Configuration\nCELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_TRACK_STARTED",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_TIME_LIMIT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND_DB",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),\n}",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DATA_UPLOAD_MAX_MEMORY_SIZE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),\n}\n# Logging\nLOGGING = {",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "FILE_UPLOAD_MAX_MEMORY_SIZE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "FILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),\n}\n# Logging\nLOGGING = {\n    'version': 1,",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ANALYSIS_DEFAULTS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "ANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),\n}\n# Logging\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',\n            'style': '{',\n        },\n        'simple': {\n            'format': '{levelname} {message}',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "DEBUG = True\n# Allow all hosts in development\nALLOWED_HOSTS = ['*']\n# Development-specific apps\nINSTALLED_APPS += [\n    'debug_toolbar',\n    'django_extensions',\n]\nMIDDLEWARE += [\n    'debug_toolbar.middleware.DebugToolbarMiddleware',",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Development-specific apps\nINSTALLED_APPS += [\n    'debug_toolbar',\n    'django_extensions',\n]\nMIDDLEWARE += [\n    'debug_toolbar.middleware.DebugToolbarMiddleware',\n]\n# Debug toolbar configuration",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "INTERNAL_IPS = [\n    '127.0.0.1',\n    'localhost',\n]\n# Email backend for development (prints to console)\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n# Simplified password hashing for development (faster)\nPASSWORD_HASHERS = [\n    'django.contrib.auth.hashers.MD5PasswordHasher',\n]",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n# Simplified password hashing for development (faster)\nPASSWORD_HASHERS = [\n    'django.contrib.auth.hashers.MD5PasswordHasher',\n]\n# Allow all CORS origins in development\nCORS_ALLOW_ALL_ORIGINS = True\n# Disable require HTTPS in development\nSECURE_SSL_REDIRECT = False\n# DRF - Allow unauthenticated access in development for testing",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "PASSWORD_HASHERS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "PASSWORD_HASHERS = [\n    'django.contrib.auth.hashers.MD5PasswordHasher',\n]\n# Allow all CORS origins in development\nCORS_ALLOW_ALL_ORIGINS = True\n# Disable require HTTPS in development\nSECURE_SSL_REDIRECT = False\n# DRF - Allow unauthenticated access in development for testing\nREST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = [\n    'rest_framework.permissions.AllowAny',",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# Disable require HTTPS in development\nSECURE_SSL_REDIRECT = False\n# DRF - Allow unauthenticated access in development for testing\nREST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = [\n    'rest_framework.permissions.AllowAny',\n]\n# Celery - Use synchronous execution in development for easier debugging\nCELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_ALWAYS_EAGER', default=False)\nCELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "SECURE_SSL_REDIRECT = False\n# DRF - Allow unauthenticated access in development for testing\nREST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = [\n    'rest_framework.permissions.AllowAny',\n]\n# Celery - Use synchronous execution in development for easier debugging\nCELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_ALWAYS_EAGER', default=False)\nCELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "REST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = [\n    'rest_framework.permissions.AllowAny',\n]\n# Celery - Use synchronous execution in development for easier debugging\nCELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_ALWAYS_EAGER', default=False)\nCELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_ALWAYS_EAGER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "CELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_ALWAYS_EAGER', default=False)\nCELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_EAGER_PROPAGATES",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "CELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "DEBUG = False\n# Security settings\nSECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_PROXY_SSL_HEADER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SECURE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "CSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_BROWSER_XSS_FILTER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_CONTENT_TYPE_NOSNIFF",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "X_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_SECONDS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving (use WhiteNoise or CDN in production)",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_INCLUDE_SUBDOMAINS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving (use WhiteNoise or CDN in production)\nSTATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_PRELOAD",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving (use WhiteNoise or CDN in production)\nSTATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'\n# Email configuration",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving (use WhiteNoise or CDN in production)\nSTATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving (use WhiteNoise or CDN in production)\nSTATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "DATABASES['default']['CONN_MAX_AGE']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "DATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving (use WhiteNoise or CDN in production)\nSTATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    sentry_sdk.init(",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    sentry_sdk.init(\n        dsn=env('SENTRY_DSN'),",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    sentry_sdk.init(\n        dsn=env('SENTRY_DSN'),\n        integrations=[",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    sentry_sdk.init(\n        dsn=env('SENTRY_DSN'),\n        integrations=[\n            DjangoIntegration(),",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "LOGGING['handlers']['file']['filename']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "LOGGING['handlers']['file']['filename'] = '/var/log/ganglioside/django.log'\nLOGGING['root']['level'] = 'WARNING'\nLOGGING['loggers']['django']['level'] = 'WARNING'",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "LOGGING['root']['level']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "LOGGING['root']['level'] = 'WARNING'\nLOGGING['loggers']['django']['level'] = 'WARNING'",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "LOGGING['loggers']['django']['level']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "LOGGING['loggers']['django']['level'] = 'WARNING'",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "django_ganglioside.config.asgi",
        "description": "django_ganglioside.config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "django_ganglioside.config.asgi",
        "documentation": {}
    },
    {
        "label": "debug_task",
        "kind": 2,
        "importPath": "django_ganglioside.config.celery",
        "description": "django_ganglioside.config.celery",
        "peekOfCode": "def debug_task(self):\n    \"\"\"Debug task to test Celery setup\"\"\"\n    print(f'Request: {self.request!r}')",
        "detail": "django_ganglioside.config.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "django_ganglioside.config.celery",
        "description": "django_ganglioside.config.celery",
        "peekOfCode": "app = Celery('ganglioside_analysis')\n# Load configuration from Django settings with CELERY_ prefix\napp.config_from_object('django.conf:settings', namespace='CELERY')\n# Auto-discover tasks in all installed apps\napp.autodiscover_tasks()\n@app.task(bind=True, ignore_result=True)\ndef debug_task(self):\n    \"\"\"Debug task to test Celery setup\"\"\"\n    print(f'Request: {self.request!r}')",
        "detail": "django_ganglioside.config.celery",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "django_ganglioside.config.urls",
        "description": "django_ganglioside.config.urls",
        "peekOfCode": "urlpatterns = [\n    # Admin\n    path('admin/', admin.site.urls),\n    # API Documentation\n    path('api/schema/', SpectacularAPIView.as_view(), name='schema'),\n    path('api/docs/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),\n    path('api/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),\n    # API Endpoints\n    path('api/auth/', include('apps.users.urls')),\n    path('api/analysis/', include('apps.analysis.urls')),",
        "detail": "django_ganglioside.config.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "django_ganglioside.config.urls",
        "description": "django_ganglioside.config.urls",
        "peekOfCode": "admin.site.site_header = \"Ganglioside Analysis Admin\"\nadmin.site.site_title = \"Ganglioside Analysis\"\nadmin.site.index_title = \"LC-MS/MS Analysis Management\"",
        "detail": "django_ganglioside.config.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "django_ganglioside.config.urls",
        "description": "django_ganglioside.config.urls",
        "peekOfCode": "admin.site.site_title = \"Ganglioside Analysis\"\nadmin.site.index_title = \"LC-MS/MS Analysis Management\"",
        "detail": "django_ganglioside.config.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "django_ganglioside.config.urls",
        "description": "django_ganglioside.config.urls",
        "peekOfCode": "admin.site.index_title = \"LC-MS/MS Analysis Management\"",
        "detail": "django_ganglioside.config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "django_ganglioside.config.wsgi",
        "description": "django_ganglioside.config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "django_ganglioside.config.wsgi",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "kind": 6,
        "importPath": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "description": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "peekOfCode": "class GangliosideProcessor:\n    \"\"\"Minimal version of ganglioside processor for validation\"\"\"\n    def __init__(self):\n        self.r2_threshold = 0.75\n        self.outlier_threshold = 2.5\n        self.rt_tolerance = 0.1\n    def process_data(self, df: pd.DataFrame, data_type: str = 'Porcine') -> Dict[str, Any]:\n        \"\"\"Process data with 5-rule algorithm\"\"\"\n        df_processed = self._preprocess_data(df.copy())\n        # Apply Rule 1: Regression",
        "detail": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "documentation": {}
    },
    {
        "label": "ValidationMetrics",
        "kind": 6,
        "importPath": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "description": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "peekOfCode": "class ValidationMetrics:\n    \"\"\"Container for validation metrics\"\"\"\n    r2_train: float\n    r2_test: float\n    rmse_train: float\n    rmse_test: float\n    mae_train: float\n    mae_test: float\n    n_train: int\n    n_test: int",
        "detail": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "documentation": {}
    },
    {
        "label": "AlgorithmValidator",
        "kind": 6,
        "importPath": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "description": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "peekOfCode": "class AlgorithmValidator:\n    \"\"\"Validates ganglioside analysis algorithm performance\"\"\"\n    def __init__(self, processor: GangliosideProcessor = None):\n        self.processor = processor or GangliosideProcessor()\n    def validate_leave_one_out(self, df: pd.DataFrame, data_type: str = 'Porcine') -> Dict[str, Any]:\n        \"\"\"Leave-One-Out cross-validation\"\"\"\n        anchors = df[df['Anchor'] == 'T'].copy()\n        non_anchors = df[df['Anchor'] == 'F'].copy()\n        n_anchors = len(anchors)\n        if n_anchors < 2:",
        "detail": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "description": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "peekOfCode": "def print_header(text: str):\n    \"\"\"Print formatted header\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\"  {text}\")\n    print(\"=\" * 80)\ndef print_metrics(metrics: dict, indent: int = 0):\n    \"\"\"Pretty print metrics\"\"\"\n    prefix = \"  \" * indent\n    for key, value in metrics.items():\n        if isinstance(value, dict):",
        "detail": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "documentation": {}
    },
    {
        "label": "print_metrics",
        "kind": 2,
        "importPath": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "description": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "peekOfCode": "def print_metrics(metrics: dict, indent: int = 0):\n    \"\"\"Pretty print metrics\"\"\"\n    prefix = \"  \" * indent\n    for key, value in metrics.items():\n        if isinstance(value, dict):\n            print(f\"{prefix}{key}:\")\n            print_metrics(value, indent + 1)\n        elif isinstance(value, float):\n            print(f\"{prefix}{key}: {value:.4f}\")\n        else:",
        "detail": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "documentation": {}
    },
    {
        "label": "validate_loo",
        "kind": 2,
        "importPath": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "description": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "peekOfCode": "def validate_loo(df: pd.DataFrame, data_type: str = 'Porcine'):\n    \"\"\"Run Leave-One-Out cross-validation\"\"\"\n    print_header(\"LEAVE-ONE-OUT CROSS-VALIDATION\")\n    processor = GangliosideProcessor()\n    validator = AlgorithmValidator(processor)\n    anchors = df[df['Anchor'] == 'T']\n    print(f\"\\nDataset: {len(df)} compounds ({len(anchors)} anchors)\")\n    print(\"Method: Each anchor is tested individually\\n\")\n    print(\"Running validation...\")\n    results = validator.validate_leave_one_out(df, data_type=data_type)",
        "detail": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "documentation": {}
    },
    {
        "label": "validate_kfold",
        "kind": 2,
        "importPath": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "description": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "peekOfCode": "def validate_kfold(df: pd.DataFrame, n_splits: int = 5, data_type: str = 'Porcine'):\n    \"\"\"Run K-Fold cross-validation\"\"\"\n    print_header(f\"{n_splits}-FOLD CROSS-VALIDATION\")\n    processor = GangliosideProcessor()\n    validator = AlgorithmValidator(processor)\n    print(f\"\\nDataset: {len(df)} compounds ({len(df[df['Anchor']=='T'])} anchors)\")\n    print(f\"Splits: {n_splits}\")\n    print(\"\\nRunning validation...\")\n    results = validator.validate_with_kfold(df, n_splits=n_splits, data_type=data_type)\n    print_header(\"RESULTS\")",
        "detail": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "description": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        description='Validate ganglioside analysis algorithm (Standalone - No Django Required)'\n    )\n    parser.add_argument(\n        '--data',\n        type=str,\n        default='../data/samples/testwork_user.csv',\n        help='Path to CSV file with MS/MS verified data'\n    )",
        "detail": "django_ganglioside.trace.algorithm_versions.v1.0_baseline.validate_standalone",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "django_ganglioside.manage",
        "description": "django_ganglioside.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "django_ganglioside.manage",
        "documentation": {}
    },
    {
        "label": "preprocess_data",
        "kind": 2,
        "importPath": "django_ganglioside.run_final_validation",
        "description": "django_ganglioside.run_final_validation",
        "peekOfCode": "def preprocess_data(df):\n    \"\"\"Extract prefix and detect modifications\"\"\"\n    def extract_prefix(name):\n        match = re.match(r'^([A-Z]+\\d+)', str(name))\n        return match.group(1) if match else 'Unknown'\n    def detect_modification(name):\n        modifications = ['HexNAc', 'dHex', 'OAc', 'NeuAc', 'NeuGc']\n        return any(f'+{mod}' in str(name) for mod in modifications)\n    df['prefix'] = df['Name'].apply(extract_prefix)\n    df['is_modified'] = df['Name'].apply(detect_modification)",
        "detail": "django_ganglioside.run_final_validation",
        "documentation": {}
    },
    {
        "label": "validate_kfold_detailed",
        "kind": 2,
        "importPath": "django_ganglioside.run_final_validation",
        "description": "django_ganglioside.run_final_validation",
        "peekOfCode": "def validate_kfold_detailed(df, n_splits=10, separate_modified=True):\n    \"\"\"K-Fold validation with detailed per-compound predictions\"\"\"\n    anchors = df[df['Anchor'] == 'T'].copy()\n    non_anchors = df[df['Anchor'] == 'F'].copy()\n    if len(anchors) < n_splits:\n        print(f\"Warning: Only {len(anchors)} anchors, using {len(anchors)}-fold\")\n        n_splits = len(anchors)\n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    fold_results = []\n    all_predictions = []",
        "detail": "django_ganglioside.run_final_validation",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "django_ganglioside.run_final_validation",
        "description": "django_ganglioside.run_final_validation",
        "peekOfCode": "def main():\n    print(\"=\"*80)\n    print(\"FINAL VALIDATION SUITE - Week 1 Day 4\")\n    print(\"=\"*80)\n    print(\"Algorithm: v1.1 (Separated Modified Compounds)\")\n    print(\"Validation Methods: LOO, 5-Fold, 10-Fold\")\n    print(\"\")\n    # Load data\n    data_file = '../data/samples/testwork_user.csv'\n    df = pd.read_csv(data_file)",
        "detail": "django_ganglioside.run_final_validation",
        "documentation": {}
    },
    {
        "label": "preprocess_data",
        "kind": 2,
        "importPath": "django_ganglioside.run_simple_tuning",
        "description": "django_ganglioside.run_simple_tuning",
        "peekOfCode": "def preprocess_data(df):\n    \"\"\"Extract prefix and detect modifications\"\"\"\n    def extract_prefix(name):\n        match = re.match(r'^([A-Z]+\\d+)', str(name))\n        return match.group(1) if match else 'Unknown'\n    def detect_modification(name):\n        modifications = ['HexNAc', 'dHex', 'OAc', 'NeuAc', 'NeuGc']\n        return any(f'+{mod}' in str(name) for mod in modifications)\n    df['prefix'] = df['Name'].apply(extract_prefix)\n    df['is_modified'] = df['Name'].apply(detect_modification)",
        "detail": "django_ganglioside.run_simple_tuning",
        "documentation": {}
    },
    {
        "label": "validate_loo",
        "kind": 2,
        "importPath": "django_ganglioside.run_simple_tuning",
        "description": "django_ganglioside.run_simple_tuning",
        "peekOfCode": "def validate_loo(df, separate_modified=False, use_ridge=False, ridge_alpha=1.0):\n    \"\"\"Leave-One-Out validation with configuration\"\"\"\n    anchors = df[df['Anchor'] == 'T'].copy()\n    non_anchors = df[df['Anchor'] == 'F'].copy()\n    n_anchors = len(anchors)\n    if n_anchors < 2:\n        return {'error': 'Need at least 2 anchors'}\n    predictions = []\n    actuals = []\n    for idx in range(n_anchors):",
        "detail": "django_ganglioside.run_simple_tuning",
        "documentation": {}
    },
    {
        "label": "validate_kfold",
        "kind": 2,
        "importPath": "django_ganglioside.run_simple_tuning",
        "description": "django_ganglioside.run_simple_tuning",
        "peekOfCode": "def validate_kfold(df, n_splits=5, separate_modified=False, use_ridge=False, ridge_alpha=1.0):\n    \"\"\"K-Fold validation with configuration\"\"\"\n    anchors = df[df['Anchor'] == 'T'].copy()\n    non_anchors = df[df['Anchor'] == 'F'].copy()\n    if len(anchors) < n_splits:\n        return validate_loo(df, separate_modified, use_ridge, ridge_alpha)\n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    fold_results = []\n    for fold_idx, (train_idx, test_idx) in enumerate(kfold.split(anchors), 1):\n        anchors_train = anchors.iloc[train_idx].copy()",
        "detail": "django_ganglioside.run_simple_tuning",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "django_ganglioside.run_simple_tuning",
        "description": "django_ganglioside.run_simple_tuning",
        "peekOfCode": "def main():\n    print(\"=\"*80)\n    print(\"SIMPLE AUTO-TUNING\")\n    print(\"=\"*80)\n    # Load data\n    data_file = '../data/samples/testwork_user.csv'\n    print(f\"\\nLoading: {data_file}\")\n    df = pd.read_csv(data_file)\n    df = preprocess_data(df)\n    print(f\"✅ Loaded {len(df)} compounds ({len(df[df['Anchor']=='T'])} anchors)\")",
        "detail": "django_ganglioside.run_simple_tuning",
        "documentation": {}
    },
    {
        "label": "create_category_scatter_plot",
        "kind": 2,
        "importPath": "scripts.demos.category_visualization_demo",
        "description": "scripts.demos.category_visualization_demo",
        "peekOfCode": "def create_category_scatter_plot(df, categorizer):\n    \"\"\"Create a scatter plot colored by ganglioside categories\"\"\"\n    # Get categorization\n    categorization = categorizer.categorize_compounds(df)\n    colors = categorizer.get_category_colors()\n    # Add category information to dataframe\n    df_viz = df.copy()\n    df_viz['Category'] = df_viz['Name'].apply(\n        lambda x: categorization['compound_mapping'][x]['category']\n    )",
        "detail": "scripts.demos.category_visualization_demo",
        "documentation": {}
    },
    {
        "label": "create_category_distribution_charts",
        "kind": 2,
        "importPath": "scripts.demos.category_visualization_demo",
        "description": "scripts.demos.category_visualization_demo",
        "peekOfCode": "def create_category_distribution_charts(df, categorizer):\n    \"\"\"Create distribution charts for categories\"\"\"\n    categorization = categorizer.categorize_compounds(df)\n    colors = categorizer.get_category_colors()\n    # Create subplots\n    fig = make_subplots(\n        rows=2, cols=2,\n        subplot_titles=(\n            '📊 Category Distribution',\n            '🏷️ Base Prefix Distribution',",
        "detail": "scripts.demos.category_visualization_demo",
        "documentation": {}
    },
    {
        "label": "create_category_3d_plot",
        "kind": 2,
        "importPath": "scripts.demos.category_visualization_demo",
        "description": "scripts.demos.category_visualization_demo",
        "peekOfCode": "def create_category_3d_plot(df, categorizer):\n    \"\"\"Create 3D plot showing RT vs Log P vs Volume by category\"\"\"\n    # Get categorization\n    categorization = categorizer.categorize_compounds(df)\n    colors = categorizer.get_category_colors()\n    # Add category information\n    df_viz = df.copy()\n    df_viz['Category'] = df_viz['Name'].apply(\n        lambda x: categorization['compound_mapping'][x]['category']\n    )",
        "detail": "scripts.demos.category_visualization_demo",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.demos.category_visualization_demo",
        "description": "scripts.demos.category_visualization_demo",
        "peekOfCode": "def main():\n    print(\"🎨 GANGLIOSIDE CATEGORIZATION VISUALIZATION DEMO\")\n    print(\"=\" * 60)\n    # Load data\n    df = pd.read_csv('data/samples/testwork_user.csv')\n    print(f\"📁 Loaded {len(df)} compounds\")\n    # Initialize categorizer\n    categorizer = GangliosideCategorizer()\n    # Generate categorization summary\n    summary = categorizer.generate_categorization_summary(df)",
        "detail": "scripts.demos.category_visualization_demo",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "interactive_analyzer",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/api/health\")\ndef health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "simple_analyzer",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/api/health\")\ndef health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"\n    return jsonify(\n        {\n            \"status\": \"healthy\",\n            \"service\": \"ganglioside-analyzer-flask\",",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"\n    return jsonify(\n        {\n            \"status\": \"healthy\",\n            \"service\": \"ganglioside-analyzer-flask\",\n            \"version\": \"2.0.0\",\n            \"timestamp\": datetime.now().isoformat(),\n        }\n    )",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def upload_csv():\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        if file.filename == \"\":\n            return jsonify({\"error\": \"파일명이 없습니다.\"}), 400\n        if not file.filename.endswith(\".csv\"):\n            return jsonify(",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "analyze_data",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def analyze_data():\n    \"\"\"데이터 분석 실행\"\"\"\n    try:\n        # 파일 및 설정 가져오기\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"분석할 파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "create_visualizations",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def create_visualizations():\n    \"\"\"시각화 생성\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # 시각화 생성",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "manage_settings",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def manage_settings():\n    \"\"\"설정 관리\"\"\"\n    try:\n        if request.method == \"GET\":\n            # 현재 설정 반환\n            return jsonify(\n                {\n                    \"current_settings\": ganglioside_processor.get_settings(),\n                    \"default_settings\": {\n                        \"outlier_threshold\": 3.0,",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "download_results",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def download_results():\n    \"\"\"분석 결과 다운로드\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # CSV 생성",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "sample_test",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def sample_test():\n    \"\"\"샘플 데이터 테스트\"\"\"\n    try:\n        test_type = request.form.get(\"test_type\", \"basic\")\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))\n        rt_tolerance = float(request.form.get(\"rt_tolerance\", 0.1))\n        # 샘플 데이터 생성\n        if test_type == \"basic\":",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)  # CORS 설정\n# 설정\napp.config.update(\n    MAX_CONTENT_LENGTH=50 * 1024 * 1024,  # 50MB 최대 파일 크기\n    UPLOAD_FOLDER=\"uploads\",\n    OUTPUT_FOLDER=\"outputs\",\n)\n# 디렉토리 생성\nos.makedirs(app.config[\"UPLOAD_FOLDER\"], exist_ok=True)",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "ganglioside_processor",
        "kind": 5,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "ganglioside_processor = GangliosideProcessor()\nvisualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\n@app.route(\"/\")\ndef index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "visualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\n@app.route(\"/\")\ndef index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "regression_analyzer",
        "kind": 5,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "regression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\n@app.route(\"/\")\ndef index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "scripts.utilities.app_refactored",
        "description": "scripts.utilities.app_refactored",
        "peekOfCode": "def create_app():\n    \"\"\"Flask application factory\"\"\"\n    # Flask app initialization\n    app = Flask(\n        __name__,\n        template_folder=\"backend/templates\",\n        static_folder=\"backend/static\"\n    )\n    CORS(app)  # CORS settings\n    # Configuration",
        "detail": "scripts.utilities.app_refactored",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.utilities.app_refactored",
        "description": "scripts.utilities.app_refactored",
        "peekOfCode": "def main():\n    \"\"\"Main execution function\"\"\"\n    app = create_app()\n    print(\"🚀 Starting Ganglioside Analyzer Flask server\")\n    print(\"🌐 Available at http://localhost:5001\")\n    try:\n        app.run(\n            host=\"0.0.0.0\",  # Listen on all interfaces\n            port=5001,       # Use port 5001 (5000 conflicts with AirPlay on macOS)\n            debug=True,      # Enable debug mode",
        "detail": "scripts.utilities.app_refactored",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "scripts.utilities.app_refactored_fixed",
        "description": "scripts.utilities.app_refactored_fixed",
        "peekOfCode": "def create_app() -> Flask:\n    \"\"\"\n    Application factory with dependency injection and improved error handling\n    \"\"\"\n    print(\"🔧 Initializing enhanced analysis services...\")\n    try:\n        # Initialize core services\n        analysis_service = AnalysisService()\n        visualization_service = VisualizationService()\n        print(\"✅ Enhanced services initialized successfully\")",
        "detail": "scripts.utilities.app_refactored_fixed",
        "documentation": {}
    },
    {
        "label": "test_all_endpoints",
        "kind": 2,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "def test_all_endpoints():\n    \"\"\"Test all web endpoints\"\"\"\n    print(\"🌐 Testing all web endpoints...\")\n    endpoints = [\n        (\"/\", \"Main page (working analyzer)\"),\n        (\"/working\", \"Working analyzer page\"),\n        (\"/simple\", \"Simple analyzer page\"),\n        (\"/integrated\", \"Integrated analyzer page\"),\n        (\"/diagnostic\", \"Diagnostic test page\"),\n        (\"/api/health\", \"Health API endpoint\")",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "test_full_analysis_workflow",
        "kind": 2,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "def test_full_analysis_workflow():\n    \"\"\"Test complete analysis workflow\"\"\"\n    print(\"\\n🧬 Testing complete analysis workflow...\")\n    # Step 1: Health check\n    print(\"1. Health check...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\")\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"   ✅ Server healthy: {data['status']}\")",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "test_functionality_summary",
        "kind": 2,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "def test_functionality_summary():\n    \"\"\"Test and report functionality summary\"\"\"\n    print(\"\\n📋 Functionality Summary:\")\n    features = [\n        (\"File upload\", \"✅ Working\"),\n        (\"Settings adjustment\", \"✅ Working\"),\n        (\"Analysis API\", \"✅ Working\"),\n        (\"Visualization API\", \"✅ Working\"),\n        (\"2D regression plots\", \"✅ Working\"),\n        (\"3D distribution plots\", \"✅ Working\"),",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "def main():\n    \"\"\"Run comprehensive tests\"\"\"\n    print(\"🧬 LC-MS-MS Analysis Platform - Comprehensive Test Suite\")\n    print(\"=\" * 60)\n    # Test 1: All web endpoints\n    test_all_endpoints()\n    # Test 2: Complete workflow\n    success = test_full_analysis_workflow()\n    # Test 3: Functionality summary\n    test_functionality_summary()",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "BASE_URL = \"http://localhost:5001\"\ndef test_all_endpoints():\n    \"\"\"Test all web endpoints\"\"\"\n    print(\"🌐 Testing all web endpoints...\")\n    endpoints = [\n        (\"/\", \"Main page (working analyzer)\"),\n        (\"/working\", \"Working analyzer page\"),\n        (\"/simple\", \"Simple analyzer page\"),\n        (\"/integrated\", \"Integrated analyzer page\"),\n        (\"/diagnostic\", \"Diagnostic test page\"),",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "create_working_regression_fix",
        "kind": 2,
        "importPath": "scripts.utilities.create_working_regression",
        "description": "scripts.utilities.create_working_regression",
        "peekOfCode": "def create_working_regression_fix():\n    print(\"🔧 Creating Working Regression Fix\")\n    print(\"=\" * 40)\n    # Read the test data to understand what we're working with\n    import pandas as pd\n    df = pd.read_csv(\"data/sample/testwork.csv\")\n    print(f\"📊 Test data: {len(df)} compounds\")\n    # Show the actual data\n    print(\"\\n📋 Compound Data:\")\n    for _, row in df.iterrows():",
        "detail": "scripts.utilities.create_working_regression",
        "documentation": {}
    },
    {
        "label": "debug_regression_structure",
        "kind": 2,
        "importPath": "scripts.utilities.debug_regression_structure",
        "description": "scripts.utilities.debug_regression_structure",
        "peekOfCode": "def debug_regression_structure():\n    print(\"🔍 DEBUGGING REGRESSION ANALYSIS STRUCTURE\")\n    print(\"=\" * 50)\n    base_url = \"http://localhost:5001\"\n    # Run analysis and examine detailed structure\n    print(\"1. Running analysis with detailed structure inspection...\")\n    try:\n        with open(\"data/sample/testwork.csv\", \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {",
        "detail": "scripts.utilities.debug_regression_structure",
        "documentation": {}
    },
    {
        "label": "debug_visualization",
        "kind": 2,
        "importPath": "scripts.utilities.debug_visualization_detailed",
        "description": "scripts.utilities.debug_visualization_detailed",
        "peekOfCode": "def debug_visualization():\n    print(\"🔍 DETAILED VISUALIZATION DIAGNOSIS\")\n    print(\"=\" * 50)\n    base_url = \"http://localhost:5001\"\n    # Step 1: Run analysis\n    print(\"1. Running analysis...\")\n    try:\n        with open(\"data/sample/testwork.csv\", \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {",
        "detail": "scripts.utilities.debug_visualization_detailed",
        "documentation": {}
    },
    {
        "label": "debug_visualization_structure",
        "kind": 2,
        "importPath": "scripts.utilities.debug_viz_structure",
        "description": "scripts.utilities.debug_viz_structure",
        "peekOfCode": "def debug_visualization_structure():\n    print(\"🔍 Debugging Visualization Data Structure\")\n    print(\"=\" * 50)\n    # Run analysis\n    with open(\"data/sample/testwork.csv\", \"rb\") as f:\n        files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n        data = {\n            \"data_type\": \"Porcine\",\n            \"outlier_threshold\": 2.5,\n            \"r2_threshold\": 0.75,",
        "detail": "scripts.utilities.debug_viz_structure",
        "documentation": {}
    },
    {
        "label": "quick_test",
        "kind": 2,
        "importPath": "scripts.utilities.quick_test_fix",
        "description": "scripts.utilities.quick_test_fix",
        "peekOfCode": "def quick_test():\n    print(\"🧬 Quick Test - Fixed Regression Analysis\")\n    print(\"=\" * 45)\n    # Load data\n    df = pd.read_csv(\"data/sample/testwork.csv\")\n    print(f\"📄 Loaded: {len(df)} compounds\")\n    # Test processor\n    processor = GangliosideProcessor()\n    print(\"🔍 Settings:\")\n    settings = processor.get_settings()",
        "detail": "scripts.utilities.quick_test_fix",
        "documentation": {}
    },
    {
        "label": "init_services",
        "kind": 2,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "def init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"NumPy/pandas 객체를 JSON 직렬화 가능한 형태로 변환\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "def convert_to_serializable(obj):\n    \"\"\"NumPy/pandas 객체를 JSON 직렬화 가능한 형태로 변환\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):\n        return float(obj)",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "def upload_csv():\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        if file.filename == \"\":\n            return jsonify({\"error\": \"파일이 선택되지 않았습니다.\"}), 400\n        if not file.filename.lower().endswith('.csv'):\n            return jsonify({\"error\": \"CSV 파일만 업로드 가능합니다.\"}), 400",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "analyze_data",
        "kind": 2,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "def analyze_data():\n    \"\"\"데이터 분석 실행\"\"\"\n    try:\n        # 파일 및 설정 가져오기\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"분석할 파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "sample_test",
        "kind": 2,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "def sample_test():\n    \"\"\"샘플 데이터 테스트\"\"\"\n    try:\n        # 요청에서 설정 가져오기\n        data = request.get_json()\n        if not data:\n            return jsonify({\"error\": \"JSON 데이터가 필요합니다.\"}), 400\n        data_type = data.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(data.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(data.get(\"r2_threshold\", 0.99))",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "download_results",
        "kind": 2,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "def download_results():\n    \"\"\"분석 결과 다운로드\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify({\"error\": \"분석 결과 데이터가 없습니다.\"}), 400\n        results = data[\"results\"]\n        # CSV 형태로 변환\n        output_data = []\n        # 유효한 화합물들",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "processor = None\nregression_analyzer = None\nvisualization_service = None\n# Blueprint 생성\nanalysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "regression_analyzer",
        "kind": 5,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "regression_analyzer = None\nvisualization_service = None\n# Blueprint 생성\nanalysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "visualization_service = None\n# Blueprint 생성\nanalysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service\ndef convert_to_serializable(obj):",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_bp",
        "kind": 5,
        "importPath": "src.api.routes.analysis",
        "description": "src.api.routes.analysis",
        "peekOfCode": "analysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"NumPy/pandas 객체를 JSON 직렬화 가능한 형태로 변환\"\"\"\n    if isinstance(obj, dict):",
        "detail": "src.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "src.api.routes.analysis_fixed",
        "description": "src.api.routes.analysis_fixed",
        "peekOfCode": "def convert_to_serializable(obj: Any) -> Any:\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):\n        return float(obj)",
        "detail": "src.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "analyze_data_enhanced",
        "kind": 2,
        "importPath": "src.api.routes.analysis_fixed",
        "description": "src.api.routes.analysis_fixed",
        "peekOfCode": "def analyze_data_enhanced():\n    \"\"\"\n    Enhanced data analysis with fixed regression algorithms\n    \"\"\"\n    try:\n        print(\"🚀 Enhanced analysis request received\")\n        # Validate request\n        if 'file' not in request.files:\n            return jsonify({\"error\": \"No file provided\"}), 400\n        file = request.files['file']",
        "detail": "src.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "upload_csv_enhanced",
        "kind": 2,
        "importPath": "src.api.routes.analysis_fixed",
        "description": "src.api.routes.analysis_fixed",
        "peekOfCode": "def upload_csv_enhanced():\n    \"\"\"Enhanced CSV upload with better validation\"\"\"\n    try:\n        if 'file' not in request.files:\n            return jsonify({\"error\": \"No file provided\"}), 400\n        file = request.files['file']\n        if file.filename == '' or not file.filename.endswith('.csv'):\n            return jsonify({\"error\": \"Invalid file. Please upload a CSV file.\"}), 400\n        # Read and validate CSV\n        try:",
        "detail": "src.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "analysis_settings",
        "kind": 2,
        "importPath": "src.api.routes.analysis_fixed",
        "description": "src.api.routes.analysis_fixed",
        "peekOfCode": "def analysis_settings():\n    \"\"\"Get or update analysis settings\"\"\"\n    try:\n        if request.method == \"GET\":\n            # Return current settings\n            current_settings = g.analysis_service.get_current_settings()\n            return jsonify({\n                \"status\": \"success\",\n                \"settings\": current_settings,\n                \"timestamp\": datetime.now().isoformat()",
        "detail": "src.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "export_results",
        "kind": 2,
        "importPath": "src.api.routes.analysis_fixed",
        "description": "src.api.routes.analysis_fixed",
        "peekOfCode": "def export_results(format: str):\n    \"\"\"Export analysis results in different formats\"\"\"\n    try:\n        # This would typically use stored results from a session or database\n        # For now, return a placeholder\n        if format not in ['csv', 'xlsx', 'json']:\n            return jsonify({\"error\": \"Unsupported format. Use: csv, xlsx, json\"}), 400\n        return jsonify({\n            \"message\": f\"Export in {format} format - Feature coming soon\",\n            \"available_formats\": [\"csv\", \"xlsx\", \"json\"],",
        "detail": "src.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "analysis_bp",
        "kind": 5,
        "importPath": "src.api.routes.analysis_fixed",
        "description": "src.api.routes.analysis_fixed",
        "peekOfCode": "analysis_bp = Blueprint('analysis', __name__)\ndef convert_to_serializable(obj: Any) -> Any:\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):",
        "detail": "src.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "get_data_processor",
        "kind": 2,
        "importPath": "src.api.routes.data_legacy",
        "description": "src.api.routes.data_legacy",
        "peekOfCode": "def get_data_processor():\n    return data_processor\ndef get_visualization_service():\n    return visualization_service\n@router.post(\"/upload\")\nasync def upload_csv(file: UploadFile = File(...)):\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if not file.filename.endswith(\".csv\"):\n            raise HTTPException(",
        "detail": "src.api.routes.data_legacy",
        "documentation": {}
    },
    {
        "label": "get_visualization_service",
        "kind": 2,
        "importPath": "src.api.routes.data_legacy",
        "description": "src.api.routes.data_legacy",
        "peekOfCode": "def get_visualization_service():\n    return visualization_service\n@router.post(\"/upload\")\nasync def upload_csv(file: UploadFile = File(...)):\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if not file.filename.endswith(\".csv\"):\n            raise HTTPException(\n                status_code=400, detail=\"CSV 파일만 업로드 가능합니다.\"\n            )",
        "detail": "src.api.routes.data_legacy",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.api.routes.data_legacy",
        "description": "src.api.routes.data_legacy",
        "peekOfCode": "router = APIRouter(prefix=\"/api\", tags=[\"data\"])\n# 서비스 인스턴스 초기화\ntry:\n    from backend.services.data_processor import GangliosideDataProcessor\n    from backend.services.visualization_service import VisualizationService\n    data_processor = GangliosideDataProcessor()\n    visualization_service = VisualizationService()\n    print(\"✅ 실제 분석 모듈 로드 성공\")\nexcept ImportError as e:\n    print(f\"⚠️ 분석 모듈 로드 실패: {e}\")",
        "detail": "src.api.routes.data_legacy",
        "documentation": {}
    },
    {
        "label": "init_processor_service",
        "kind": 2,
        "importPath": "src.api.routes.settings",
        "description": "src.api.routes.settings",
        "peekOfCode": "def init_processor_service(ganglioside_processor):\n    \"\"\"Initialize processor service instance\"\"\"\n    global processor\n    processor = ganglioside_processor\n@settings_bp.route(\"/settings\", methods=[\"GET\", \"POST\"])\ndef manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"\n    try:\n        if request.method == \"GET\":\n            # Return current settings",
        "detail": "src.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "manage_settings",
        "kind": 2,
        "importPath": "src.api.routes.settings",
        "description": "src.api.routes.settings",
        "peekOfCode": "def manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"\n    try:\n        if request.method == \"GET\":\n            # Return current settings\n            current_settings = processor.get_settings()\n            return jsonify({\n                \"message\": \"Current settings retrieved\",\n                \"settings\": current_settings,\n                \"timestamp\": datetime.now().isoformat()",
        "detail": "src.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "src.api.routes.settings",
        "description": "src.api.routes.settings",
        "peekOfCode": "def health_check():\n    \"\"\"Health check endpoint for service status\"\"\"\n    try:\n        # Check if processor is available and working\n        if processor is None:\n            return jsonify({\n                \"status\": \"unhealthy\",\n                \"error\": \"Processor service not initialized\"\n            }), 503\n        # Get current settings as a basic health check",
        "detail": "src.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "src.api.routes.settings",
        "description": "src.api.routes.settings",
        "peekOfCode": "processor = None\n# Blueprint creation\nsettings_bp = Blueprint('settings', __name__, url_prefix='/api')\ndef init_processor_service(ganglioside_processor):\n    \"\"\"Initialize processor service instance\"\"\"\n    global processor\n    processor = ganglioside_processor\n@settings_bp.route(\"/settings\", methods=[\"GET\", \"POST\"])\ndef manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"",
        "detail": "src.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "settings_bp",
        "kind": 5,
        "importPath": "src.api.routes.settings",
        "description": "src.api.routes.settings",
        "peekOfCode": "settings_bp = Blueprint('settings', __name__, url_prefix='/api')\ndef init_processor_service(ganglioside_processor):\n    \"\"\"Initialize processor service instance\"\"\"\n    global processor\n    processor = ganglioside_processor\n@settings_bp.route(\"/settings\", methods=[\"GET\", \"POST\"])\ndef manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"\n    try:\n        if request.method == \"GET\":",
        "detail": "src.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "init_visualization_service",
        "kind": 2,
        "importPath": "src.api.routes.visualization",
        "description": "src.api.routes.visualization",
        "peekOfCode": "def init_visualization_service(vis_service):\n    \"\"\"Initialize visualization service instance\"\"\"\n    global visualization_service\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]",
        "detail": "src.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "src.api.routes.visualization",
        "description": "src.api.routes.visualization",
        "peekOfCode": "def convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):\n        return float(obj)",
        "detail": "src.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "create_visualizations",
        "kind": 2,
        "importPath": "src.api.routes.visualization",
        "description": "src.api.routes.visualization",
        "peekOfCode": "def create_visualizations():\n    \"\"\"Create all visualizations from analysis results\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify({\"error\": \"Analysis results data is required.\"}), 400\n        results = data[\"results\"]\n        # Generate all visualizations\n        plots = visualization_service.create_all_plots(results)\n        return jsonify({",
        "detail": "src.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "create_3d_visualization",
        "kind": 2,
        "importPath": "src.api.routes.visualization",
        "description": "src.api.routes.visualization",
        "peekOfCode": "def create_3d_visualization():\n    \"\"\"Dedicated endpoint for 3D distribution visualization\"\"\"\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({\"error\": \"Request data is required.\"}), 400\n        # Check for file data\n        if \"file_data\" in data:\n            # Process CSV data directly\n            df = pd.DataFrame(data[\"file_data\"])",
        "detail": "src.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "src.api.routes.visualization",
        "description": "src.api.routes.visualization",
        "peekOfCode": "visualization_service = None\n# Blueprint creation\nvisualization_bp = Blueprint('visualization', __name__, url_prefix='/api')\ndef init_visualization_service(vis_service):\n    \"\"\"Initialize visualization service instance\"\"\"\n    global visualization_service\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):",
        "detail": "src.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "visualization_bp",
        "kind": 5,
        "importPath": "src.api.routes.visualization",
        "description": "src.api.routes.visualization",
        "peekOfCode": "visualization_bp = Blueprint('visualization', __name__, url_prefix='/api')\ndef init_visualization_service(vis_service):\n    \"\"\"Initialize visualization service instance\"\"\"\n    global visualization_service\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):",
        "detail": "src.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "src.api.routes.web",
        "description": "src.api.routes.web",
        "peekOfCode": "def index():\n    \"\"\"Main page - Working analyzer\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving working analyzer: {str(e)}\")\n        return f\"Error loading working analyzer: {str(e)}\", 500",
        "detail": "src.api.routes.web",
        "documentation": {}
    },
    {
        "label": "interactive_analyzer",
        "kind": 2,
        "importPath": "src.api.routes.web",
        "description": "src.api.routes.web",
        "peekOfCode": "def interactive_analyzer():\n    \"\"\"Interactive analyzer page\"\"\"\n    try:\n        return render_template(\"interactive_analyzer.html\")\n    except Exception as e:\n        print(f\"Template error for interactive: {str(e)}\")\n        return f\"Template rendering error: {str(e)}\", 500\n@web_bp.route(\"/legacy\")\ndef simple_analyzer():\n    \"\"\"Simple analyzer page (legacy)\"\"\"",
        "detail": "src.api.routes.web",
        "documentation": {}
    },
    {
        "label": "simple_analyzer",
        "kind": 2,
        "importPath": "src.api.routes.web",
        "description": "src.api.routes.web",
        "peekOfCode": "def simple_analyzer():\n    \"\"\"Simple analyzer page (legacy)\"\"\"\n    try:\n        return render_template(\"analyzer.html\")\n    except Exception as e:\n        print(f\"Template error for legacy: {str(e)}\")\n        return f\"Template rendering error: {str(e)}\", 500\n@web_bp.route(\"/integrated\")\ndef integrated_view():\n    \"\"\"Integrated visualization page - combined 2D and 3D displays\"\"\"",
        "detail": "src.api.routes.web",
        "documentation": {}
    },
    {
        "label": "integrated_view",
        "kind": 2,
        "importPath": "src.api.routes.web",
        "description": "src.api.routes.web",
        "peekOfCode": "def integrated_view():\n    \"\"\"Integrated visualization page - combined 2D and 3D displays\"\"\"\n    try:\n        with open(\"integrated_visualization_english.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Integrated visualization file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving integrated view: {str(e)}\")\n        return f\"Error loading integrated view: {str(e)}\", 500",
        "detail": "src.api.routes.web",
        "documentation": {}
    },
    {
        "label": "diagnostic_test",
        "kind": 2,
        "importPath": "src.api.routes.web",
        "description": "src.api.routes.web",
        "peekOfCode": "def diagnostic_test():\n    \"\"\"Diagnostic test page for JavaScript debugging\"\"\"\n    try:\n        with open(\"diagnostic_test.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Diagnostic test file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving diagnostic test: {str(e)}\")\n        return f\"Error loading diagnostic test: {str(e)}\", 500",
        "detail": "src.api.routes.web",
        "documentation": {}
    },
    {
        "label": "simple_analyzer_working",
        "kind": 2,
        "importPath": "src.api.routes.web",
        "description": "src.api.routes.web",
        "peekOfCode": "def simple_analyzer_working():\n    \"\"\"Simple working analyzer page\"\"\"\n    try:\n        with open(\"simple_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Simple analyzer file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving simple analyzer: {str(e)}\")\n        return f\"Error loading simple analyzer: {str(e)}\", 500",
        "detail": "src.api.routes.web",
        "documentation": {}
    },
    {
        "label": "working_analyzer",
        "kind": 2,
        "importPath": "src.api.routes.web",
        "description": "src.api.routes.web",
        "peekOfCode": "def working_analyzer():\n    \"\"\"Working analyzer with integrated features\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving working analyzer: {str(e)}\")\n        return f\"Error loading working analyzer: {str(e)}\", 500",
        "detail": "src.api.routes.web",
        "documentation": {}
    },
    {
        "label": "web_bp",
        "kind": 5,
        "importPath": "src.api.routes.web",
        "description": "src.api.routes.web",
        "peekOfCode": "web_bp = Blueprint('web', __name__)\n@web_bp.route(\"/\")\ndef index():\n    \"\"\"Main page - Working analyzer\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n    except Exception as e:",
        "detail": "src.api.routes.web",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "src.config.config",
        "description": "src.config.config",
        "peekOfCode": "class Settings(BaseModel):\n    \"\"\"애플리케이션 설정\"\"\"\n    # Database\n    database_url: str = \"postgresql://postgres:password@localhost:5432/ganglioside_db\"\n    # Redis\n    redis_url: str = \"redis://localhost:6379\"\n    # Application\n    secret_key: str = \"your-secret-key-here\"\n    debug: bool = True\n    # File Upload",
        "detail": "src.config.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "src.config.config",
        "description": "src.config.config",
        "peekOfCode": "settings = Settings()\n# 디렉토리 생성\nos.makedirs(settings.upload_dir, exist_ok=True)\nos.makedirs(settings.output_dir, exist_ok=True)",
        "detail": "src.config.config",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "kind": 6,
        "importPath": "src.core.analysis_service",
        "description": "src.core.analysis_service",
        "peekOfCode": "class AnalysisService:\n    \"\"\"\n    Central analysis service that orchestrates all analysis components\n    \"\"\"\n    def __init__(self):\n        \"\"\"Initialize all analysis components\"\"\"\n        self.ganglioside_processor = GangliosideProcessorFixed()\n        self.regression_analyzer = RegressionAnalyzer()\n        self.visualization_service = VisualizationService()\n        print(\"🚀 Analysis Service 초기화 완료\")",
        "detail": "src.core.analysis_service",
        "documentation": {}
    },
    {
        "label": "DummyGangliosideDataProcessor",
        "kind": 6,
        "importPath": "src.services.dummy.processors_backup",
        "description": "src.services.dummy.processors_backup",
        "peekOfCode": "class DummyGangliosideDataProcessor:\n    \"\"\"더미 데이터 프로세서 - 실제 분석 로직 시뮬레이션\"\"\"\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.rt_tolerance = 0.1\n        print(\"🧪 Dummy Ganglioside Data Processor 초기화\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None\n    ):",
        "detail": "src.services.dummy.processors_backup",
        "documentation": {}
    },
    {
        "label": "DummyVisualizationService",
        "kind": 6,
        "importPath": "src.services.dummy.processors_backup",
        "description": "src.services.dummy.processors_backup",
        "peekOfCode": "class DummyVisualizationService:\n    \"\"\"더미 시각화 서비스\"\"\"\n    def __init__(self):\n        print(\"📊 Dummy Visualization Service 초기화\")\n    def create_all_plots(self, results: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"더미 시각화 생성\"\"\"\n        return {\n            \"message\": \"더미 시각화 기능 준비 중\",\n            \"available_plots\": [\n                \"regression_plots\",",
        "detail": "src.services.dummy.processors_backup",
        "documentation": {}
    },
    {
        "label": "DummyGangliosideDataProcessor",
        "kind": 6,
        "importPath": "src.services.dummy.processors_new",
        "description": "src.services.dummy.processors_new",
        "peekOfCode": "class DummyGangliosideDataProcessor:\n    \"\"\"개선된 Ganglioside 분석 더미 클래스 (위음성 감소)\"\"\"\n    def __init__(self):\n        # 기본 설정값 (더 관대한 기준으로 설정)\n        self.outlier_threshold = 2.0  # 표준화 잔차 임계값 (기본값 더 관대하게)\n        self.r2_threshold = 0.90  # R² 임계값 (기본값 더 낮게)\n        self.rt_tolerance = 0.3  # RT 허용 오차 (기본값 더 크게)\n        print(\"🧪 Dummy Ganglioside Data Processor 초기화 (개선된 버전)\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None",
        "detail": "src.services.dummy.processors_new",
        "documentation": {}
    },
    {
        "label": "DummyVisualizationService",
        "kind": 6,
        "importPath": "src.services.dummy.processors_new",
        "description": "src.services.dummy.processors_new",
        "peekOfCode": "class DummyVisualizationService:\n    \"\"\"더미 시각화 서비스 (변경사항 없음)\"\"\"\n    def __init__(self):\n        print(\"📊 Dummy Visualization Service 초기화\")\n    def create_dashboard(self, results: Dict[str, Any]) -> str:\n        return \"<div>더미 시각화 대시보드</div>\"\nclass DummyRegressionAnalyzer:\n    \"\"\"더미 회귀분석기 (변경사항 없음)\"\"\"\n    def __init__(self):\n        print(\"🔬 Dummy Regression Analyzer 초기화\")",
        "detail": "src.services.dummy.processors_new",
        "documentation": {}
    },
    {
        "label": "DummyRegressionAnalyzer",
        "kind": 6,
        "importPath": "src.services.dummy.processors_new",
        "description": "src.services.dummy.processors_new",
        "peekOfCode": "class DummyRegressionAnalyzer:\n    \"\"\"더미 회귀분석기 (변경사항 없음)\"\"\"\n    def __init__(self):\n        print(\"🔬 Dummy Regression Analyzer 초기화\")\n    def analyze_regression(self, data: pd.DataFrame) -> Dict[str, Any]:\n        return {\"r2\": 0.95, \"slope\": -0.5, \"intercept\": 8.0}",
        "detail": "src.services.dummy.processors_new",
        "documentation": {}
    },
    {
        "label": "GangliosideDataProcessor",
        "kind": 6,
        "importPath": "src.services.data_processor",
        "description": "src.services.data_processor",
        "peekOfCode": "class GangliosideDataProcessor:\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.rt_tolerance = 0.1\n        print(\"🔬 Ganglioside Data Processor 초기화 완료\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None\n    ):\n        \"\"\"분석 설정 업데이트\"\"\"",
        "detail": "src.services.data_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "kind": 6,
        "importPath": "src.services.ganglioside_processor",
        "description": "src.services.ganglioside_processor",
        "peekOfCode": "class GangliosideProcessor:\n    def __init__(self):\n        # Fixed thresholds for realistic chemical data analysis\n        self.r2_threshold = 0.75  # Lowered from 0.99 to realistic value\n        self.outlier_threshold = 2.5  # Lowered from 3.0 for better sensitivity\n        self.rt_tolerance = 0.1\n        # Initialize categorizer\n        self.categorizer = GangliosideCategorizer()\n        print(\"🧬 Ganglioside Processor 초기화 완료 (Fixed Version with Categorization)\")\n    def update_settings(",
        "detail": "src.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorFixed",
        "kind": 6,
        "importPath": "src.services.ganglioside_processor_fixed",
        "description": "src.services.ganglioside_processor_fixed",
        "peekOfCode": "class GangliosideProcessorFixed:\n    \"\"\"\n    Fixed Ganglioside Processor with improved regression analysis\n    \"\"\"\n    def __init__(self):\n        # Realistic thresholds for chemical analysis\n        self.r2_threshold = 0.75  # Lowered from 0.99 to realistic value\n        self.outlier_threshold = 2.5  # Lowered from 3.0 for better sensitivity\n        self.rt_tolerance = 0.1\n        self.min_compounds_for_regression = 2",
        "detail": "src.services.ganglioside_processor_fixed",
        "documentation": {}
    },
    {
        "label": "RegressionAnalyzer",
        "kind": 6,
        "importPath": "src.services.regression_analyzer",
        "description": "src.services.regression_analyzer",
        "peekOfCode": "class RegressionAnalyzer:\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.confidence_level = 0.95\n        print(\"📈 Regression Analyzer 초기화 완료\")\n    def perform_comprehensive_regression(\n        self, x_data: np.ndarray, y_data: np.ndarray, compound_names: List[str] = None\n    ) -> Dict[str, Any]:\n        \"\"\"",
        "detail": "src.services.regression_analyzer",
        "documentation": {}
    },
    {
        "label": "VisualizationService",
        "kind": 6,
        "importPath": "src.services.visualization_service",
        "description": "src.services.visualization_service",
        "peekOfCode": "class VisualizationService:\n    def __init__(self):\n        self.color_palette = {\n            \"valid\": \"#2ecc71\",  # Green\n            \"outlier\": \"#e74c3c\",  # Red\n            \"anchor\": \"#3498db\",  # Blue\n            \"regression\": \"#9b59b6\",  # Purple\n            \"background\": \"#ecf0f1\",  # Light gray\n            \"grid\": \"#bdc3c7\",  # Gray\n        }",
        "detail": "src.services.visualization_service",
        "documentation": {}
    },
    {
        "label": "CompoundData",
        "kind": 6,
        "importPath": "src.utils.data_structures",
        "description": "src.utils.data_structures",
        "peekOfCode": "class CompoundData:\n    \"\"\"Single compound data structure\"\"\"\n    name: str\n    rt: float  # Retention Time\n    volume: float\n    log_p: float  # Partition Coefficient (Log P)\n    anchor: str  # 'T' or 'F'\n    # Derived properties\n    prefix: Optional[str] = None\n    suffix: Optional[str] = None",
        "detail": "src.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "VisualizationData",
        "kind": 6,
        "importPath": "src.utils.data_structures",
        "description": "src.utils.data_structures",
        "peekOfCode": "class VisualizationData:\n    \"\"\"3D visualization data structure\"\"\"\n    x_data: List[float]  # Mass-to-charge ratio (m/z)\n    y_data: List[float]  # Retention Time\n    z_data: List[float]  # Partition Coefficient (Log P)\n    # Additional properties\n    labels: List[str]\n    colors: List[str]\n    sizes: List[float]\n    anchor_mask: List[bool]",
        "detail": "src.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "RegressionResult",
        "kind": 6,
        "importPath": "src.utils.data_structures",
        "description": "src.utils.data_structures",
        "peekOfCode": "class RegressionResult:\n    \"\"\"Regression analysis result\"\"\"\n    prefix: str\n    slope: float\n    intercept: float\n    r2: float\n    n_samples: int\n    equation: str\n    p_value: float\n    def predict(self, log_p_values: np.ndarray) -> np.ndarray:",
        "detail": "src.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "AnalysisResults",
        "kind": 6,
        "importPath": "src.utils.data_structures",
        "description": "src.utils.data_structures",
        "peekOfCode": "class AnalysisResults:\n    \"\"\"Complete analysis results structure\"\"\"\n    valid_compounds: List[CompoundData]\n    outliers: List[CompoundData]\n    regression_results: Dict[str, RegressionResult]\n    statistics: Dict[str, Any]\n    # Additional analysis data\n    sugar_analysis: Dict[str, Any]\n    oacetylation_analysis: Dict[str, Any]\n    detailed_analysis: Dict[str, Any]",
        "detail": "src.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "calculate_mass_to_charge",
        "kind": 2,
        "importPath": "src.utils.data_structures",
        "description": "src.utils.data_structures",
        "peekOfCode": "def calculate_mass_to_charge(compound_name: str, base_mass: Optional[float] = None) -> float:\n    \"\"\"\n    Calculate mass-to-charge ratio from compound name\n    Args:\n        compound_name: Compound name like \"GD1a(36:1;O2)\"\n        base_mass: Optional base mass for the ganglioside class\n    Returns:\n        Estimated m/z ratio\n    \"\"\"\n    import re",
        "detail": "src.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "kind": 6,
        "importPath": "src.utils.ganglioside_categorizer",
        "description": "src.utils.ganglioside_categorizer",
        "peekOfCode": "class GangliosideCategorizer:\n    \"\"\"\n    Categorizes gangliosides based on their prefix patterns for better visualization grouping.\n    Examples:\n    - GD1(34:1;O2) → Base: GD1, Category: GD (disialo)\n    - GD1+dHex(36:1;O2) → Base: GD1, Category: GD (disialo), Modified: dHex\n    - GM3+OAc(18:1;O2) → Base: GM3, Category: GM (monosialo), Modified: OAc\n    \"\"\"\n    def __init__(self):\n        # Define ganglioside categories based on sialic acid content",
        "detail": "src.utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "test_categorizer",
        "kind": 2,
        "importPath": "src.utils.ganglioside_categorizer",
        "description": "src.utils.ganglioside_categorizer",
        "peekOfCode": "def test_categorizer():\n    \"\"\"Test function for the categorizer\"\"\"\n    import pandas as pd\n    # Sample data\n    test_data = {\n        'Name': [\n            'GD1(34:1;O2)',\n            'GD1+dHex(36:1;O2)',\n            'GM3+OAc(18:1;O2)',\n            'GT1(40:1;O2)',",
        "detail": "src.utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "test_analysis_api",
        "kind": 2,
        "importPath": "tests.integration.test_api_fix",
        "description": "tests.integration.test_api_fix",
        "peekOfCode": "def test_analysis_api():\n    print(\"🧪 Testing Fixed Analysis API\")\n    print(\"=\" * 30)\n    # Test health\n    print(\"1. Health check...\")\n    health = requests.get(\"http://localhost:5001/api/health\")\n    print(f\"   Status: {health.status_code}\")\n    # Test analysis with real file\n    print(\"2. Analysis test...\")\n    with open(\"data/sample/testwork.csv\", \"rb\") as f:",
        "detail": "tests.integration.test_api_fix",
        "documentation": {}
    },
    {
        "label": "test_with_real_data",
        "kind": 2,
        "importPath": "tests.integration.test_categorizer_real_data",
        "description": "tests.integration.test_categorizer_real_data",
        "peekOfCode": "def test_with_real_data():\n    print(\"🧪 TESTING CATEGORIZER WITH REAL USER DATA\")\n    print(\"=\" * 60)\n    # Load user data\n    try:\n        df = pd.read_csv('testwork_user.csv')\n        print(f\"📁 Loaded {len(df)} compounds from testwork_user.csv\")\n    except Exception as e:\n        print(f\"❌ Failed to load data: {e}\")\n        return",
        "detail": "tests.integration.test_categorizer_real_data",
        "documentation": {}
    },
    {
        "label": "test_complete_pipeline",
        "kind": 2,
        "importPath": "tests.integration.test_complete_pipeline",
        "description": "tests.integration.test_complete_pipeline",
        "peekOfCode": "def test_complete_pipeline():\n    print(\"🎯 Testing Complete Analysis & Visualization Pipeline\")\n    print(\"=\" * 55)\n    # Use the running server on port 5001\n    base_url = \"http://localhost:5001\"\n    # Step 1: Test health\n    print(\"1. Health check...\")\n    try:\n        health = requests.get(f\"{base_url}/api/health\")\n        print(f\"   Status: {health.status_code}\")",
        "detail": "tests.integration.test_complete_pipeline",
        "documentation": {}
    },
    {
        "label": "test_direct_integration",
        "kind": 2,
        "importPath": "tests.integration.test_direct_integration",
        "description": "tests.integration.test_direct_integration",
        "peekOfCode": "def test_direct_integration():\n    print(\"🧪 DIRECT CATEGORIZATION INTEGRATION TEST\")\n    print(\"=\" * 50)\n    # Load test data\n    df = pd.read_csv('../../data/samples/testwork_user.csv')\n    print(f\"📁 Loaded {len(df)} compounds\")\n    # Create processor\n    processor = GangliosideProcessor()\n    print(\"✅ Processor created\")\n    # Test categorization method directly",
        "detail": "tests.integration.test_direct_integration",
        "documentation": {}
    },
    {
        "label": "test_full_analysis",
        "kind": 2,
        "importPath": "tests.integration.test_direct_integration",
        "description": "tests.integration.test_direct_integration",
        "peekOfCode": "def test_full_analysis():\n    print(\"\\n🔬 FULL ANALYSIS WITH CATEGORIZATION TEST\")\n    print(\"=\" * 50)\n    # Load test data\n    df = pd.read_csv('../../data/samples/testwork_user.csv')\n    # Create processor and run full analysis\n    processor = GangliosideProcessor()\n    try:\n        results = processor.process_data(df, \"Porcine\")\n        print(\"✅ Full analysis completed\")",
        "detail": "tests.integration.test_direct_integration",
        "documentation": {}
    },
    {
        "label": "test_fixed_processor",
        "kind": 2,
        "importPath": "tests.integration.test_fixed_regression",
        "description": "tests.integration.test_fixed_regression",
        "peekOfCode": "def test_fixed_processor():\n    \"\"\"Test the fixed processor with sample data\"\"\"\n    print(\"🧬 Testing Fixed Ganglioside Processor\")\n    print(\"=\" * 50)\n    # Initialize fixed processor\n    processor = GangliosideProcessorFixed()\n    # Load sample data\n    try:\n        df = pd.read_csv(\"data/sample/testwork.csv\")\n        print(f\"📄 Loaded sample data: {len(df)} compounds\")",
        "detail": "tests.integration.test_fixed_regression",
        "documentation": {}
    },
    {
        "label": "test_analysis_service",
        "kind": 2,
        "importPath": "tests.integration.test_fixed_regression",
        "description": "tests.integration.test_fixed_regression",
        "peekOfCode": "def test_analysis_service():\n    \"\"\"Test the enhanced analysis service\"\"\"\n    print(\"\\n🚀 Testing Enhanced Analysis Service\")\n    print(\"=\" * 50)\n    try:\n        # Initialize analysis service\n        analysis_service = AnalysisService()\n        # Load sample data\n        df = pd.read_csv(\"data/sample/testwork.csv\")\n        # Test comprehensive analysis",
        "detail": "tests.integration.test_fixed_regression",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_fixed_regression",
        "description": "tests.integration.test_fixed_regression",
        "peekOfCode": "def main():\n    \"\"\"Main test runner\"\"\"\n    print(\"🧬 LC-MS-MS Fixed Regression Analysis Test\")\n    print(\"Testing improved algorithms and realistic thresholds\")\n    print(\"=\" * 60)\n    success_count = 0\n    # Test 1: Fixed processor\n    if test_fixed_processor():\n        success_count += 1\n    # Test 2: Analysis service",
        "detail": "tests.integration.test_fixed_regression",
        "documentation": {}
    },
    {
        "label": "test_health",
        "kind": 2,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "def test_health():\n    \"\"\"Test health endpoint\"\"\"\n    print(\"🔌 Testing health endpoint...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\")\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"✅ Health check passed: {data['status']}\")\n            return True\n        else:",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "test_analysis",
        "kind": 2,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "def test_analysis():\n    \"\"\"Test analysis endpoint with sample file\"\"\"\n    print(\"🚀 Testing analysis endpoint...\")\n    try:\n        # Read sample CSV file\n        with open(\"data/sample/testwork.csv\", \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {\n                \"data_type\": \"Porcine\",\n                \"outlier_threshold\": 3.0,",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "test_visualization",
        "kind": 2,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "def test_visualization(results):\n    \"\"\"Test visualization endpoint\"\"\"\n    print(\"📊 Testing visualization endpoint...\")\n    try:\n        payload = {\"results\": results}\n        response = requests.post(\n            f\"{BASE_URL}/api/visualize\",\n            headers={\"Content-Type\": \"application/json\"},\n            data=json.dumps(payload)\n        )",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "def main():\n    \"\"\"Run all tests\"\"\"\n    print(\"🧬 Starting LC-MS-MS API functionality tests...\\n\")\n    # Test 1: Health check\n    if not test_health():\n        print(\"\\n❌ Health check failed - aborting tests\")\n        sys.exit(1)\n    print()\n    # Test 2: Analysis\n    results = test_analysis()",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "BASE_URL = \"http://localhost:5001\"\ndef test_health():\n    \"\"\"Test health endpoint\"\"\"\n    print(\"🔌 Testing health endpoint...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\")\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"✅ Health check passed: {data['status']}\")\n            return True",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "test_integrated_categorization",
        "kind": 2,
        "importPath": "tests.integration.test_integrated_categorization",
        "description": "tests.integration.test_integrated_categorization",
        "peekOfCode": "def test_integrated_categorization():\n    print(\"🧪 TESTING INTEGRATED CATEGORIZATION SYSTEM\")\n    print(\"=\" * 60)\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    # Step 1: Load and analyze the data\n    print(\"1. 📊 Loading test data...\")\n    try:\n        df = pd.read_csv(test_file)\n        print(f\"   📁 Loaded {len(df)} compounds\")",
        "detail": "tests.integration.test_integrated_categorization",
        "documentation": {}
    },
    {
        "label": "test_visualization_with_categorization",
        "kind": 2,
        "importPath": "tests.integration.test_integrated_categorization",
        "description": "tests.integration.test_integrated_categorization",
        "peekOfCode": "def test_visualization_with_categorization():\n    \"\"\"Test if visualization can access categorization data\"\"\"\n    print(\"\\n3. 📊 Testing visualization with categorization data...\")\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    try:\n        # Run analysis first\n        with open(test_file, \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {",
        "detail": "tests.integration.test_integrated_categorization",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_integrated_categorization",
        "description": "tests.integration.test_integrated_categorization",
        "peekOfCode": "def main():\n    print(\"🔬 INTEGRATED CATEGORIZATION SYSTEM TEST\")\n    print(\"Testing the complete pipeline with categorization\")\n    print()\n    # Test 1: Basic categorization integration\n    cat_success = test_integrated_categorization()\n    # Test 2: Visualization compatibility\n    viz_success = test_visualization_with_categorization()\n    # Final result\n    print(\"\\n\" + \"=\" * 60)",
        "detail": "tests.integration.test_integrated_categorization",
        "documentation": {}
    },
    {
        "label": "test_complete_workflow",
        "kind": 2,
        "importPath": "tests.integration.test_tabs_functionality",
        "description": "tests.integration.test_tabs_functionality",
        "peekOfCode": "def test_complete_workflow():\n    print(\"🧪 TESTING COMPLETE TAB FUNCTIONALITY\")\n    print(\"=\" * 60)\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    # Step 1: Run the analysis\n    print(\"1. 🚀 Running analysis...\")\n    try:\n        with open(test_file, \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}",
        "detail": "tests.integration.test_tabs_functionality",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_tabs_functionality",
        "description": "tests.integration.test_tabs_functionality",
        "peekOfCode": "def main():\n    print(\"🔧 TAB FUNCTIONALITY TEST\")\n    print(\"This test verifies the backend generates proper visualizations\")\n    print(\"Manual steps required:\")\n    print(\"1. Open http://localhost:5001/working in your browser\")\n    print(\"2. Upload testwork_user.csv\")\n    print(\"3. Click 'Start Analysis'\")\n    print(\"4. Click 'Generate Visualizations'\")\n    print(\"5. Test switching between tabs:\")\n    print(\"   - Combined View (should work)\")",
        "detail": "tests.integration.test_tabs_functionality",
        "documentation": {}
    },
    {
        "label": "test_user_data_complete",
        "kind": 2,
        "importPath": "tests.integration.test_user_data_complete",
        "description": "tests.integration.test_user_data_complete",
        "peekOfCode": "def test_user_data_complete():\n    print(\"🧪 COMPREHENSIVE TEST - USER'S ACTUAL DATA\")\n    print(\"=\" * 60)\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    # Step 1: Analyze the data first\n    print(\"1. 📊 Analyzing user's test data...\")\n    try:\n        df = pd.read_csv(test_file)\n        total_compounds = len(df)",
        "detail": "tests.integration.test_user_data_complete",
        "documentation": {}
    },
    {
        "label": "test_visualization_strict",
        "kind": 2,
        "importPath": "tests.integration.test_user_data_complete",
        "description": "tests.integration.test_user_data_complete",
        "peekOfCode": "def test_visualization_strict(analysis_result):\n    \"\"\"Strict test of visualization with user's data\"\"\"\n    print(\"\\n4. 📊 STRICT VISUALIZATION TEST\")\n    print(\"-\" * 40)\n    base_url = \"http://localhost:5001\"\n    try:\n        # Extract analysis results for visualization\n        analysis_data = analysis_result['results']\n        viz_payload = {\"results\": analysis_data}\n        viz_response = requests.post(",
        "detail": "tests.integration.test_user_data_complete",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_user_data_complete",
        "description": "tests.integration.test_user_data_complete",
        "peekOfCode": "def main():\n    print(\"🚀 STARTING COMPREHENSIVE VISUALIZATION TEST\")\n    print(\"📁 Using user's actual file: testwork_user.csv\")\n    print(\"🎯 Testing complete pipeline with REAL DATA\")\n    # Run analysis\n    analysis_result = test_user_data_complete()\n    if not analysis_result:\n        print(\"\\n❌ ANALYSIS FAILED - Cannot continue to visualization test\")\n        return False\n    # Run strict visualization test",
        "detail": "tests.integration.test_user_data_complete",
        "documentation": {}
    },
    {
        "label": "test_visualization",
        "kind": 2,
        "importPath": "tests.integration.test_visualization",
        "description": "tests.integration.test_visualization",
        "peekOfCode": "def test_visualization():\n    print(\"📊 Testing Visualization Pipeline\")\n    print(\"=\" * 40)\n    # Step 1: Run analysis to get results\n    print(\"1. Running analysis...\")\n    with open(\"data/sample/testwork.csv\", \"rb\") as f:\n        files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n        data = {\n            \"data_type\": \"Porcine\",\n            \"outlier_threshold\": 2.5,",
        "detail": "tests.integration.test_visualization",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def convert_to_serializable(obj):\n    \"\"\"Convert numpy types to JSON serializable types recursively\"\"\"\n    if obj is None:\n        return None\n    elif isinstance(obj, dict):\n        return {key: convert_to_serializable(value) for key, value in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "interactive_analyzer",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/integrated\")\ndef integrated_view():\n    \"\"\"통합 시각화 페이지 - 2D와 3D를 함께 표시\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "simple_analyzer",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/integrated\")\ndef integrated_view():\n    \"\"\"통합 시각화 페이지 - 2D와 3D를 함께 표시\"\"\"\n    try:\n        with open(\"integrated_visualization.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "integrated_view",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def integrated_view():\n    \"\"\"통합 시각화 페이지 - 2D와 3D를 함께 표시\"\"\"\n    try:\n        with open(\"integrated_visualization.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"통합 시각화 파일을 찾을 수 없습니다.\", 404\n@app.route(\"/working\")\ndef working_analyzer():\n    \"\"\"Working analyzer with fixed visualization\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "working_analyzer",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def working_analyzer():\n    \"\"\"Working analyzer with fixed visualization\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n@app.route(\"/stepwise\")\ndef stepwise_analyzer_page():\n    \"\"\"Stepwise analyzer with rule-by-rule control\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_analyzer_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stepwise_analyzer_page():\n    \"\"\"Stepwise analyzer with rule-by-rule control\"\"\"\n    try:\n        with open(\"stepwise_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Stepwise analyzer file not found.\", 404\n@app.route(\"/api/health\")\ndef health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"\n    return jsonify(\n        {\n            \"status\": \"healthy\",\n            \"service\": \"ganglioside-analyzer-flask\",\n            \"version\": \"2.0.0\",\n            \"timestamp\": datetime.now().isoformat(),\n        }\n    )",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def upload_csv():\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        if file.filename == \"\":\n            return jsonify({\"error\": \"파일명이 없습니다.\"}), 400\n        if not file.filename.endswith(\".csv\"):\n            return jsonify(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "analyze_data",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def analyze_data():\n    \"\"\"데이터 분석 실행\"\"\"\n    try:\n        # 파일 및 설정 가져오기\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"분석할 파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_visualizations",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_visualizations():\n    \"\"\"시각화 생성\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # 시각화 생성",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_3d_visualization",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_3d_visualization():\n    \"\"\"3D 분포 시각화 전용 엔드포인트\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # 3D 시각화만 생성",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "manage_settings",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def manage_settings():\n    \"\"\"설정 관리\"\"\"\n    try:\n        if request.method == \"GET\":\n            # 현재 설정 반환\n            return jsonify(\n                {\n                    \"current_settings\": ganglioside_processor.get_settings(),\n                    \"default_settings\": {\n                        \"outlier_threshold\": 3.0,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "download_results",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def download_results():\n    \"\"\"분석 결과 다운로드\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # CSV 생성",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "sample_test",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def sample_test():\n    \"\"\"샘플 데이터 테스트\"\"\"\n    try:\n        test_type = request.form.get(\"test_type\", \"basic\")\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))\n        rt_tolerance = float(request.form.get(\"rt_tolerance\", 0.1))\n        # 샘플 데이터 생성\n        if test_type == \"basic\":",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_stepwise_analyzer",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_stepwise_analyzer(session_id: str) -> StepwiseAnalyzer:\n    \"\"\"Get or create stepwise analyzer for session\"\"\"\n    if session_id not in stepwise_analyzers:\n        stepwise_analyzers[session_id] = StepwiseAnalyzer()\n    return stepwise_analyzers[session_id]\n@app.route('/api/stepwise/upload', methods=['POST'])\ndef stepwise_upload():\n    \"\"\"Step 0: Upload and preprocess data\"\"\"\n    try:\n        if 'file' not in request.files:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_upload",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stepwise_upload():\n    \"\"\"Step 0: Upload and preprocess data\"\"\"\n    try:\n        if 'file' not in request.files:\n            return jsonify({'error': 'No file uploaded'}), 400\n        file = request.files['file']\n        if file.filename == '':\n            return jsonify({'error': 'Empty filename'}), 400\n        # Read CSV\n        content = file.read().decode('utf-8')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_rule1",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stepwise_rule1():\n    \"\"\"Step 1: Execute Rule 1 - Prefix-based Regression\"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        analyzer = get_stepwise_analyzer(session_id)\n        result = analyzer.execute_rule1()\n        if 'error' in result:\n            return jsonify(result), 400\n        return jsonify(convert_to_serializable(result)), 200\n    except Exception as e:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_rule23",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stepwise_rule23():\n    \"\"\"Step 2: Execute Rules 2-3 - Sugar Count & Isomer Classification\"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        analyzer = get_stepwise_analyzer(session_id)\n        result = analyzer.execute_rule23()\n        if 'error' in result:\n            return jsonify(result), 400\n        return jsonify(convert_to_serializable(result)), 200\n    except Exception as e:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_rule4",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stepwise_rule4():\n    \"\"\"Step 3: Execute Rule 4 - O-acetylation Validation\"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        analyzer = get_stepwise_analyzer(session_id)\n        result = analyzer.execute_rule4()\n        if 'error' in result:\n            return jsonify(result), 400\n        return jsonify(convert_to_serializable(result)), 200\n    except Exception as e:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_rule5",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stepwise_rule5():\n    \"\"\"Step 4: Execute Rule 5 - Fragmentation Detection\"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        analyzer = get_stepwise_analyzer(session_id)\n        result = analyzer.execute_rule5()\n        if 'error' in result:\n            return jsonify(result), 400\n        return jsonify(convert_to_serializable(result)), 200\n    except Exception as e:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_summary",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stepwise_summary():\n    \"\"\"Get final analysis summary\"\"\"\n    try:\n        session_id = request.args.get('session_id', 'default')\n        analyzer = get_stepwise_analyzer(session_id)\n        result = analyzer.get_final_summary()\n        if 'error' in result:\n            return jsonify(result), 400\n        return jsonify(convert_to_serializable(result)), 200\n    except Exception as e:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_reset",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stepwise_reset():\n    \"\"\"Reset analysis state\"\"\"\n    try:\n        session_id = request.json.get('session_id', 'default')\n        if session_id in stepwise_analyzers:\n            stepwise_analyzers[session_id].reset()\n            return jsonify({'status': 'reset', 'session_id': session_id}), 200\n        else:\n            return jsonify({'status': 'no_session', 'session_id': session_id}), 200\n    except Exception as e:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_status",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stepwise_status():\n    \"\"\"Get current analysis status\"\"\"\n    try:\n        session_id = request.args.get('session_id', 'default')\n        if session_id not in stepwise_analyzers:\n            return jsonify({\n                'status': 'no_session',\n                'session_id': session_id,\n                'analysis_state': 'not_started'\n            }), 200",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(\n    __name__,\n    template_folder=\"backend/templates\",\n    static_folder=\"backend/static\"\n)\nCORS(app)  # CORS 설정\n# 설정\napp.config.update(\n    MAX_CONTENT_LENGTH=50 * 1024 * 1024,  # 50MB 최대 파일 크기\n    UPLOAD_FOLDER=\"uploads\",",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ganglioside_processor",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "ganglioside_processor = GangliosideProcessor()\nvisualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\ndef convert_to_serializable(obj):\n    \"\"\"Convert numpy types to JSON serializable types recursively\"\"\"\n    if obj is None:\n        return None\n    elif isinstance(obj, dict):\n        return {key: convert_to_serializable(value) for key, value in obj.items()}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "visualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\ndef convert_to_serializable(obj):\n    \"\"\"Convert numpy types to JSON serializable types recursively\"\"\"\n    if obj is None:\n        return None\n    elif isinstance(obj, dict):\n        return {key: convert_to_serializable(value) for key, value in obj.items()}\n    elif isinstance(obj, (list, tuple)):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "regression_analyzer",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "regression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\ndef convert_to_serializable(obj):\n    \"\"\"Convert numpy types to JSON serializable types recursively\"\"\"\n    if obj is None:\n        return None\n    elif isinstance(obj, dict):\n        return {key: convert_to_serializable(value) for key, value in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [convert_to_serializable(item) for item in obj]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stepwise_analyzers",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "stepwise_analyzers = {}\ndef get_stepwise_analyzer(session_id: str) -> StepwiseAnalyzer:\n    \"\"\"Get or create stepwise analyzer for session\"\"\"\n    if session_id not in stepwise_analyzers:\n        stepwise_analyzers[session_id] = StepwiseAnalyzer()\n    return stepwise_analyzers[session_id]\n@app.route('/api/stepwise/upload', methods=['POST'])\ndef stepwise_upload():\n    \"\"\"Step 0: Upload and preprocess data\"\"\"\n    try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_gt3_test_data",
        "kind": 2,
        "importPath": "compare_ridge_vs_linear",
        "description": "compare_ridge_vs_linear",
        "peekOfCode": "def create_gt3_test_data():\n    \"\"\"Create GT3 test dataset\"\"\"\n    data = {\n        'Name': [\n            'GT3(36:1;O2)', 'GT3(38:1;O2)', 'GT3(34:1;O2)', 'GT3(40:1;O2)',\n            'GD1a(36:1;O2)', 'GM1a(36:1;O2)', 'GM3(36:1;O2)',\n            'GD3(36:1;O2)', 'GT1b(36:1;O2)',\n        ],\n        'RT': [9.599, 11.126, 8.2, 12.5, 9.572, 10.452, 10.606, 10.126, 8.701],\n        'Volume': [1000000, 800000, 600000, 1200000, 1000000, 500000, 2000000, 800000, 1200000],",
        "detail": "compare_ridge_vs_linear",
        "documentation": {}
    },
    {
        "label": "run_comparison",
        "kind": 2,
        "importPath": "compare_ridge_vs_linear",
        "description": "compare_ridge_vs_linear",
        "peekOfCode": "def run_comparison():\n    \"\"\"Compare LinearRegression vs Ridge with various alpha values\"\"\"\n    print(\"=\" * 80)\n    print(\"RIDGE vs LINEAR REGRESSION COMPARISON\")\n    print(\"=\" * 80)\n    df = create_gt3_test_data()\n    # Test configurations\n    configs = [\n        {\"name\": \"LinearRegression (No Regularization)\", \"use_ridge\": False, \"alpha\": 0.0},\n        {\"name\": \"Ridge (α=0.1) - Very Weak\", \"use_ridge\": True, \"alpha\": 0.1},",
        "detail": "compare_ridge_vs_linear",
        "documentation": {}
    },
    {
        "label": "create_gt3_test_data",
        "kind": 2,
        "importPath": "diagnose_overfitting",
        "description": "diagnose_overfitting",
        "peekOfCode": "def create_gt3_test_data():\n    \"\"\"Create GT3 test dataset\"\"\"\n    data = {\n        'Name': ['GT3(34:1;O2)', 'GT3(36:1;O2)', 'GT3(38:1;O2)', 'GT3(40:1;O2)'],\n        'RT': [8.2, 9.599, 11.126, 12.5],\n        'Log P': [1.5, 2.8, 3.88, 5.0],\n        'a_component': [34, 36, 38, 40],\n        'b_component': [1, 1, 1, 1],\n        'oxygen_count': [2, 2, 2, 2],\n        'sugar_count': [7, 7, 7, 7],",
        "detail": "diagnose_overfitting",
        "documentation": {}
    },
    {
        "label": "diagnose_overfitting",
        "kind": 2,
        "importPath": "diagnose_overfitting",
        "description": "diagnose_overfitting",
        "peekOfCode": "def diagnose_overfitting():\n    \"\"\"Main diagnostic function\"\"\"\n    print(\"=\" * 80)\n    print(\"OVERFITTING DIAGNOSTIC TEST\")\n    print(\"=\" * 80)\n    df = create_gt3_test_data()\n    # Prepare data\n    all_features = ['Log P', 'a_component', 'b_component', 'oxygen_count',\n                    'sugar_count', 'sialic_acid_count', 'has_OAc', 'has_dHex', 'has_HexNAc']\n    anchors = df[df['Anchor'] == 'T']",
        "detail": "diagnose_overfitting",
        "documentation": {}
    },
    {
        "label": "create_gt3_test_data",
        "kind": 2,
        "importPath": "test_gt3_validation",
        "description": "test_gt3_validation",
        "peekOfCode": "def create_gt3_test_data():\n    \"\"\"\n    Create test dataset including the GT3 examples provided by user\n    User specification:\n    - GT3(36:1;O2), Log P: 2.8, RT: 9.599   → TRUE POSITIVE\n    - GT3(38:1;O2), Log P: 3.88, RT: 11.126 → TRUE POSITIVE\n    These should BOTH be valid because:\n    1. Same prefix (GT3 = trisialoganglioside)\n    2. Different carbon chains (36 vs 38) - EXPECTED variation\n    3. RT increases with carbon chain - EXPECTED chemistry",
        "detail": "test_gt3_validation",
        "documentation": {}
    },
    {
        "label": "test_gt3_validation",
        "kind": 2,
        "importPath": "test_gt3_validation",
        "description": "test_gt3_validation",
        "peekOfCode": "def test_gt3_validation():\n    \"\"\"\n    Test that GT3 examples are correctly identified as VALID\n    \"\"\"\n    print(\"=\"*80)\n    print(\"GT3 VALIDATION TEST\")\n    print(\"=\"*80)\n    print(\"\\nUser Specification:\")\n    print(\"  GT3(36:1;O2), Log P: 2.8, RT: 9.599   → MUST be VALID\")\n    print(\"  GT3(38:1;O2), Log P: 3.88, RT: 11.126 → MUST be VALID\")",
        "detail": "test_gt3_validation",
        "documentation": {}
    },
    {
        "label": "create_test_data",
        "kind": 2,
        "importPath": "test_modular_rules",
        "description": "test_modular_rules",
        "peekOfCode": "def create_test_data():\n    \"\"\"Create test dataset\"\"\"\n    data = {\n        'Name': [\n            'GD1a(36:1;O2)',\n            'GM1a(36:1;O2)',\n            'GM3(36:1;O2)',\n            'GD3(36:1;O2)',\n            'GT1b(36:1;O2)'\n        ],",
        "detail": "test_modular_rules",
        "documentation": {}
    },
    {
        "label": "test_rule1",
        "kind": 2,
        "importPath": "test_modular_rules",
        "description": "test_modular_rules",
        "peekOfCode": "def test_rule1():\n    \"\"\"Test Rule 1: Prefix-based Regression\"\"\"\n    print(\"\\n\" + \"=\"*70)\n    print(\"TESTING RULE 1: PREFIX-BASED REGRESSION\")\n    print(\"=\"*70)\n    df = create_test_data()\n    rule1 = Rule1PrefixRegression(r2_threshold=0.95, outlier_threshold=2.0)\n    try:\n        results = rule1.apply(df)\n        print(\"\\n📊 Rule 1 Results:\")",
        "detail": "test_modular_rules",
        "documentation": {}
    },
    {
        "label": "test_rule2",
        "kind": 2,
        "importPath": "test_modular_rules",
        "description": "test_modular_rules",
        "peekOfCode": "def test_rule2():\n    \"\"\"Test Rule 2: Sugar Count Calculation\"\"\"\n    print(\"\\n\" + \"=\"*70)\n    print(\"TESTING RULE 2: SUGAR COUNT CALCULATION\")\n    print(\"=\"*70)\n    df = create_test_data()\n    rule2 = Rule2SugarCount()\n    try:\n        results = rule2.apply(df)\n        print(\"\\n🧬 Rule 2 Results:\")",
        "detail": "test_modular_rules",
        "documentation": {}
    },
    {
        "label": "test_rule3",
        "kind": 2,
        "importPath": "test_modular_rules",
        "description": "test_modular_rules",
        "peekOfCode": "def test_rule3():\n    \"\"\"Test Rule 3: Isomer Classification\"\"\"\n    print(\"\\n\" + \"=\"*70)\n    print(\"TESTING RULE 3: ISOMER CLASSIFICATION\")\n    print(\"=\"*70)\n    df = create_test_data()\n    rule3 = Rule3IsomerClassification()\n    try:\n        results = rule3.apply(df, data_type=\"Porcine\")\n        print(\"\\n🧬 Rule 3 Results:\")",
        "detail": "test_modular_rules",
        "documentation": {}
    },
    {
        "label": "test_rule4",
        "kind": 2,
        "importPath": "test_modular_rules",
        "description": "test_modular_rules",
        "peekOfCode": "def test_rule4():\n    \"\"\"Test Rule 4: O-acetylation Validation\"\"\"\n    print(\"\\n\" + \"=\"*70)\n    print(\"TESTING RULE 4: O-ACETYLATION VALIDATION\")\n    print(\"=\"*70)\n    df = create_test_data()\n    rule4 = Rule4OAcetylation()\n    try:\n        results = rule4.apply(df)\n        print(\"\\n⚗️ Rule 4 Results:\")",
        "detail": "test_modular_rules",
        "documentation": {}
    },
    {
        "label": "test_rule5",
        "kind": 2,
        "importPath": "test_modular_rules",
        "description": "test_modular_rules",
        "peekOfCode": "def test_rule5():\n    \"\"\"Test Rule 5: Fragmentation Detection\"\"\"\n    print(\"\\n\" + \"=\"*70)\n    print(\"TESTING RULE 5: FRAGMENTATION DETECTION\")\n    print(\"=\"*70)\n    df = create_test_data()\n    # Create rule with sugar count calculator\n    from backend.rules import Rule2SugarCount\n    rule2 = Rule2SugarCount()\n    rule5 = Rule5Fragmentation(",
        "detail": "test_modular_rules",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_modular_rules",
        "description": "test_modular_rules",
        "peekOfCode": "def main():\n    \"\"\"Run all tests\"\"\"\n    print(\"\\n\" + \"=\"*70)\n    print(\"MODULAR RULES SYSTEM TEST SUITE\")\n    print(\"=\"*70)\n    # Print rule summary\n    print(\"\\n\" + get_rule_summary())\n    # Run tests\n    tests = [\n        (\"Rule 1\", test_rule1),",
        "detail": "test_modular_rules",
        "documentation": {}
    },
    {
        "label": "test_multiple_regression",
        "kind": 2,
        "importPath": "test_multiple_regression",
        "description": "test_multiple_regression",
        "peekOfCode": "def test_multiple_regression():\n    \"\"\"Test the multiple regression implementation\"\"\"\n    print(\"=\"*80)\n    print(\"MULTIPLE REGRESSION TEST\")\n    print(\"=\"*80)\n    # Load sample data\n    print(\"\\n📂 Loading sample data...\")\n    df = pd.read_csv('data/sample/testwork.csv')\n    print(f\"✅ Loaded {len(df)} compounds\")\n    print(f\"   Columns: {list(df.columns)}\")",
        "detail": "test_multiple_regression",
        "documentation": {}
    }
]