[
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "DummyGangliosideDataProcessor",
        "importPath": "backend.services.dummy.processors",
        "description": "backend.services.dummy.processors",
        "isExtraImport": true,
        "detail": "backend.services.dummy.processors",
        "documentation": {}
    },
    {
        "label": "DummyVisualizationService",
        "importPath": "backend.services.dummy.processors",
        "description": "backend.services.dummy.processors",
        "isExtraImport": true,
        "detail": "backend.services.dummy.processors",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "make_subplots",
        "importPath": "plotly.subplots",
        "description": "plotly.subplots",
        "isExtraImport": true,
        "detail": "plotly.subplots",
        "documentation": {}
    },
    {
        "label": "VisualizationData",
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "isExtraImport": true,
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "calculate_mass_to_charge",
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "isExtraImport": true,
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "importPath": "services.ganglioside_processor",
        "description": "services.ganglioside_processor",
        "isExtraImport": true,
        "detail": "services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "RegressionAnalyzer",
        "importPath": "services.regression_analyzer",
        "description": "services.regression_analyzer",
        "isExtraImport": true,
        "detail": "services.regression_analyzer",
        "documentation": {}
    },
    {
        "label": "VisualizationService",
        "importPath": "services.visualization_service",
        "description": "services.visualization_service",
        "isExtraImport": true,
        "detail": "services.visualization_service",
        "documentation": {}
    },
    {
        "label": "analysis_bp",
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "isExtraImport": true,
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "init_services",
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "isExtraImport": true,
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "visualization_bp",
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "isExtraImport": true,
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "init_visualization_service",
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "isExtraImport": true,
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "settings_bp",
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "isExtraImport": true,
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "init_processor_service",
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "isExtraImport": true,
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "web_bp",
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "isExtraImport": true,
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "importPath": "backend.services.ganglioside_processor",
        "description": "backend.services.ganglioside_processor",
        "isExtraImport": true,
        "detail": "backend.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorFixed",
        "importPath": "backend.services.ganglioside_processor_fixed",
        "description": "backend.services.ganglioside_processor_fixed",
        "isExtraImport": true,
        "detail": "backend.services.ganglioside_processor_fixed",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "importPath": "backend.core.analysis_service",
        "description": "backend.core.analysis_service",
        "isExtraImport": true,
        "detail": "backend.core.analysis_service",
        "documentation": {}
    },
    {
        "label": "init_services",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"NumPy/pandas 객체를 JSON 직렬화 가능한 형태로 변환\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def convert_to_serializable(obj):\n    \"\"\"NumPy/pandas 객체를 JSON 직렬화 가능한 형태로 변환\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):\n        return float(obj)",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def upload_csv():\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        if file.filename == \"\":\n            return jsonify({\"error\": \"파일이 선택되지 않았습니다.\"}), 400\n        if not file.filename.lower().endswith('.csv'):\n            return jsonify({\"error\": \"CSV 파일만 업로드 가능합니다.\"}), 400",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "analyze_data",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def analyze_data():\n    \"\"\"데이터 분석 실행\"\"\"\n    try:\n        # 파일 및 설정 가져오기\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"분석할 파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "sample_test",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def sample_test():\n    \"\"\"샘플 데이터 테스트\"\"\"\n    try:\n        # 요청에서 설정 가져오기\n        data = request.get_json()\n        if not data:\n            return jsonify({\"error\": \"JSON 데이터가 필요합니다.\"}), 400\n        data_type = data.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(data.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(data.get(\"r2_threshold\", 0.99))",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "download_results",
        "kind": 2,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "def download_results():\n    \"\"\"분석 결과 다운로드\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify({\"error\": \"분석 결과 데이터가 없습니다.\"}), 400\n        results = data[\"results\"]\n        # CSV 형태로 변환\n        output_data = []\n        # 유효한 화합물들",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "processor = None\nregression_analyzer = None\nvisualization_service = None\n# Blueprint 생성\nanalysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "regression_analyzer",
        "kind": 5,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "regression_analyzer = None\nvisualization_service = None\n# Blueprint 생성\nanalysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "visualization_service = None\n# Blueprint 생성\nanalysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service\ndef convert_to_serializable(obj):",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_bp",
        "kind": 5,
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "peekOfCode": "analysis_bp = Blueprint('analysis', __name__, url_prefix='/api')\ndef init_services(ganglioside_processor, reg_analyzer, vis_service):\n    \"\"\"서비스 인스턴스들을 초기화\"\"\"\n    global processor, regression_analyzer, visualization_service\n    processor = ganglioside_processor\n    regression_analyzer = reg_analyzer\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"NumPy/pandas 객체를 JSON 직렬화 가능한 형태로 변환\"\"\"\n    if isinstance(obj, dict):",
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def convert_to_serializable(obj: Any) -> Any:\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):\n        return float(obj)",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "analyze_data_enhanced",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def analyze_data_enhanced():\n    \"\"\"\n    Enhanced data analysis with fixed regression algorithms\n    \"\"\"\n    try:\n        print(\"🚀 Enhanced analysis request received\")\n        # Validate request\n        if 'file' not in request.files:\n            return jsonify({\"error\": \"No file provided\"}), 400\n        file = request.files['file']",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "upload_csv_enhanced",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def upload_csv_enhanced():\n    \"\"\"Enhanced CSV upload with better validation\"\"\"\n    try:\n        if 'file' not in request.files:\n            return jsonify({\"error\": \"No file provided\"}), 400\n        file = request.files['file']\n        if file.filename == '' or not file.filename.endswith('.csv'):\n            return jsonify({\"error\": \"Invalid file. Please upload a CSV file.\"}), 400\n        # Read and validate CSV\n        try:",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "analysis_settings",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def analysis_settings():\n    \"\"\"Get or update analysis settings\"\"\"\n    try:\n        if request.method == \"GET\":\n            # Return current settings\n            current_settings = g.analysis_service.get_current_settings()\n            return jsonify({\n                \"status\": \"success\",\n                \"settings\": current_settings,\n                \"timestamp\": datetime.now().isoformat()",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "export_results",
        "kind": 2,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "def export_results(format: str):\n    \"\"\"Export analysis results in different formats\"\"\"\n    try:\n        # This would typically use stored results from a session or database\n        # For now, return a placeholder\n        if format not in ['csv', 'xlsx', 'json']:\n            return jsonify({\"error\": \"Unsupported format. Use: csv, xlsx, json\"}), 400\n        return jsonify({\n            \"message\": f\"Export in {format} format - Feature coming soon\",\n            \"available_formats\": [\"csv\", \"xlsx\", \"json\"],",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "analysis_bp",
        "kind": 5,
        "importPath": "backend.api.routes.analysis_fixed",
        "description": "backend.api.routes.analysis_fixed",
        "peekOfCode": "analysis_bp = Blueprint('analysis', __name__)\ndef convert_to_serializable(obj: Any) -> Any:\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):",
        "detail": "backend.api.routes.analysis_fixed",
        "documentation": {}
    },
    {
        "label": "get_data_processor",
        "kind": 2,
        "importPath": "backend.api.routes.data_legacy",
        "description": "backend.api.routes.data_legacy",
        "peekOfCode": "def get_data_processor():\n    return data_processor\ndef get_visualization_service():\n    return visualization_service\n@router.post(\"/upload\")\nasync def upload_csv(file: UploadFile = File(...)):\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if not file.filename.endswith(\".csv\"):\n            raise HTTPException(",
        "detail": "backend.api.routes.data_legacy",
        "documentation": {}
    },
    {
        "label": "get_visualization_service",
        "kind": 2,
        "importPath": "backend.api.routes.data_legacy",
        "description": "backend.api.routes.data_legacy",
        "peekOfCode": "def get_visualization_service():\n    return visualization_service\n@router.post(\"/upload\")\nasync def upload_csv(file: UploadFile = File(...)):\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if not file.filename.endswith(\".csv\"):\n            raise HTTPException(\n                status_code=400, detail=\"CSV 파일만 업로드 가능합니다.\"\n            )",
        "detail": "backend.api.routes.data_legacy",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.routes.data_legacy",
        "description": "backend.api.routes.data_legacy",
        "peekOfCode": "router = APIRouter(prefix=\"/api\", tags=[\"data\"])\n# 서비스 인스턴스 초기화\ntry:\n    from backend.services.data_processor import GangliosideDataProcessor\n    from backend.services.visualization_service import VisualizationService\n    data_processor = GangliosideDataProcessor()\n    visualization_service = VisualizationService()\n    print(\"✅ 실제 분석 모듈 로드 성공\")\nexcept ImportError as e:\n    print(f\"⚠️ 분석 모듈 로드 실패: {e}\")",
        "detail": "backend.api.routes.data_legacy",
        "documentation": {}
    },
    {
        "label": "init_processor_service",
        "kind": 2,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "def init_processor_service(ganglioside_processor):\n    \"\"\"Initialize processor service instance\"\"\"\n    global processor\n    processor = ganglioside_processor\n@settings_bp.route(\"/settings\", methods=[\"GET\", \"POST\"])\ndef manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"\n    try:\n        if request.method == \"GET\":\n            # Return current settings",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "manage_settings",
        "kind": 2,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "def manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"\n    try:\n        if request.method == \"GET\":\n            # Return current settings\n            current_settings = processor.get_settings()\n            return jsonify({\n                \"message\": \"Current settings retrieved\",\n                \"settings\": current_settings,\n                \"timestamp\": datetime.now().isoformat()",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "def health_check():\n    \"\"\"Health check endpoint for service status\"\"\"\n    try:\n        # Check if processor is available and working\n        if processor is None:\n            return jsonify({\n                \"status\": \"unhealthy\",\n                \"error\": \"Processor service not initialized\"\n            }), 503\n        # Get current settings as a basic health check",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "processor = None\n# Blueprint creation\nsettings_bp = Blueprint('settings', __name__, url_prefix='/api')\ndef init_processor_service(ganglioside_processor):\n    \"\"\"Initialize processor service instance\"\"\"\n    global processor\n    processor = ganglioside_processor\n@settings_bp.route(\"/settings\", methods=[\"GET\", \"POST\"])\ndef manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "settings_bp",
        "kind": 5,
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "peekOfCode": "settings_bp = Blueprint('settings', __name__, url_prefix='/api')\ndef init_processor_service(ganglioside_processor):\n    \"\"\"Initialize processor service instance\"\"\"\n    global processor\n    processor = ganglioside_processor\n@settings_bp.route(\"/settings\", methods=[\"GET\", \"POST\"])\ndef manage_settings():\n    \"\"\"Settings management - get or update analysis parameters\"\"\"\n    try:\n        if request.method == \"GET\":",
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "init_visualization_service",
        "kind": 2,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "def init_visualization_service(vis_service):\n    \"\"\"Initialize visualization service instance\"\"\"\n    global visualization_service\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "def convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)\n    elif isinstance(obj, (np.floating, np.float32, np.float64)):\n        return float(obj)",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "create_visualizations",
        "kind": 2,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "def create_visualizations():\n    \"\"\"Create all visualizations from analysis results\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify({\"error\": \"Analysis results data is required.\"}), 400\n        results = data[\"results\"]\n        # Generate all visualizations\n        plots = visualization_service.create_all_plots(results)\n        return jsonify({",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "create_3d_visualization",
        "kind": 2,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "def create_3d_visualization():\n    \"\"\"Dedicated endpoint for 3D distribution visualization\"\"\"\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({\"error\": \"Request data is required.\"}), 400\n        # Check for file data\n        if \"file_data\" in data:\n            # Process CSV data directly\n            df = pd.DataFrame(data[\"file_data\"])",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "visualization_service = None\n# Blueprint creation\nvisualization_bp = Blueprint('visualization', __name__, url_prefix='/api')\ndef init_visualization_service(vis_service):\n    \"\"\"Initialize visualization service instance\"\"\"\n    global visualization_service\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "visualization_bp",
        "kind": 5,
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "peekOfCode": "visualization_bp = Blueprint('visualization', __name__, url_prefix='/api')\ndef init_visualization_service(vis_service):\n    \"\"\"Initialize visualization service instance\"\"\"\n    global visualization_service\n    visualization_service = vis_service\ndef convert_to_serializable(obj):\n    \"\"\"Convert NumPy/pandas objects to JSON serializable format\"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_serializable(v) for k, v in obj.items()}\n    elif isinstance(obj, list):",
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def index():\n    \"\"\"Main page - Working analyzer\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving working analyzer: {str(e)}\")\n        return f\"Error loading working analyzer: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "interactive_analyzer",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def interactive_analyzer():\n    \"\"\"Interactive analyzer page\"\"\"\n    try:\n        return render_template(\"interactive_analyzer.html\")\n    except Exception as e:\n        print(f\"Template error for interactive: {str(e)}\")\n        return f\"Template rendering error: {str(e)}\", 500\n@web_bp.route(\"/legacy\")\ndef simple_analyzer():\n    \"\"\"Simple analyzer page (legacy)\"\"\"",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "simple_analyzer",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def simple_analyzer():\n    \"\"\"Simple analyzer page (legacy)\"\"\"\n    try:\n        return render_template(\"analyzer.html\")\n    except Exception as e:\n        print(f\"Template error for legacy: {str(e)}\")\n        return f\"Template rendering error: {str(e)}\", 500\n@web_bp.route(\"/integrated\")\ndef integrated_view():\n    \"\"\"Integrated visualization page - combined 2D and 3D displays\"\"\"",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "integrated_view",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def integrated_view():\n    \"\"\"Integrated visualization page - combined 2D and 3D displays\"\"\"\n    try:\n        with open(\"integrated_visualization_english.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Integrated visualization file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving integrated view: {str(e)}\")\n        return f\"Error loading integrated view: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "diagnostic_test",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def diagnostic_test():\n    \"\"\"Diagnostic test page for JavaScript debugging\"\"\"\n    try:\n        with open(\"diagnostic_test.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Diagnostic test file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving diagnostic test: {str(e)}\")\n        return f\"Error loading diagnostic test: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "simple_analyzer_working",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def simple_analyzer_working():\n    \"\"\"Simple working analyzer page\"\"\"\n    try:\n        with open(\"simple_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Simple analyzer file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving simple analyzer: {str(e)}\")\n        return f\"Error loading simple analyzer: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "working_analyzer",
        "kind": 2,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "def working_analyzer():\n    \"\"\"Working analyzer with integrated features\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n    except Exception as e:\n        print(f\"Error serving working analyzer: {str(e)}\")\n        return f\"Error loading working analyzer: {str(e)}\", 500",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "web_bp",
        "kind": 5,
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "peekOfCode": "web_bp = Blueprint('web', __name__)\n@web_bp.route(\"/\")\ndef index():\n    \"\"\"Main page - Working analyzer\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n    except Exception as e:",
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "kind": 6,
        "importPath": "backend.core.analysis_service",
        "description": "backend.core.analysis_service",
        "peekOfCode": "class AnalysisService:\n    \"\"\"\n    Central analysis service that orchestrates all analysis components\n    \"\"\"\n    def __init__(self):\n        \"\"\"Initialize all analysis components\"\"\"\n        self.ganglioside_processor = GangliosideProcessorFixed()\n        self.regression_analyzer = RegressionAnalyzer()\n        self.visualization_service = VisualizationService()\n        print(\"🚀 Analysis Service 초기화 완료\")",
        "detail": "backend.core.analysis_service",
        "documentation": {}
    },
    {
        "label": "DummyGangliosideDataProcessor",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_backup",
        "description": "backend.services.dummy.processors_backup",
        "peekOfCode": "class DummyGangliosideDataProcessor:\n    \"\"\"더미 데이터 프로세서 - 실제 분석 로직 시뮬레이션\"\"\"\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.rt_tolerance = 0.1\n        print(\"🧪 Dummy Ganglioside Data Processor 초기화\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None\n    ):",
        "detail": "backend.services.dummy.processors_backup",
        "documentation": {}
    },
    {
        "label": "DummyVisualizationService",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_backup",
        "description": "backend.services.dummy.processors_backup",
        "peekOfCode": "class DummyVisualizationService:\n    \"\"\"더미 시각화 서비스\"\"\"\n    def __init__(self):\n        print(\"📊 Dummy Visualization Service 초기화\")\n    def create_all_plots(self, results: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"더미 시각화 생성\"\"\"\n        return {\n            \"message\": \"더미 시각화 기능 준비 중\",\n            \"available_plots\": [\n                \"regression_plots\",",
        "detail": "backend.services.dummy.processors_backup",
        "documentation": {}
    },
    {
        "label": "DummyGangliosideDataProcessor",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_new",
        "description": "backend.services.dummy.processors_new",
        "peekOfCode": "class DummyGangliosideDataProcessor:\n    \"\"\"개선된 Ganglioside 분석 더미 클래스 (위음성 감소)\"\"\"\n    def __init__(self):\n        # 기본 설정값 (더 관대한 기준으로 설정)\n        self.outlier_threshold = 2.0  # 표준화 잔차 임계값 (기본값 더 관대하게)\n        self.r2_threshold = 0.90  # R² 임계값 (기본값 더 낮게)\n        self.rt_tolerance = 0.3  # RT 허용 오차 (기본값 더 크게)\n        print(\"🧪 Dummy Ganglioside Data Processor 초기화 (개선된 버전)\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None",
        "detail": "backend.services.dummy.processors_new",
        "documentation": {}
    },
    {
        "label": "DummyVisualizationService",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_new",
        "description": "backend.services.dummy.processors_new",
        "peekOfCode": "class DummyVisualizationService:\n    \"\"\"더미 시각화 서비스 (변경사항 없음)\"\"\"\n    def __init__(self):\n        print(\"📊 Dummy Visualization Service 초기화\")\n    def create_dashboard(self, results: Dict[str, Any]) -> str:\n        return \"<div>더미 시각화 대시보드</div>\"\nclass DummyRegressionAnalyzer:\n    \"\"\"더미 회귀분석기 (변경사항 없음)\"\"\"\n    def __init__(self):\n        print(\"🔬 Dummy Regression Analyzer 초기화\")",
        "detail": "backend.services.dummy.processors_new",
        "documentation": {}
    },
    {
        "label": "DummyRegressionAnalyzer",
        "kind": 6,
        "importPath": "backend.services.dummy.processors_new",
        "description": "backend.services.dummy.processors_new",
        "peekOfCode": "class DummyRegressionAnalyzer:\n    \"\"\"더미 회귀분석기 (변경사항 없음)\"\"\"\n    def __init__(self):\n        print(\"🔬 Dummy Regression Analyzer 초기화\")\n    def analyze_regression(self, data: pd.DataFrame) -> Dict[str, Any]:\n        return {\"r2\": 0.95, \"slope\": -0.5, \"intercept\": 8.0}",
        "detail": "backend.services.dummy.processors_new",
        "documentation": {}
    },
    {
        "label": "GangliosideDataProcessor",
        "kind": 6,
        "importPath": "backend.services.data_processor",
        "description": "backend.services.data_processor",
        "peekOfCode": "class GangliosideDataProcessor:\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.rt_tolerance = 0.1\n        print(\"🔬 Ganglioside Data Processor 초기화 완료\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None\n    ):\n        \"\"\"분석 설정 업데이트\"\"\"",
        "detail": "backend.services.data_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "kind": 6,
        "importPath": "backend.services.ganglioside_processor",
        "description": "backend.services.ganglioside_processor",
        "peekOfCode": "class GangliosideProcessor:\n    def __init__(self):\n        # Fixed thresholds for realistic chemical data analysis\n        self.r2_threshold = 0.75  # Lowered from 0.99 to realistic value\n        self.outlier_threshold = 2.5  # Lowered from 3.0 for better sensitivity\n        self.rt_tolerance = 0.1\n        print(\"🧬 Ganglioside Processor 초기화 완료 (Fixed Version)\")\n    def update_settings(\n        self, outlier_threshold=None, r2_threshold=None, rt_tolerance=None\n    ):",
        "detail": "backend.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorFixed",
        "kind": 6,
        "importPath": "backend.services.ganglioside_processor_fixed",
        "description": "backend.services.ganglioside_processor_fixed",
        "peekOfCode": "class GangliosideProcessorFixed:\n    \"\"\"\n    Fixed Ganglioside Processor with improved regression analysis\n    \"\"\"\n    def __init__(self):\n        # Realistic thresholds for chemical analysis\n        self.r2_threshold = 0.75  # Lowered from 0.99 to realistic value\n        self.outlier_threshold = 2.5  # Lowered from 3.0 for better sensitivity\n        self.rt_tolerance = 0.1\n        self.min_compounds_for_regression = 2",
        "detail": "backend.services.ganglioside_processor_fixed",
        "documentation": {}
    },
    {
        "label": "RegressionAnalyzer",
        "kind": 6,
        "importPath": "backend.services.regression_analyzer",
        "description": "backend.services.regression_analyzer",
        "peekOfCode": "class RegressionAnalyzer:\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.confidence_level = 0.95\n        print(\"📈 Regression Analyzer 초기화 완료\")\n    def perform_comprehensive_regression(\n        self, x_data: np.ndarray, y_data: np.ndarray, compound_names: List[str] = None\n    ) -> Dict[str, Any]:\n        \"\"\"",
        "detail": "backend.services.regression_analyzer",
        "documentation": {}
    },
    {
        "label": "VisualizationService",
        "kind": 6,
        "importPath": "backend.services.visualization_service",
        "description": "backend.services.visualization_service",
        "peekOfCode": "class VisualizationService:\n    def __init__(self):\n        self.color_palette = {\n            \"valid\": \"#2ecc71\",  # Green\n            \"outlier\": \"#e74c3c\",  # Red\n            \"anchor\": \"#3498db\",  # Blue\n            \"regression\": \"#9b59b6\",  # Purple\n            \"background\": \"#ecf0f1\",  # Light gray\n            \"grid\": \"#bdc3c7\",  # Gray\n        }",
        "detail": "backend.services.visualization_service",
        "documentation": {}
    },
    {
        "label": "CompoundData",
        "kind": 6,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "class CompoundData:\n    \"\"\"Single compound data structure\"\"\"\n    name: str\n    rt: float  # Retention Time\n    volume: float\n    log_p: float  # Partition Coefficient (Log P)\n    anchor: str  # 'T' or 'F'\n    # Derived properties\n    prefix: Optional[str] = None\n    suffix: Optional[str] = None",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "VisualizationData",
        "kind": 6,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "class VisualizationData:\n    \"\"\"3D visualization data structure\"\"\"\n    x_data: List[float]  # Mass-to-charge ratio (m/z)\n    y_data: List[float]  # Retention Time\n    z_data: List[float]  # Partition Coefficient (Log P)\n    # Additional properties\n    labels: List[str]\n    colors: List[str]\n    sizes: List[float]\n    anchor_mask: List[bool]",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "RegressionResult",
        "kind": 6,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "class RegressionResult:\n    \"\"\"Regression analysis result\"\"\"\n    prefix: str\n    slope: float\n    intercept: float\n    r2: float\n    n_samples: int\n    equation: str\n    p_value: float\n    def predict(self, log_p_values: np.ndarray) -> np.ndarray:",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "AnalysisResults",
        "kind": 6,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "class AnalysisResults:\n    \"\"\"Complete analysis results structure\"\"\"\n    valid_compounds: List[CompoundData]\n    outliers: List[CompoundData]\n    regression_results: Dict[str, RegressionResult]\n    statistics: Dict[str, Any]\n    # Additional analysis data\n    sugar_analysis: Dict[str, Any]\n    oacetylation_analysis: Dict[str, Any]\n    detailed_analysis: Dict[str, Any]",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "calculate_mass_to_charge",
        "kind": 2,
        "importPath": "backend.utils.data_structures",
        "description": "backend.utils.data_structures",
        "peekOfCode": "def calculate_mass_to_charge(compound_name: str, base_mass: Optional[float] = None) -> float:\n    \"\"\"\n    Calculate mass-to-charge ratio from compound name\n    Args:\n        compound_name: Compound name like \"GD1a(36:1;O2)\"\n        base_mass: Optional base mass for the ganglioside class\n    Returns:\n        Estimated m/z ratio\n    \"\"\"\n    import re",
        "detail": "backend.utils.data_structures",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class Settings(BaseModel):\n    \"\"\"애플리케이션 설정\"\"\"\n    # Database\n    database_url: str = \"postgresql://postgres:password@localhost:5432/ganglioside_db\"\n    # Redis\n    redis_url: str = \"redis://localhost:6379\"\n    # Application\n    secret_key: str = \"your-secret-key-here\"\n    debug: bool = True\n    # File Upload",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "settings = Settings()\n# 디렉토리 생성\nos.makedirs(settings.upload_dir, exist_ok=True)\nos.makedirs(settings.output_dir, exist_ok=True)",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = FastAPI(\n    title=\"🧬 Ganglioside Analyzer\",\n    description=\"산성 당지질 LC-MS/MS 데이터 자동 분석 시스템\",\n    version=\"2.0.0\",\n)\n# CORS 설정\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # 모든 오리진 허용 (개발용)\n    allow_credentials=True,",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "static_dir",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "static_dir = os.path.join(os.path.dirname(__file__), \"static\")\nif os.path.exists(static_dir):\n    app.mount(\"/static\", StaticFiles(directory=static_dir), name=\"static\")\n# 라우터 등록\napp.include_router(data_router)\napp.include_router(settings_router)\napp.include_router(web_router)\n# 루트 엔드포인트\n@app.get(\"/\")\nasync def root():",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "convert_to_serializable",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def convert_to_serializable(obj):\n    \"\"\"Convert numpy types to JSON serializable types recursively\"\"\"\n    if obj is None:\n        return None\n    elif isinstance(obj, dict):\n        return {key: convert_to_serializable(value) for key, value in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [convert_to_serializable(item) for item in obj]\n    elif isinstance(obj, (np.integer, np.int32, np.int64)):\n        return int(obj)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "interactive_analyzer",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/integrated\")\ndef integrated_view():\n    \"\"\"통합 시각화 페이지 - 2D와 3D를 함께 표시\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "simple_analyzer",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/integrated\")\ndef integrated_view():\n    \"\"\"통합 시각화 페이지 - 2D와 3D를 함께 표시\"\"\"\n    try:\n        with open(\"integrated_visualization.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "integrated_view",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def integrated_view():\n    \"\"\"통합 시각화 페이지 - 2D와 3D를 함께 표시\"\"\"\n    try:\n        with open(\"integrated_visualization.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"통합 시각화 파일을 찾을 수 없습니다.\", 404\n@app.route(\"/working\")\ndef working_analyzer():\n    \"\"\"Working analyzer with fixed visualization\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "working_analyzer",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def working_analyzer():\n    \"\"\"Working analyzer with fixed visualization\"\"\"\n    try:\n        with open(\"working_analyzer.html\", \"r\", encoding=\"utf-8\") as f:\n            return f.read()\n    except FileNotFoundError:\n        return \"Working analyzer file not found.\", 404\n@app.route(\"/api/health\")\ndef health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"\n    return jsonify(\n        {\n            \"status\": \"healthy\",\n            \"service\": \"ganglioside-analyzer-flask\",\n            \"version\": \"2.0.0\",\n            \"timestamp\": datetime.now().isoformat(),\n        }\n    )",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def upload_csv():\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        if file.filename == \"\":\n            return jsonify({\"error\": \"파일명이 없습니다.\"}), 400\n        if not file.filename.endswith(\".csv\"):\n            return jsonify(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "analyze_data",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def analyze_data():\n    \"\"\"데이터 분석 실행\"\"\"\n    try:\n        # 파일 및 설정 가져오기\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"분석할 파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_visualizations",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_visualizations():\n    \"\"\"시각화 생성\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # 시각화 생성",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_3d_visualization",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_3d_visualization():\n    \"\"\"3D 분포 시각화 전용 엔드포인트\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # 3D 시각화만 생성",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "manage_settings",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def manage_settings():\n    \"\"\"설정 관리\"\"\"\n    try:\n        if request.method == \"GET\":\n            # 현재 설정 반환\n            return jsonify(\n                {\n                    \"current_settings\": ganglioside_processor.get_settings(),\n                    \"default_settings\": {\n                        \"outlier_threshold\": 3.0,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "download_results",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def download_results():\n    \"\"\"분석 결과 다운로드\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # CSV 생성",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "sample_test",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def sample_test():\n    \"\"\"샘플 데이터 테스트\"\"\"\n    try:\n        test_type = request.form.get(\"test_type\", \"basic\")\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))\n        rt_tolerance = float(request.form.get(\"rt_tolerance\", 0.1))\n        # 샘플 데이터 생성\n        if test_type == \"basic\":",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(\n    __name__,\n    template_folder=\"backend/templates\",\n    static_folder=\"backend/static\"\n)\nCORS(app)  # CORS 설정\n# 설정\napp.config.update(\n    MAX_CONTENT_LENGTH=50 * 1024 * 1024,  # 50MB 최대 파일 크기\n    UPLOAD_FOLDER=\"uploads\",",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ganglioside_processor",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "ganglioside_processor = GangliosideProcessor()\nvisualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\ndef convert_to_serializable(obj):\n    \"\"\"Convert numpy types to JSON serializable types recursively\"\"\"\n    if obj is None:\n        return None\n    elif isinstance(obj, dict):\n        return {key: convert_to_serializable(value) for key, value in obj.items()}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "visualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\ndef convert_to_serializable(obj):\n    \"\"\"Convert numpy types to JSON serializable types recursively\"\"\"\n    if obj is None:\n        return None\n    elif isinstance(obj, dict):\n        return {key: convert_to_serializable(value) for key, value in obj.items()}\n    elif isinstance(obj, (list, tuple)):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "regression_analyzer",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "regression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\ndef convert_to_serializable(obj):\n    \"\"\"Convert numpy types to JSON serializable types recursively\"\"\"\n    if obj is None:\n        return None\n    elif isinstance(obj, dict):\n        return {key: convert_to_serializable(value) for key, value in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [convert_to_serializable(item) for item in obj]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "interactive_analyzer",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/api/health\")\ndef health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "simple_analyzer",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/api/health\")\ndef health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"\n    return jsonify(\n        {\n            \"status\": \"healthy\",\n            \"service\": \"ganglioside-analyzer-flask\",",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"\n    return jsonify(\n        {\n            \"status\": \"healthy\",\n            \"service\": \"ganglioside-analyzer-flask\",\n            \"version\": \"2.0.0\",\n            \"timestamp\": datetime.now().isoformat(),\n        }\n    )",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def upload_csv():\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        if file.filename == \"\":\n            return jsonify({\"error\": \"파일명이 없습니다.\"}), 400\n        if not file.filename.endswith(\".csv\"):\n            return jsonify(",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "analyze_data",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def analyze_data():\n    \"\"\"데이터 분석 실행\"\"\"\n    try:\n        # 파일 및 설정 가져오기\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"분석할 파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "create_visualizations",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def create_visualizations():\n    \"\"\"시각화 생성\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # 시각화 생성",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "manage_settings",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def manage_settings():\n    \"\"\"설정 관리\"\"\"\n    try:\n        if request.method == \"GET\":\n            # 현재 설정 반환\n            return jsonify(\n                {\n                    \"current_settings\": ganglioside_processor.get_settings(),\n                    \"default_settings\": {\n                        \"outlier_threshold\": 3.0,",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "download_results",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def download_results():\n    \"\"\"분석 결과 다운로드\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # CSV 생성",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "sample_test",
        "kind": 2,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "def sample_test():\n    \"\"\"샘플 데이터 테스트\"\"\"\n    try:\n        test_type = request.form.get(\"test_type\", \"basic\")\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))\n        rt_tolerance = float(request.form.get(\"rt_tolerance\", 0.1))\n        # 샘플 데이터 생성\n        if test_type == \"basic\":",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)  # CORS 설정\n# 설정\napp.config.update(\n    MAX_CONTENT_LENGTH=50 * 1024 * 1024,  # 50MB 최대 파일 크기\n    UPLOAD_FOLDER=\"uploads\",\n    OUTPUT_FOLDER=\"outputs\",\n)\n# 디렉토리 생성\nos.makedirs(app.config[\"UPLOAD_FOLDER\"], exist_ok=True)",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "ganglioside_processor",
        "kind": 5,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "ganglioside_processor = GangliosideProcessor()\nvisualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\n@app.route(\"/\")\ndef index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "visualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\n@app.route(\"/\")\ndef index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "regression_analyzer",
        "kind": 5,
        "importPath": "app_backup",
        "description": "app_backup",
        "peekOfCode": "regression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\n@app.route(\"/\")\ndef index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")",
        "detail": "app_backup",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "app_refactored",
        "description": "app_refactored",
        "peekOfCode": "def create_app():\n    \"\"\"Flask application factory\"\"\"\n    # Flask app initialization\n    app = Flask(\n        __name__,\n        template_folder=\"backend/templates\",\n        static_folder=\"backend/static\"\n    )\n    CORS(app)  # CORS settings\n    # Configuration",
        "detail": "app_refactored",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app_refactored",
        "description": "app_refactored",
        "peekOfCode": "def main():\n    \"\"\"Main execution function\"\"\"\n    app = create_app()\n    print(\"🚀 Starting Ganglioside Analyzer Flask server\")\n    print(\"🌐 Available at http://localhost:5001\")\n    try:\n        app.run(\n            host=\"0.0.0.0\",  # Listen on all interfaces\n            port=5001,       # Use port 5001 (5000 conflicts with AirPlay on macOS)\n            debug=True,      # Enable debug mode",
        "detail": "app_refactored",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "app_refactored_fixed",
        "description": "app_refactored_fixed",
        "peekOfCode": "def create_app() -> Flask:\n    \"\"\"\n    Application factory with dependency injection and improved error handling\n    \"\"\"\n    print(\"🔧 Initializing enhanced analysis services...\")\n    try:\n        # Initialize core services\n        analysis_service = AnalysisService()\n        visualization_service = VisualizationService()\n        print(\"✅ Enhanced services initialized successfully\")",
        "detail": "app_refactored_fixed",
        "documentation": {}
    },
    {
        "label": "test_all_endpoints",
        "kind": 2,
        "importPath": "comprehensive_test",
        "description": "comprehensive_test",
        "peekOfCode": "def test_all_endpoints():\n    \"\"\"Test all web endpoints\"\"\"\n    print(\"🌐 Testing all web endpoints...\")\n    endpoints = [\n        (\"/\", \"Main page (working analyzer)\"),\n        (\"/working\", \"Working analyzer page\"),\n        (\"/simple\", \"Simple analyzer page\"),\n        (\"/integrated\", \"Integrated analyzer page\"),\n        (\"/diagnostic\", \"Diagnostic test page\"),\n        (\"/api/health\", \"Health API endpoint\")",
        "detail": "comprehensive_test",
        "documentation": {}
    },
    {
        "label": "test_full_analysis_workflow",
        "kind": 2,
        "importPath": "comprehensive_test",
        "description": "comprehensive_test",
        "peekOfCode": "def test_full_analysis_workflow():\n    \"\"\"Test complete analysis workflow\"\"\"\n    print(\"\\n🧬 Testing complete analysis workflow...\")\n    # Step 1: Health check\n    print(\"1. Health check...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\")\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"   ✅ Server healthy: {data['status']}\")",
        "detail": "comprehensive_test",
        "documentation": {}
    },
    {
        "label": "test_functionality_summary",
        "kind": 2,
        "importPath": "comprehensive_test",
        "description": "comprehensive_test",
        "peekOfCode": "def test_functionality_summary():\n    \"\"\"Test and report functionality summary\"\"\"\n    print(\"\\n📋 Functionality Summary:\")\n    features = [\n        (\"File upload\", \"✅ Working\"),\n        (\"Settings adjustment\", \"✅ Working\"),\n        (\"Analysis API\", \"✅ Working\"),\n        (\"Visualization API\", \"✅ Working\"),\n        (\"2D regression plots\", \"✅ Working\"),\n        (\"3D distribution plots\", \"✅ Working\"),",
        "detail": "comprehensive_test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "comprehensive_test",
        "description": "comprehensive_test",
        "peekOfCode": "def main():\n    \"\"\"Run comprehensive tests\"\"\"\n    print(\"🧬 LC-MS-MS Analysis Platform - Comprehensive Test Suite\")\n    print(\"=\" * 60)\n    # Test 1: All web endpoints\n    test_all_endpoints()\n    # Test 2: Complete workflow\n    success = test_full_analysis_workflow()\n    # Test 3: Functionality summary\n    test_functionality_summary()",
        "detail": "comprehensive_test",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "comprehensive_test",
        "description": "comprehensive_test",
        "peekOfCode": "BASE_URL = \"http://localhost:5001\"\ndef test_all_endpoints():\n    \"\"\"Test all web endpoints\"\"\"\n    print(\"🌐 Testing all web endpoints...\")\n    endpoints = [\n        (\"/\", \"Main page (working analyzer)\"),\n        (\"/working\", \"Working analyzer page\"),\n        (\"/simple\", \"Simple analyzer page\"),\n        (\"/integrated\", \"Integrated analyzer page\"),\n        (\"/diagnostic\", \"Diagnostic test page\"),",
        "detail": "comprehensive_test",
        "documentation": {}
    },
    {
        "label": "create_working_regression_fix",
        "kind": 2,
        "importPath": "create_working_regression",
        "description": "create_working_regression",
        "peekOfCode": "def create_working_regression_fix():\n    print(\"🔧 Creating Working Regression Fix\")\n    print(\"=\" * 40)\n    # Read the test data to understand what we're working with\n    import pandas as pd\n    df = pd.read_csv(\"data/sample/testwork.csv\")\n    print(f\"📊 Test data: {len(df)} compounds\")\n    # Show the actual data\n    print(\"\\n📋 Compound Data:\")\n    for _, row in df.iterrows():",
        "detail": "create_working_regression",
        "documentation": {}
    },
    {
        "label": "debug_regression_structure",
        "kind": 2,
        "importPath": "debug_regression_structure",
        "description": "debug_regression_structure",
        "peekOfCode": "def debug_regression_structure():\n    print(\"🔍 DEBUGGING REGRESSION ANALYSIS STRUCTURE\")\n    print(\"=\" * 50)\n    base_url = \"http://localhost:5001\"\n    # Run analysis and examine detailed structure\n    print(\"1. Running analysis with detailed structure inspection...\")\n    try:\n        with open(\"data/sample/testwork.csv\", \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {",
        "detail": "debug_regression_structure",
        "documentation": {}
    },
    {
        "label": "debug_visualization",
        "kind": 2,
        "importPath": "debug_visualization_detailed",
        "description": "debug_visualization_detailed",
        "peekOfCode": "def debug_visualization():\n    print(\"🔍 DETAILED VISUALIZATION DIAGNOSIS\")\n    print(\"=\" * 50)\n    base_url = \"http://localhost:5001\"\n    # Step 1: Run analysis\n    print(\"1. Running analysis...\")\n    try:\n        with open(\"data/sample/testwork.csv\", \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {",
        "detail": "debug_visualization_detailed",
        "documentation": {}
    },
    {
        "label": "debug_visualization_structure",
        "kind": 2,
        "importPath": "debug_viz_structure",
        "description": "debug_viz_structure",
        "peekOfCode": "def debug_visualization_structure():\n    print(\"🔍 Debugging Visualization Data Structure\")\n    print(\"=\" * 50)\n    # Run analysis\n    with open(\"data/sample/testwork.csv\", \"rb\") as f:\n        files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n        data = {\n            \"data_type\": \"Porcine\",\n            \"outlier_threshold\": 2.5,\n            \"r2_threshold\": 0.75,",
        "detail": "debug_viz_structure",
        "documentation": {}
    },
    {
        "label": "quick_test",
        "kind": 2,
        "importPath": "quick_test_fix",
        "description": "quick_test_fix",
        "peekOfCode": "def quick_test():\n    print(\"🧬 Quick Test - Fixed Regression Analysis\")\n    print(\"=\" * 45)\n    # Load data\n    df = pd.read_csv(\"data/sample/testwork.csv\")\n    print(f\"📄 Loaded: {len(df)} compounds\")\n    # Test processor\n    processor = GangliosideProcessor()\n    print(\"🔍 Settings:\")\n    settings = processor.get_settings()",
        "detail": "quick_test_fix",
        "documentation": {}
    },
    {
        "label": "test_analysis_api",
        "kind": 2,
        "importPath": "test_api_fix",
        "description": "test_api_fix",
        "peekOfCode": "def test_analysis_api():\n    print(\"🧪 Testing Fixed Analysis API\")\n    print(\"=\" * 30)\n    # Test health\n    print(\"1. Health check...\")\n    health = requests.get(\"http://localhost:5001/api/health\")\n    print(f\"   Status: {health.status_code}\")\n    # Test analysis with real file\n    print(\"2. Analysis test...\")\n    with open(\"data/sample/testwork.csv\", \"rb\") as f:",
        "detail": "test_api_fix",
        "documentation": {}
    },
    {
        "label": "test_complete_pipeline",
        "kind": 2,
        "importPath": "test_complete_pipeline",
        "description": "test_complete_pipeline",
        "peekOfCode": "def test_complete_pipeline():\n    print(\"🎯 Testing Complete Analysis & Visualization Pipeline\")\n    print(\"=\" * 55)\n    # Use the running server on port 5001\n    base_url = \"http://localhost:5001\"\n    # Step 1: Test health\n    print(\"1. Health check...\")\n    try:\n        health = requests.get(f\"{base_url}/api/health\")\n        print(f\"   Status: {health.status_code}\")",
        "detail": "test_complete_pipeline",
        "documentation": {}
    },
    {
        "label": "test_fixed_processor",
        "kind": 2,
        "importPath": "test_fixed_regression",
        "description": "test_fixed_regression",
        "peekOfCode": "def test_fixed_processor():\n    \"\"\"Test the fixed processor with sample data\"\"\"\n    print(\"🧬 Testing Fixed Ganglioside Processor\")\n    print(\"=\" * 50)\n    # Initialize fixed processor\n    processor = GangliosideProcessorFixed()\n    # Load sample data\n    try:\n        df = pd.read_csv(\"data/sample/testwork.csv\")\n        print(f\"📄 Loaded sample data: {len(df)} compounds\")",
        "detail": "test_fixed_regression",
        "documentation": {}
    },
    {
        "label": "test_analysis_service",
        "kind": 2,
        "importPath": "test_fixed_regression",
        "description": "test_fixed_regression",
        "peekOfCode": "def test_analysis_service():\n    \"\"\"Test the enhanced analysis service\"\"\"\n    print(\"\\n🚀 Testing Enhanced Analysis Service\")\n    print(\"=\" * 50)\n    try:\n        # Initialize analysis service\n        analysis_service = AnalysisService()\n        # Load sample data\n        df = pd.read_csv(\"data/sample/testwork.csv\")\n        # Test comprehensive analysis",
        "detail": "test_fixed_regression",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_fixed_regression",
        "description": "test_fixed_regression",
        "peekOfCode": "def main():\n    \"\"\"Main test runner\"\"\"\n    print(\"🧬 LC-MS-MS Fixed Regression Analysis Test\")\n    print(\"Testing improved algorithms and realistic thresholds\")\n    print(\"=\" * 60)\n    success_count = 0\n    # Test 1: Fixed processor\n    if test_fixed_processor():\n        success_count += 1\n    # Test 2: Analysis service",
        "detail": "test_fixed_regression",
        "documentation": {}
    },
    {
        "label": "test_health",
        "kind": 2,
        "importPath": "test_functionality",
        "description": "test_functionality",
        "peekOfCode": "def test_health():\n    \"\"\"Test health endpoint\"\"\"\n    print(\"🔌 Testing health endpoint...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\")\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"✅ Health check passed: {data['status']}\")\n            return True\n        else:",
        "detail": "test_functionality",
        "documentation": {}
    },
    {
        "label": "test_analysis",
        "kind": 2,
        "importPath": "test_functionality",
        "description": "test_functionality",
        "peekOfCode": "def test_analysis():\n    \"\"\"Test analysis endpoint with sample file\"\"\"\n    print(\"🚀 Testing analysis endpoint...\")\n    try:\n        # Read sample CSV file\n        with open(\"data/sample/testwork.csv\", \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {\n                \"data_type\": \"Porcine\",\n                \"outlier_threshold\": 3.0,",
        "detail": "test_functionality",
        "documentation": {}
    },
    {
        "label": "test_visualization",
        "kind": 2,
        "importPath": "test_functionality",
        "description": "test_functionality",
        "peekOfCode": "def test_visualization(results):\n    \"\"\"Test visualization endpoint\"\"\"\n    print(\"📊 Testing visualization endpoint...\")\n    try:\n        payload = {\"results\": results}\n        response = requests.post(\n            f\"{BASE_URL}/api/visualize\",\n            headers={\"Content-Type\": \"application/json\"},\n            data=json.dumps(payload)\n        )",
        "detail": "test_functionality",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_functionality",
        "description": "test_functionality",
        "peekOfCode": "def main():\n    \"\"\"Run all tests\"\"\"\n    print(\"🧬 Starting LC-MS-MS API functionality tests...\\n\")\n    # Test 1: Health check\n    if not test_health():\n        print(\"\\n❌ Health check failed - aborting tests\")\n        sys.exit(1)\n    print()\n    # Test 2: Analysis\n    results = test_analysis()",
        "detail": "test_functionality",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "test_functionality",
        "description": "test_functionality",
        "peekOfCode": "BASE_URL = \"http://localhost:5001\"\ndef test_health():\n    \"\"\"Test health endpoint\"\"\"\n    print(\"🔌 Testing health endpoint...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\")\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"✅ Health check passed: {data['status']}\")\n            return True",
        "detail": "test_functionality",
        "documentation": {}
    },
    {
        "label": "test_complete_workflow",
        "kind": 2,
        "importPath": "test_tabs_functionality",
        "description": "test_tabs_functionality",
        "peekOfCode": "def test_complete_workflow():\n    print(\"🧪 TESTING COMPLETE TAB FUNCTIONALITY\")\n    print(\"=\" * 60)\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    # Step 1: Run the analysis\n    print(\"1. 🚀 Running analysis...\")\n    try:\n        with open(test_file, \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}",
        "detail": "test_tabs_functionality",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_tabs_functionality",
        "description": "test_tabs_functionality",
        "peekOfCode": "def main():\n    print(\"🔧 TAB FUNCTIONALITY TEST\")\n    print(\"This test verifies the backend generates proper visualizations\")\n    print(\"Manual steps required:\")\n    print(\"1. Open http://localhost:5001/working in your browser\")\n    print(\"2. Upload testwork_user.csv\")\n    print(\"3. Click 'Start Analysis'\")\n    print(\"4. Click 'Generate Visualizations'\")\n    print(\"5. Test switching between tabs:\")\n    print(\"   - Combined View (should work)\")",
        "detail": "test_tabs_functionality",
        "documentation": {}
    },
    {
        "label": "test_user_data_complete",
        "kind": 2,
        "importPath": "test_user_data_complete",
        "description": "test_user_data_complete",
        "peekOfCode": "def test_user_data_complete():\n    print(\"🧪 COMPREHENSIVE TEST - USER'S ACTUAL DATA\")\n    print(\"=\" * 60)\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    # Step 1: Analyze the data first\n    print(\"1. 📊 Analyzing user's test data...\")\n    try:\n        df = pd.read_csv(test_file)\n        total_compounds = len(df)",
        "detail": "test_user_data_complete",
        "documentation": {}
    },
    {
        "label": "test_visualization_strict",
        "kind": 2,
        "importPath": "test_user_data_complete",
        "description": "test_user_data_complete",
        "peekOfCode": "def test_visualization_strict(analysis_result):\n    \"\"\"Strict test of visualization with user's data\"\"\"\n    print(\"\\n4. 📊 STRICT VISUALIZATION TEST\")\n    print(\"-\" * 40)\n    base_url = \"http://localhost:5001\"\n    try:\n        # Extract analysis results for visualization\n        analysis_data = analysis_result['results']\n        viz_payload = {\"results\": analysis_data}\n        viz_response = requests.post(",
        "detail": "test_user_data_complete",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_user_data_complete",
        "description": "test_user_data_complete",
        "peekOfCode": "def main():\n    print(\"🚀 STARTING COMPREHENSIVE VISUALIZATION TEST\")\n    print(\"📁 Using user's actual file: testwork_user.csv\")\n    print(\"🎯 Testing complete pipeline with REAL DATA\")\n    # Run analysis\n    analysis_result = test_user_data_complete()\n    if not analysis_result:\n        print(\"\\n❌ ANALYSIS FAILED - Cannot continue to visualization test\")\n        return False\n    # Run strict visualization test",
        "detail": "test_user_data_complete",
        "documentation": {}
    },
    {
        "label": "test_visualization",
        "kind": 2,
        "importPath": "test_visualization",
        "description": "test_visualization",
        "peekOfCode": "def test_visualization():\n    print(\"📊 Testing Visualization Pipeline\")\n    print(\"=\" * 40)\n    # Step 1: Run analysis to get results\n    print(\"1. Running analysis...\")\n    with open(\"data/sample/testwork.csv\", \"rb\") as f:\n        files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n        data = {\n            \"data_type\": \"Porcine\",\n            \"outlier_threshold\": 2.5,",
        "detail": "test_visualization",
        "documentation": {}
    }
]