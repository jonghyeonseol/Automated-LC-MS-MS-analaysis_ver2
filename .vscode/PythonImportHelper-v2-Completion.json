[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LeaveOneOut",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LeaveOneOut",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cross_val_score",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "default_storage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Ridge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "RidgeCV",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "apps.core.models",
        "description": "apps.core.models",
        "isExtraImport": true,
        "detail": "apps.core.models",
        "documentation": {}
    },
    {
        "label": "SoftDeleteModel",
        "importPath": "apps.core.models",
        "description": "apps.core.models",
        "isExtraImport": true,
        "detail": "apps.core.models",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "get_task_logger",
        "importPath": "celery.utils.log",
        "description": "celery.utils.log",
        "isExtraImport": true,
        "detail": "celery.utils.log",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "importPath": "apps.analysis.routing",
        "description": "apps.analysis.routing",
        "isExtraImport": true,
        "detail": "apps.analysis.routing",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularRedocView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularSwaggerView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "AnalysisSession",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "Compound",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisSession",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisSession",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisSession",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisSession",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "Compound",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisSession",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "Compound",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisSession",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "Compound",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "RegressionModel",
        "importPath": "apps.analysis.models",
        "description": "apps.analysis.models",
        "isExtraImport": true,
        "detail": "apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "importPath": "apps.analysis.services.analysis_service",
        "description": "apps.analysis.services.analysis_service",
        "isExtraImport": true,
        "detail": "apps.analysis.services.analysis_service",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "importPath": "apps.analysis.services.analysis_service",
        "description": "apps.analysis.services.analysis_service",
        "isExtraImport": true,
        "detail": "apps.analysis.services.analysis_service",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "run_analysis_async",
        "importPath": "apps.analysis.tasks",
        "description": "apps.analysis.tasks",
        "isExtraImport": true,
        "detail": "apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "cleanup_old_sessions",
        "importPath": "apps.analysis.tasks",
        "description": "apps.analysis.tasks",
        "isExtraImport": true,
        "detail": "apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "send_analysis_complete_notification",
        "importPath": "apps.analysis.tasks",
        "description": "apps.analysis.tasks",
        "isExtraImport": true,
        "detail": "apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorV2",
        "importPath": "apps.analysis.services.ganglioside_processor_v2",
        "description": "apps.analysis.services.ganglioside_processor_v2",
        "isExtraImport": true,
        "detail": "apps.analysis.services.ganglioside_processor_v2",
        "documentation": {}
    },
    {
        "label": "ImprovedRegressionModel",
        "importPath": "apps.analysis.services.improved_regression",
        "description": "apps.analysis.services.improved_regression",
        "isExtraImport": true,
        "detail": "apps.analysis.services.improved_regression",
        "documentation": {}
    },
    {
        "label": "ImprovedRegressionModel",
        "importPath": "apps.analysis.services.improved_regression",
        "description": "apps.analysis.services.improved_regression",
        "isExtraImport": true,
        "detail": "apps.analysis.services.improved_regression",
        "documentation": {}
    },
    {
        "label": "ImprovedRegressionModel",
        "importPath": "apps.analysis.services.improved_regression",
        "description": "apps.analysis.services.improved_regression",
        "isExtraImport": true,
        "detail": "apps.analysis.services.improved_regression",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "make_subplots",
        "importPath": "plotly.subplots",
        "description": "plotly.subplots",
        "isExtraImport": true,
        "detail": "plotly.subplots",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "importPath": "src.utils.ganglioside_categorizer",
        "description": "src.utils.ganglioside_categorizer",
        "isExtraImport": true,
        "detail": "src.utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "importPath": "services.ganglioside_processor",
        "description": "services.ganglioside_processor",
        "isExtraImport": true,
        "detail": "services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "RegressionAnalyzer",
        "importPath": "services.regression_analyzer",
        "description": "services.regression_analyzer",
        "isExtraImport": true,
        "detail": "services.regression_analyzer",
        "documentation": {}
    },
    {
        "label": "VisualizationService",
        "importPath": "services.visualization_service",
        "description": "services.visualization_service",
        "isExtraImport": true,
        "detail": "services.visualization_service",
        "documentation": {}
    },
    {
        "label": "analysis_bp",
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "isExtraImport": true,
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "init_services",
        "importPath": "backend.api.routes.analysis",
        "description": "backend.api.routes.analysis",
        "isExtraImport": true,
        "detail": "backend.api.routes.analysis",
        "documentation": {}
    },
    {
        "label": "visualization_bp",
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "isExtraImport": true,
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "init_visualization_service",
        "importPath": "backend.api.routes.visualization",
        "description": "backend.api.routes.visualization",
        "isExtraImport": true,
        "detail": "backend.api.routes.visualization",
        "documentation": {}
    },
    {
        "label": "settings_bp",
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "isExtraImport": true,
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "init_processor_service",
        "importPath": "backend.api.routes.settings",
        "description": "backend.api.routes.settings",
        "isExtraImport": true,
        "detail": "backend.api.routes.settings",
        "documentation": {}
    },
    {
        "label": "web_bp",
        "importPath": "backend.api.routes.web",
        "description": "backend.api.routes.web",
        "isExtraImport": true,
        "detail": "backend.api.routes.web",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "importPath": "backend.services.ganglioside_processor",
        "description": "backend.services.ganglioside_processor",
        "isExtraImport": true,
        "detail": "backend.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "importPath": "utils.ganglioside_categorizer",
        "description": "utils.ganglioside_categorizer",
        "isExtraImport": true,
        "detail": "utils.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "importPath": "src.services.ganglioside_processor",
        "description": "src.services.ganglioside_processor",
        "isExtraImport": true,
        "detail": "src.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorFixed",
        "importPath": "backend.services.ganglioside_processor_fixed",
        "description": "backend.services.ganglioside_processor_fixed",
        "isExtraImport": true,
        "detail": "backend.services.ganglioside_processor_fixed",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "importPath": "backend.core.analysis_service",
        "description": "backend.core.analysis_service",
        "isExtraImport": true,
        "detail": "backend.core.analysis_service",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.migrations.0001_initial",
        "description": "django_ganglioside.apps.analysis.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"AnalysisSession\",\n            fields=[\n                (",
        "detail": "django_ganglioside.apps.analysis.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ValidationMetrics",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "description": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "peekOfCode": "class ValidationMetrics:\n    \"\"\"Container for validation metrics\"\"\"\n    # Regression metrics\n    r2_train: float\n    r2_test: float\n    rmse_train: float\n    rmse_test: float\n    mae_train: float\n    mae_test: float\n    # Classification metrics (valid vs outlier)",
        "detail": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "documentation": {}
    },
    {
        "label": "AlgorithmValidator",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "description": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "peekOfCode": "class AlgorithmValidator:\n    \"\"\"\n    Validates ganglioside analysis algorithm performance\n    Features:\n    - Cross-validation with multiple folds\n    - Leave-one-out validation for small datasets\n    - Train/test split validation\n    - Performance metrics calculation\n    - Overfitting detection\n    - Anchor compound learning effectiveness",
        "detail": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "description": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@dataclass\nclass ValidationMetrics:\n    \"\"\"Container for validation metrics\"\"\"\n    # Regression metrics\n    r2_train: float\n    r2_test: float\n    rmse_train: float\n    rmse_test: float\n    mae_train: float",
        "detail": "django_ganglioside.apps.analysis.services.algorithm_validator",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.analysis_service",
        "description": "django_ganglioside.apps.analysis.services.analysis_service",
        "peekOfCode": "class AnalysisService:\n    \"\"\"\n    Service class for running ganglioside analysis and persisting results\n    \"\"\"\n    def __init__(self, use_v2: bool = True):\n        \"\"\"\n        Initialize Analysis Service\n        Args:\n            use_v2: Use improved V2 processor (default: True, recommended)\n        \"\"\"",
        "detail": "django_ganglioside.apps.analysis.services.analysis_service",
        "documentation": {}
    },
    {
        "label": "convert_to_json_serializable",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.services.analysis_service",
        "description": "django_ganglioside.apps.analysis.services.analysis_service",
        "peekOfCode": "def convert_to_json_serializable(obj):\n    \"\"\"\n    Recursively convert NumPy types to Python native types for JSON serialization\n    Args:\n        obj: Object to convert (dict, list, or value)\n    Returns:\n        JSON-serializable object\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: convert_to_json_serializable(v) for k, v in obj.items()}",
        "detail": "django_ganglioside.apps.analysis.services.analysis_service",
        "documentation": {}
    },
    {
        "label": "ExportService",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.export_service",
        "description": "django_ganglioside.apps.analysis.services.export_service",
        "peekOfCode": "class ExportService:\n    \"\"\"\n    Service for exporting analysis results\n    \"\"\"\n    def export_session(self, session: AnalysisSession, export_format: str = 'csv'):\n        \"\"\"\n        Export session results\n        Args:\n            session: AnalysisSession instance\n            export_format: 'csv', 'json', or 'excel'",
        "detail": "django_ganglioside.apps.analysis.services.export_service",
        "documentation": {}
    },
    {
        "label": "GangliosideCategorizer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "description": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "peekOfCode": "class GangliosideCategorizer:\n    \"\"\"\n    Categorizes gangliosides based on their prefix patterns for better visualization grouping.\n    Examples:\n    - GD1(34:1;O2) → Base: GD1, Category: GD (disialo)\n    - GD1+dHex(36:1;O2) → Base: GD1, Category: GD (disialo), Modified: dHex\n    - GM3+OAc(18:1;O2) → Base: GM3, Category: GM (monosialo), Modified: OAc\n    \"\"\"\n    def __init__(self):\n        # Define ganglioside categories based on sialic acid content",
        "detail": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "test_categorizer",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "description": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "peekOfCode": "def test_categorizer():\n    \"\"\"Test function for the categorizer\"\"\"\n    import pandas as pd\n    # Sample data\n    test_data = {\n        'Name': [\n            'GD1(34:1;O2)',\n            'GD1+dHex(36:1;O2)',\n            'GM3+OAc(18:1;O2)',\n            'GT1(40:1;O2)',",
        "detail": "django_ganglioside.apps.analysis.services.ganglioside_categorizer",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessor",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.ganglioside_processor",
        "description": "django_ganglioside.apps.analysis.services.ganglioside_processor",
        "peekOfCode": "class GangliosideProcessor:\n    def __init__(self):\n        # Fixed thresholds for realistic chemical data analysis\n        self.r2_threshold = 0.75  # Lowered from 0.99 to realistic value\n        self.outlier_threshold = 2.5  # Lowered from 3.0 for better sensitivity\n        self.rt_tolerance = 0.1\n        # Initialize categorizer\n        self.categorizer = GangliosideCategorizer()\n        print(\"🧬 Ganglioside Processor 초기화 완료 (Fixed Version with Categorization)\")\n    def update_settings(",
        "detail": "django_ganglioside.apps.analysis.services.ganglioside_processor",
        "documentation": {}
    },
    {
        "label": "GangliosideProcessorV2",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.ganglioside_processor_v2",
        "description": "django_ganglioside.apps.analysis.services.ganglioside_processor_v2",
        "peekOfCode": "class GangliosideProcessorV2:\n    \"\"\"\n    Improved Ganglioside Processor with better regression handling and validation.\n    Major improvements:\n    - Uses ImprovedRegressionModel to prevent overfitting\n    - Proper feature selection and cross-validation\n    - Comprehensive data validation\n    - English-only logging and documentation\n    - Better error handling\n    \"\"\"",
        "detail": "django_ganglioside.apps.analysis.services.ganglioside_processor_v2",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.services.ganglioside_processor_v2",
        "description": "django_ganglioside.apps.analysis.services.ganglioside_processor_v2",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GangliosideProcessorV2:\n    \"\"\"\n    Improved Ganglioside Processor with better regression handling and validation.\n    Major improvements:\n    - Uses ImprovedRegressionModel to prevent overfitting\n    - Proper feature selection and cross-validation\n    - Comprehensive data validation\n    - English-only logging and documentation\n    - Better error handling",
        "detail": "django_ganglioside.apps.analysis.services.ganglioside_processor_v2",
        "documentation": {}
    },
    {
        "label": "ImprovedRegressionModel",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.improved_regression",
        "description": "django_ganglioside.apps.analysis.services.improved_regression",
        "peekOfCode": "class ImprovedRegressionModel:\n    \"\"\"\n    Improved regression model that addresses overfitting issues:\n    - Uses minimal, meaningful features\n    - Implements cross-validation even for small samples\n    - Uses regularization to prevent overfitting\n    - Provides realistic R² thresholds\n    \"\"\"\n    def __init__(\n        self,",
        "detail": "django_ganglioside.apps.analysis.services.improved_regression",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.services.improved_regression",
        "description": "django_ganglioside.apps.analysis.services.improved_regression",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ImprovedRegressionModel:\n    \"\"\"\n    Improved regression model that addresses overfitting issues:\n    - Uses minimal, meaningful features\n    - Implements cross-validation even for small samples\n    - Uses regularization to prevent overfitting\n    - Provides realistic R² thresholds\n    \"\"\"\n    def __init__(",
        "detail": "django_ganglioside.apps.analysis.services.improved_regression",
        "documentation": {}
    },
    {
        "label": "ProcessorMigrationHelper",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "description": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "peekOfCode": "class ProcessorMigrationHelper:\n    \"\"\"Helper class to migrate from V1 to V2 processor\"\"\"\n    @staticmethod\n    def compare_results(v1_results: Dict, v2_results: Dict) -> Dict[str, Any]:\n        \"\"\"\n        Compare results from V1 and V2 processors.\n        Args:\n            v1_results: Results from original processor\n            v2_results: Results from improved processor\n        Returns:",
        "detail": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "documentation": {}
    },
    {
        "label": "BackwardCompatibleProcessor",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "description": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "peekOfCode": "class BackwardCompatibleProcessor:\n    \"\"\"\n    Wrapper that provides backward compatibility while using V2 internally.\n    Allows gradual migration without breaking existing code.\n    \"\"\"\n    def __init__(self, use_v2: bool = True, log_comparison: bool = False):\n        \"\"\"\n        Initialize backward compatible processor.\n        Args:\n            use_v2: Whether to use V2 processor (True) or V1 (False)",
        "detail": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "description": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "peekOfCode": "class Command:\n    \"\"\"Django management command for migration\"\"\"\n    help = 'Migrate from GangliosideProcessor V1 to V2'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--test-file',\n            type=str,\n            help='CSV file to test migration'\n        )\n        parser.add_argument(",
        "detail": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "documentation": {}
    },
    {
        "label": "run_migration_test",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "description": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "peekOfCode": "def run_migration_test(csv_path: str) -> Dict[str, Any]:\n    \"\"\"\n    Test migration by running both processors and comparing results.\n    Args:\n        csv_path: Path to test CSV file\n    Returns:\n        Comparison results\n    \"\"\"\n    import pandas as pd\n    logger.info(f\"Running migration test on {csv_path}\")",
        "detail": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "description": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ProcessorMigrationHelper:\n    \"\"\"Helper class to migrate from V1 to V2 processor\"\"\"\n    @staticmethod\n    def compare_results(v1_results: Dict, v2_results: Dict) -> Dict[str, Any]:\n        \"\"\"\n        Compare results from V1 and V2 processors.\n        Args:\n            v1_results: Results from original processor\n            v2_results: Results from improved processor",
        "detail": "django_ganglioside.apps.analysis.services.migrate_to_v2",
        "documentation": {}
    },
    {
        "label": "RegressionAnalyzer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.services.regression_analyzer",
        "description": "django_ganglioside.apps.analysis.services.regression_analyzer",
        "peekOfCode": "class RegressionAnalyzer:\n    def __init__(self):\n        self.r2_threshold = 0.99\n        self.outlier_threshold = 3.0\n        self.confidence_level = 0.95\n        print(\"📈 Regression Analyzer 초기화 완료\")\n    def perform_comprehensive_regression(\n        self, x_data: np.ndarray, y_data: np.ndarray, compound_names: List[str] = None\n    ) -> Dict[str, Any]:\n        \"\"\"",
        "detail": "django_ganglioside.apps.analysis.services.regression_analyzer",
        "documentation": {}
    },
    {
        "label": "AnalysisSessionAdmin",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.admin",
        "description": "django_ganglioside.apps.analysis.admin",
        "peekOfCode": "class AnalysisSessionAdmin(admin.ModelAdmin):\n    list_display = [\n        'id', 'user', 'colored_status', 'data_type', 'success_rate_display',\n        'duration_display', 'created_at'\n    ]\n    list_filter = ['status', 'data_type', 'created_at']\n    search_fields = ['name', 'user__username', 'original_filename']\n    readonly_fields = [\n        'created_at', 'updated_at', 'started_at', 'completed_at',\n        'celery_task_id', 'file_size'",
        "detail": "django_ganglioside.apps.analysis.admin",
        "documentation": {}
    },
    {
        "label": "AnalysisResultAdmin",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.admin",
        "description": "django_ganglioside.apps.analysis.admin",
        "peekOfCode": "class AnalysisResultAdmin(admin.ModelAdmin):\n    list_display = [\n        'id', 'session', 'total_compounds', 'valid_compounds',\n        'outlier_count', 'success_rate_percent', 'created_at'\n    ]\n    list_filter = ['created_at']\n    search_fields = ['session__name', 'session__user__username']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('Session', {",
        "detail": "django_ganglioside.apps.analysis.admin",
        "documentation": {}
    },
    {
        "label": "CompoundAdmin",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.admin",
        "description": "django_ganglioside.apps.analysis.admin",
        "peekOfCode": "class CompoundAdmin(admin.ModelAdmin):\n    list_display = [\n        'name', 'session', 'colored_status', 'category', 'rt',\n        'log_p', 'is_anchor', 'sugar_count'\n    ]\n    list_filter = ['status', 'category', 'is_anchor', 'session__data_type']\n    search_fields = ['name', 'prefix', 'session__name']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('Basic Info', {",
        "detail": "django_ganglioside.apps.analysis.admin",
        "documentation": {}
    },
    {
        "label": "RegressionModelAdmin",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.admin",
        "description": "django_ganglioside.apps.analysis.admin",
        "peekOfCode": "class RegressionModelAdmin(admin.ModelAdmin):\n    list_display = [\n        'prefix_group', 'session', 'model_type', 'r2_display',\n        'n_samples', 'n_anchors', 'created_at'\n    ]\n    list_filter = ['model_type', 'created_at']\n    search_fields = ['prefix_group', 'session__name']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('Model Info', {",
        "detail": "django_ganglioside.apps.analysis.admin",
        "documentation": {}
    },
    {
        "label": "AnalysisConfig",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.apps",
        "description": "django_ganglioside.apps.analysis.apps",
        "peekOfCode": "class AnalysisConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.analysis'\n    verbose_name = 'Analysis'",
        "detail": "django_ganglioside.apps.analysis.apps",
        "documentation": {}
    },
    {
        "label": "AnalysisProgressConsumer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.consumers",
        "description": "django_ganglioside.apps.analysis.consumers",
        "peekOfCode": "class AnalysisProgressConsumer(AsyncWebsocketConsumer):\n    \"\"\"\n    WebSocket consumer for analysis progress updates.\n    Handles real-time progress notifications during analysis operations.\n    Clients connect to ws://host/ws/analysis/<session_id>/ to receive updates.\n    \"\"\"\n    async def connect(self):\n        \"\"\"\n        Handle WebSocket connection.\n        Adds the client to the session-specific room group.",
        "detail": "django_ganglioside.apps.analysis.consumers",
        "documentation": {}
    },
    {
        "label": "AnalysisSession",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "class AnalysisSession(TimeStampedModel, SoftDeleteModel):\n    \"\"\"\n    Analysis session - represents a complete analysis run\n    \"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('uploading', 'Uploading'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),\n        ('failed', 'Failed'),",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "class AnalysisResult(TimeStampedModel):\n    \"\"\"\n    Analysis results - stores aggregated analysis output\n    \"\"\"\n    session = models.OneToOneField(\n        AnalysisSession,\n        on_delete=models.CASCADE,\n        related_name='result'\n    )\n    # Statistics",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "Compound",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "class Compound(TimeStampedModel):\n    \"\"\"\n    Individual compound data and classification\n    \"\"\"\n    STATUS_CHOICES = [\n        ('valid', 'Valid'),\n        ('outlier', 'Outlier'),\n        ('fragment', 'Fragment'),\n    ]\n    CATEGORY_CHOICES = [",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "RegressionModel",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "class RegressionModel(TimeStampedModel):\n    \"\"\"\n    Stores regression model details for each prefix group\n    \"\"\"\n    session = models.ForeignKey(\n        AnalysisSession,\n        on_delete=models.CASCADE,\n        related_name='regression_models'\n    )\n    # Model identification",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.models",
        "description": "django_ganglioside.apps.analysis.models",
        "peekOfCode": "User = get_user_model()\nclass AnalysisSession(TimeStampedModel, SoftDeleteModel):\n    \"\"\"\n    Analysis session - represents a complete analysis run\n    \"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('uploading', 'Uploading'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),",
        "detail": "django_ganglioside.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.routing",
        "description": "django_ganglioside.apps.analysis.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    re_path(r'ws/analysis/(?P<session_id>\\d+)/$', consumers.AnalysisProgressConsumer.as_asgi()),\n]",
        "detail": "django_ganglioside.apps.analysis.routing",
        "documentation": {}
    },
    {
        "label": "RegressionModelSerializer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.serializers",
        "description": "django_ganglioside.apps.analysis.serializers",
        "peekOfCode": "class RegressionModelSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for RegressionModel\"\"\"\n    class Meta:\n        model = RegressionModel\n        fields = [\n            'id', 'prefix_group', 'model_type', 'intercept', 'coefficients',\n            'feature_names', 'regularization_alpha', 'r2', 'adjusted_r2',\n            'rmse', 'durbin_watson', 'n_samples', 'n_anchors', 'equation',\n            'created_at'\n        ]",
        "detail": "django_ganglioside.apps.analysis.serializers",
        "documentation": {}
    },
    {
        "label": "CompoundSerializer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.serializers",
        "description": "django_ganglioside.apps.analysis.serializers",
        "peekOfCode": "class CompoundSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for Compound - detailed view\"\"\"\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    category_display = serializers.CharField(source='get_category_display', read_only=True)\n    class Meta:\n        model = Compound\n        fields = [\n            'id', 'name', 'rt', 'volume', 'log_p', 'is_anchor',\n            'prefix', 'suffix', 'a_component', 'b_component', 'c_component',\n            'sugar_count', 'sialic_acid_count', 'can_have_isomers', 'isomer_type',",
        "detail": "django_ganglioside.apps.analysis.serializers",
        "documentation": {}
    },
    {
        "label": "CompoundListSerializer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.serializers",
        "description": "django_ganglioside.apps.analysis.serializers",
        "peekOfCode": "class CompoundListSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for Compound - list view (minimal fields)\"\"\"\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    category_display = serializers.CharField(source='get_category_display', read_only=True)\n    class Meta:\n        model = Compound\n        fields = [\n            'id', 'name', 'rt', 'volume', 'status', 'status_display',\n            'category', 'category_display', 'predicted_rt', 'residual'\n        ]",
        "detail": "django_ganglioside.apps.analysis.serializers",
        "documentation": {}
    },
    {
        "label": "AnalysisResultSerializer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.serializers",
        "description": "django_ganglioside.apps.analysis.serializers",
        "peekOfCode": "class AnalysisResultSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for AnalysisResult\"\"\"\n    class Meta:\n        model = AnalysisResult\n        fields = [\n            'id', 'total_compounds', 'anchor_compounds', 'valid_compounds',\n            'outlier_count', 'success_rate', 'regression_analysis',\n            'regression_quality', 'sugar_analysis', 'oacetylation_analysis',\n            'rt_filtering_summary', 'categorization', 'rule1_valid',\n            'rule1_outliers', 'rule4_valid', 'rule4_invalid', 'rule5_fragments',",
        "detail": "django_ganglioside.apps.analysis.serializers",
        "documentation": {}
    },
    {
        "label": "AnalysisSessionSerializer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.serializers",
        "description": "django_ganglioside.apps.analysis.serializers",
        "peekOfCode": "class AnalysisSessionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for AnalysisSession - detailed view with results\"\"\"\n    result = AnalysisResultSerializer(read_only=True)\n    compounds = CompoundListSerializer(many=True, read_only=True)\n    regression_models = RegressionModelSerializer(many=True, read_only=True)\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    data_type_display = serializers.CharField(source='get_data_type_display', read_only=True)\n    duration_seconds = serializers.FloatField(source='duration', read_only=True)\n    class Meta:\n        model = AnalysisSession",
        "detail": "django_ganglioside.apps.analysis.serializers",
        "documentation": {}
    },
    {
        "label": "AnalysisSessionListSerializer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.serializers",
        "description": "django_ganglioside.apps.analysis.serializers",
        "peekOfCode": "class AnalysisSessionListSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for AnalysisSession - list view (minimal fields)\"\"\"\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    data_type_display = serializers.CharField(source='get_data_type_display', read_only=True)\n    duration_seconds = serializers.FloatField(source='duration', read_only=True)\n    # Include basic statistics from result\n    total_compounds = serializers.IntegerField(source='result.total_compounds', read_only=True)\n    success_rate = serializers.FloatField(source='result.success_rate', read_only=True)\n    class Meta:\n        model = AnalysisSession",
        "detail": "django_ganglioside.apps.analysis.serializers",
        "documentation": {}
    },
    {
        "label": "AnalysisSessionCreateSerializer",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.serializers",
        "description": "django_ganglioside.apps.analysis.serializers",
        "peekOfCode": "class AnalysisSessionCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for creating a new AnalysisSession\"\"\"\n    uploaded_file = serializers.FileField()\n    class Meta:\n        model = AnalysisSession\n        fields = [\n            'name', 'data_type', 'uploaded_file', 'r2_threshold',\n            'outlier_threshold', 'rt_tolerance'\n        ]\n    def validate_uploaded_file(self, value):",
        "detail": "django_ganglioside.apps.analysis.serializers",
        "documentation": {}
    },
    {
        "label": "run_analysis_async",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.tasks",
        "description": "django_ganglioside.apps.analysis.tasks",
        "peekOfCode": "def run_analysis_async(self, session_id):\n    \"\"\"\n    Run ganglioside analysis asynchronously in background.\n    Args:\n        self: Celery task instance (bound)\n        session_id: ID of AnalysisSession to process\n    Returns:\n        dict: Analysis result summary\n    \"\"\"\n    from apps.analysis.models import AnalysisSession",
        "detail": "django_ganglioside.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "cleanup_old_sessions",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.tasks",
        "description": "django_ganglioside.apps.analysis.tasks",
        "peekOfCode": "def cleanup_old_sessions(days=30):\n    \"\"\"\n    Periodic task to clean up old analysis sessions.\n    Args:\n        days: Number of days to retain sessions (default: 30)\n    Returns:\n        dict: Cleanup summary\n    \"\"\"\n    from apps.analysis.models import AnalysisSession\n    logger.info(f\"Starting cleanup of sessions older than {days} days\")",
        "detail": "django_ganglioside.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "send_analysis_notification",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.tasks",
        "description": "django_ganglioside.apps.analysis.tasks",
        "peekOfCode": "def send_analysis_notification(session_id, email):\n    \"\"\"\n    Send email notification when analysis is complete.\n    Args:\n        session_id: ID of completed AnalysisSession\n        email: Email address to notify\n    Returns:\n        dict: Notification status\n    Note:\n        This is a stub implementation. Email backend needs to be configured",
        "detail": "django_ganglioside.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "export_results_async",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.tasks",
        "description": "django_ganglioside.apps.analysis.tasks",
        "peekOfCode": "def export_results_async(session_id, export_format='csv'):\n    \"\"\"\n    Export analysis results to file asynchronously.\n    Args:\n        session_id: ID of AnalysisSession\n        export_format: Export format ('csv', 'excel', 'json')\n    Returns:\n        dict: Export summary with file path\n    \"\"\"\n    from apps.analysis.models import AnalysisSession, Compound",
        "detail": "django_ganglioside.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "batch_analysis",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.tasks",
        "description": "django_ganglioside.apps.analysis.tasks",
        "peekOfCode": "def batch_analysis(self, session_ids):\n    \"\"\"\n    Process multiple analysis sessions in batch.\n    Args:\n        self: Celery task instance (bound)\n        session_ids: List of AnalysisSession IDs to process\n    Returns:\n        dict: Batch processing summary\n    \"\"\"\n    logger.info(f\"Starting batch analysis for {len(session_ids)} sessions\")",
        "detail": "django_ganglioside.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.tasks",
        "description": "django_ganglioside.apps.analysis.tasks",
        "peekOfCode": "logger = get_task_logger(__name__)\n@shared_task(bind=True, name='analysis.run_analysis_async')\ndef run_analysis_async(self, session_id):\n    \"\"\"\n    Run ganglioside analysis asynchronously in background.\n    Args:\n        self: Celery task instance (bound)\n        session_id: ID of AnalysisSession to process\n    Returns:\n        dict: Analysis result summary",
        "detail": "django_ganglioside.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.urls",
        "description": "django_ganglioside.apps.analysis.urls",
        "peekOfCode": "app_name = 'analysis'\n# DRF Router for API endpoints\nrouter = DefaultRouter()\nrouter.register(r'api/sessions', AnalysisSessionViewSet, basename='api-session')\nrouter.register(r'api/compounds', CompoundViewSet, basename='api-compound')\nrouter.register(r'api/regression-models', RegressionModelViewSet, basename='api-regression-model')\nurlpatterns = [\n    # Web UI endpoints\n    path('', views_web.home, name='home'),\n    path('upload/', views_web.upload, name='upload'),",
        "detail": "django_ganglioside.apps.analysis.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.urls",
        "description": "django_ganglioside.apps.analysis.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'api/sessions', AnalysisSessionViewSet, basename='api-session')\nrouter.register(r'api/compounds', CompoundViewSet, basename='api-compound')\nrouter.register(r'api/regression-models', RegressionModelViewSet, basename='api-regression-model')\nurlpatterns = [\n    # Web UI endpoints\n    path('', views_web.home, name='home'),\n    path('upload/', views_web.upload, name='upload'),\n    path('history/', views_web.history, name='history'),\n    path('sessions/<int:session_id>/', views_web.session_detail, name='session_detail'),",
        "detail": "django_ganglioside.apps.analysis.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "django_ganglioside.apps.analysis.urls",
        "description": "django_ganglioside.apps.analysis.urls",
        "peekOfCode": "urlpatterns = [\n    # Web UI endpoints\n    path('', views_web.home, name='home'),\n    path('upload/', views_web.upload, name='upload'),\n    path('history/', views_web.history, name='history'),\n    path('sessions/<int:session_id>/', views_web.session_detail, name='session_detail'),\n    path('sessions/<int:session_id>/analyze/', views_web.session_analyze, name='session_analyze'),\n    path('sessions/<int:session_id>/results/', views_web.results, name='results'),\n    # API endpoints\n    path('', include(router.urls)),",
        "detail": "django_ganglioside.apps.analysis.urls",
        "documentation": {}
    },
    {
        "label": "AnalysisSessionViewSet",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.views",
        "description": "django_ganglioside.apps.analysis.views",
        "peekOfCode": "class AnalysisSessionViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet for AnalysisSession\n    Endpoints:\n    - GET /api/analysis/sessions/ - List all sessions\n    - POST /api/analysis/sessions/ - Create new session with file upload\n    - GET /api/analysis/sessions/{id}/ - Retrieve session details\n    - PUT/PATCH /api/analysis/sessions/{id}/ - Update session\n    - DELETE /api/analysis/sessions/{id}/ - Delete session\n    - POST /api/analysis/sessions/{id}/analyze/ - Trigger analysis",
        "detail": "django_ganglioside.apps.analysis.views",
        "documentation": {}
    },
    {
        "label": "CompoundViewSet",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.views",
        "description": "django_ganglioside.apps.analysis.views",
        "peekOfCode": "class CompoundViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    ViewSet for Compound (read-only)\n    Endpoints:\n    - GET /api/analysis/compounds/ - List all compounds (filtered by session)\n    - GET /api/analysis/compounds/{id}/ - Retrieve compound details\n    \"\"\"\n    queryset = Compound.objects.all()\n    permission_classes = [IsAuthenticated]\n    def get_serializer_class(self):",
        "detail": "django_ganglioside.apps.analysis.views",
        "documentation": {}
    },
    {
        "label": "RegressionModelViewSet",
        "kind": 6,
        "importPath": "django_ganglioside.apps.analysis.views",
        "description": "django_ganglioside.apps.analysis.views",
        "peekOfCode": "class RegressionModelViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    ViewSet for RegressionModel (read-only)\n    Endpoints:\n    - GET /api/analysis/regression-models/ - List all models\n    - GET /api/analysis/regression-models/{id}/ - Retrieve model details\n    \"\"\"\n    queryset = RegressionModel.objects.all()\n    serializer_class = RegressionModelSerializer\n    permission_classes = [IsAuthenticated]",
        "detail": "django_ganglioside.apps.analysis.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.views_web",
        "description": "django_ganglioside.apps.analysis.views_web",
        "peekOfCode": "def home(request):\n    \"\"\"Home page\"\"\"\n    recent_sessions = AnalysisSession.objects.filter(\n        user=request.user\n    ).order_by('-created_at')[:5]\n    context = {\n        'recent_sessions': recent_sessions,\n    }\n    return render(request, 'analysis/home.html', context)\n@login_required",
        "detail": "django_ganglioside.apps.analysis.views_web",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.views_web",
        "description": "django_ganglioside.apps.analysis.views_web",
        "peekOfCode": "def upload(request):\n    \"\"\"Upload CSV file for analysis\"\"\"\n    if request.method == 'POST':\n        from .serializers import AnalysisSessionCreateSerializer\n        serializer = AnalysisSessionCreateSerializer(\n            data=request.POST,\n            files=request.FILES,\n            context={'request': request}\n        )\n        if serializer.is_valid():",
        "detail": "django_ganglioside.apps.analysis.views_web",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.views_web",
        "description": "django_ganglioside.apps.analysis.views_web",
        "peekOfCode": "def history(request):\n    \"\"\"List all analysis sessions\"\"\"\n    sessions = AnalysisSession.objects.filter(\n        user=request.user\n    ).order_by('-created_at')\n    context = {\n        'sessions': sessions,\n    }\n    return render(request, 'analysis/history.html', context)\n@login_required",
        "detail": "django_ganglioside.apps.analysis.views_web",
        "documentation": {}
    },
    {
        "label": "session_detail",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.views_web",
        "description": "django_ganglioside.apps.analysis.views_web",
        "peekOfCode": "def session_detail(request, session_id):\n    \"\"\"View analysis session details\"\"\"\n    session = get_object_or_404(\n        AnalysisSession,\n        id=session_id,\n        user=request.user\n    )\n    context = {\n        'session': session,\n    }",
        "detail": "django_ganglioside.apps.analysis.views_web",
        "documentation": {}
    },
    {
        "label": "session_analyze",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.views_web",
        "description": "django_ganglioside.apps.analysis.views_web",
        "peekOfCode": "def session_analyze(request, session_id):\n    \"\"\"Trigger analysis (AJAX endpoint)\"\"\"\n    session = get_object_or_404(\n        AnalysisSession,\n        id=session_id,\n        user=request.user\n    )\n    if session.status in ['processing', 'completed']:\n        return JsonResponse({\n            'success': False,",
        "detail": "django_ganglioside.apps.analysis.views_web",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 2,
        "importPath": "django_ganglioside.apps.analysis.views_web",
        "description": "django_ganglioside.apps.analysis.views_web",
        "peekOfCode": "def results(request, session_id):\n    \"\"\"View analysis results\"\"\"\n    session = get_object_or_404(\n        AnalysisSession,\n        id=session_id,\n        user=request.user\n    )\n    if session.status != 'completed':\n        messages.warning(request, f'Analysis not completed (status: {session.status})')\n        return redirect('analysis:session_detail', session_id=session.id)",
        "detail": "django_ganglioside.apps.analysis.views_web",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "django_ganglioside.apps.core.apps",
        "description": "django_ganglioside.apps.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.core'\n    verbose_name = 'Core'",
        "detail": "django_ganglioside.apps.core.apps",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "kind": 6,
        "importPath": "django_ganglioside.apps.core.models",
        "description": "django_ganglioside.apps.core.models",
        "peekOfCode": "class TimeStampedModel(models.Model):\n    \"\"\"\n    Abstract base class with created_at and updated_at timestamps\n    \"\"\"\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\nclass SoftDeleteModel(models.Model):\n    \"\"\"",
        "detail": "django_ganglioside.apps.core.models",
        "documentation": {}
    },
    {
        "label": "SoftDeleteModel",
        "kind": 6,
        "importPath": "django_ganglioside.apps.core.models",
        "description": "django_ganglioside.apps.core.models",
        "peekOfCode": "class SoftDeleteModel(models.Model):\n    \"\"\"\n    Abstract base class with soft delete functionality\n    \"\"\"\n    deleted_at = models.DateTimeField(null=True, blank=True)\n    is_deleted = models.BooleanField(default=False)\n    class Meta:\n        abstract = True\n    def delete(self, using=None, keep_parents=False):\n        \"\"\"Soft delete - mark as deleted instead of removing from database\"\"\"",
        "detail": "django_ganglioside.apps.core.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "django_ganglioside.apps.core.urls",
        "description": "django_ganglioside.apps.core.urls",
        "peekOfCode": "app_name = 'core'\nurlpatterns = [\n    path('', views.health_check, name='health-check'),\n]",
        "detail": "django_ganglioside.apps.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "django_ganglioside.apps.core.urls",
        "description": "django_ganglioside.apps.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.health_check, name='health-check'),\n]",
        "detail": "django_ganglioside.apps.core.urls",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "django_ganglioside.apps.core.views",
        "description": "django_ganglioside.apps.core.views",
        "peekOfCode": "def health_check(request):\n    \"\"\"\n    Health check endpoint for monitoring\n    Tests database and Redis connectivity\n    \"\"\"\n    health = {\n        'status': 'healthy',\n        'timestamp': timezone.now().isoformat(),\n        'service': 'ganglioside-analysis-django',\n        'version': '2.0.0',",
        "detail": "django_ganglioside.apps.core.views",
        "documentation": {}
    },
    {
        "label": "RulesConfig",
        "kind": 6,
        "importPath": "django_ganglioside.apps.rules.apps",
        "description": "django_ganglioside.apps.rules.apps",
        "peekOfCode": "class RulesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.rules'",
        "detail": "django_ganglioside.apps.rules.apps",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "django_ganglioside.apps.users.apps",
        "description": "django_ganglioside.apps.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.users'",
        "detail": "django_ganglioside.apps.users.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "django_ganglioside.apps.users.urls",
        "description": "django_ganglioside.apps.users.urls",
        "peekOfCode": "app_name = 'users'\nurlpatterns = [\n    # Auth endpoints will be added here\n]",
        "detail": "django_ganglioside.apps.users.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "django_ganglioside.apps.users.urls",
        "description": "django_ganglioside.apps.users.urls",
        "peekOfCode": "urlpatterns = [\n    # Auth endpoints will be added here\n]",
        "detail": "django_ganglioside.apps.users.urls",
        "documentation": {}
    },
    {
        "label": "VisualizationConfig",
        "kind": 6,
        "importPath": "django_ganglioside.apps.visualization.apps",
        "description": "django_ganglioside.apps.visualization.apps",
        "peekOfCode": "class VisualizationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.visualization'",
        "detail": "django_ganglioside.apps.visualization.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "django_ganglioside.apps.visualization.urls",
        "description": "django_ganglioside.apps.visualization.urls",
        "peekOfCode": "app_name = 'visualization'\nurlpatterns = [\n    path('dashboard/', views.dashboard, name='dashboard'),\n]",
        "detail": "django_ganglioside.apps.visualization.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "django_ganglioside.apps.visualization.urls",
        "description": "django_ganglioside.apps.visualization.urls",
        "peekOfCode": "urlpatterns = [\n    path('dashboard/', views.dashboard, name='dashboard'),\n]",
        "detail": "django_ganglioside.apps.visualization.urls",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "django_ganglioside.apps.visualization.views",
        "description": "django_ganglioside.apps.visualization.views",
        "peekOfCode": "def dashboard(request):\n    \"\"\"Visualization dashboard\"\"\"\n    return render(request, 'visualization/dashboard.html')",
        "detail": "django_ganglioside.apps.visualization.views",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent.parent\n# Environment variables\nenv = environ.Env(\n    DEBUG=(bool, False)\n)\n# Read .env file if it exists\nenv_file = BASE_DIR / '.env'\nif env_file.exists():\n    environ.Env.read_env(str(env_file))\n# SECURITY WARNING: keep the secret key used in production secret!",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "env = environ.Env(\n    DEBUG=(bool, False)\n)\n# Read .env file if it exists\nenv_file = BASE_DIR / '.env'\nif env_file.exists():\n    environ.Env.read_env(str(env_file))\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY', default='django-insecure-dev-key-change-in-production')\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "env_file",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "env_file = BASE_DIR / '.env'\nif env_file.exists():\n    environ.Env.read_env(str(env_file))\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY', default='django-insecure-dev-key-change-in-production')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env('DEBUG')\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nDJANGO_APPS = [",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "SECRET_KEY = env('SECRET_KEY', default='django-insecure-dev-key-change-in-production')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env('DEBUG')\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nDJANGO_APPS = [\n    'daphne',  # Must be first for ASGI support\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DEBUG = env('DEBUG')\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nDJANGO_APPS = [\n    'daphne',  # Must be first for ASGI support\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nDJANGO_APPS = [\n    'daphne',  # Must be first for ASGI support\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DJANGO_APPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DJANGO_APPS = [\n    'daphne',  # Must be first for ASGI support\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nTHIRD_PARTY_APPS = [",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "THIRD_PARTY_APPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "THIRD_PARTY_APPS = [\n    'rest_framework',\n    'corsheaders',\n    'drf_spectacular',\n    'channels',\n    'django_celery_beat',\n    'django_celery_results',\n]\nLOCAL_APPS = [\n    'apps.core',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOCAL_APPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "LOCAL_APPS = [\n    'apps.core',\n    'apps.users',\n    'apps.analysis',\n    'apps.rules',\n    'apps.visualization',\n]\nINSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',  # WhiteNoise for static files\n    'corsheaders.middleware.CorsMiddleware',  # CORS before CommonMiddleware\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',  # WhiteNoise for static files\n    'corsheaders.middleware.CorsMiddleware',  # CORS before CommonMiddleware\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "ROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\nASGI_APPLICATION = 'config.asgi.application'\n# Django Channels Configuration\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [env('REDIS_URL', default='redis://127.0.0.1:6379/0')],\n        },\n    },",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "ASGI_APPLICATION = 'config.asgi.application'\n# Django Channels Configuration\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [env('REDIS_URL', default='redis://127.0.0.1:6379/0')],\n        },\n    },\n}",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [env('REDIS_URL', default='redis://127.0.0.1:6379/0')],\n        },\n    },\n}\n# Database\nDATABASES = {",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DATABASES = {\n    'default': env.db('DATABASE_URL', default='sqlite:///db.sqlite3')\n}\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / 'static']\n# Media files (user uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.JSONParser',\n        'rest_framework.parsers.FormParser',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.JSONParser',\n        'rest_framework.parsers.FormParser',\n        'rest_framework.parsers.MultiPartParser',\n    ],",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SPECTACULAR_SETTINGS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "SPECTACULAR_SETTINGS = {\n    'TITLE': 'Ganglioside Analysis API',\n    'DESCRIPTION': 'LC-MS/MS Ganglioside Analysis Platform - 5-Rule Algorithm',\n    'VERSION': '2.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'COMPONENT_SPLIT_REQUEST': True,\n}\n# CORS Settings\nCORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development\nCORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development\nCORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[\n    'http://localhost:3000',\n    'http://localhost:8000',\n])\nCORS_ALLOW_CREDENTIALS = True\n# Celery Configuration\nCELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[\n    'http://localhost:3000',\n    'http://localhost:8000',\n])\nCORS_ALLOW_CREDENTIALS = True\n# Celery Configuration\nCELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# Celery Configuration\nCELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_TRACK_STARTED",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_TIME_LIMIT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task\nCELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND_DB",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "CELERY_RESULT_BACKEND_DB = 'django-celery-results'\n# File Upload Settings\nDATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),\n}",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DATA_UPLOAD_MAX_MEMORY_SIZE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "DATA_UPLOAD_MAX_MEMORY_SIZE = env.int('MAX_UPLOAD_SIZE', default=52428800)  # 50MB\nFILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),\n}\n# Logging\nLOGGING = {",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "FILE_UPLOAD_MAX_MEMORY_SIZE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "FILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n# Analysis Configuration Defaults\nANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),\n}\n# Logging\nLOGGING = {\n    'version': 1,",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ANALYSIS_DEFAULTS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "ANALYSIS_DEFAULTS = {\n    'R2_THRESHOLD': env.float('DEFAULT_R2_THRESHOLD', default=0.75),\n    'OUTLIER_THRESHOLD': env.float('DEFAULT_OUTLIER_THRESHOLD', default=2.5),\n    'RT_TOLERANCE': env.float('DEFAULT_RT_TOLERANCE', default=0.1),\n}\n# Logging\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.base",
        "description": "django_ganglioside.config.settings.base",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',\n            'style': '{',\n        },\n        'simple': {\n            'format': '{levelname} {message}',",
        "detail": "django_ganglioside.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "DEBUG = True\n# Allow all hosts in development\nALLOWED_HOSTS = ['*']\n# Development-specific apps (commented out until packages installed)\n# INSTALLED_APPS += [\n#     'debug_toolbar',\n#     'django_extensions',\n# ]\n#\n# MIDDLEWARE += [",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Development-specific apps (commented out until packages installed)\n# INSTALLED_APPS += [\n#     'debug_toolbar',\n#     'django_extensions',\n# ]\n#\n# MIDDLEWARE += [\n#     'debug_toolbar.middleware.DebugToolbarMiddleware',\n# ]",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "INTERNAL_IPS = [\n    '127.0.0.1',\n    'localhost',\n]\n# Email backend for development (prints to console)\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n# Simplified password hashing for development (faster)\nPASSWORD_HASHERS = [\n    'django.contrib.auth.hashers.MD5PasswordHasher',\n]",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n# Simplified password hashing for development (faster)\nPASSWORD_HASHERS = [\n    'django.contrib.auth.hashers.MD5PasswordHasher',\n]\n# Allow all CORS origins in development\nCORS_ALLOW_ALL_ORIGINS = True\n# Disable require HTTPS in development\nSECURE_SSL_REDIRECT = False\n# DRF - Allow unauthenticated access in development for testing",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "PASSWORD_HASHERS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "PASSWORD_HASHERS = [\n    'django.contrib.auth.hashers.MD5PasswordHasher',\n]\n# Allow all CORS origins in development\nCORS_ALLOW_ALL_ORIGINS = True\n# Disable require HTTPS in development\nSECURE_SSL_REDIRECT = False\n# DRF - Allow unauthenticated access in development for testing\nREST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = [\n    'rest_framework.permissions.AllowAny',",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# Disable require HTTPS in development\nSECURE_SSL_REDIRECT = False\n# DRF - Allow unauthenticated access in development for testing\nREST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = [\n    'rest_framework.permissions.AllowAny',\n]\n# Celery - Use synchronous execution in development for easier debugging\nCELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_ALWAYS_EAGER', default=False)\nCELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "SECURE_SSL_REDIRECT = False\n# DRF - Allow unauthenticated access in development for testing\nREST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = [\n    'rest_framework.permissions.AllowAny',\n]\n# Celery - Use synchronous execution in development for easier debugging\nCELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_ALWAYS_EAGER', default=False)\nCELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "REST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = [\n    'rest_framework.permissions.AllowAny',\n]\n# Celery - Use synchronous execution in development for easier debugging\nCELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_ALWAYS_EAGER', default=False)\nCELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_ALWAYS_EAGER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "CELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_ALWAYS_EAGER', default=False)\nCELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_EAGER_PROPAGATES",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.development",
        "description": "django_ganglioside.config.settings.development",
        "peekOfCode": "CELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.config.settings.development",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "DEBUG = False\n# Security settings\nSECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_PROXY_SSL_HEADER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SECURE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "CSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_BROWSER_XSS_FILTER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_CONTENT_TYPE_NOSNIFF",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "X_FRAME_OPTIONS = 'DENY'\n# HSTS settings\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_SECONDS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving with WhiteNoise",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_INCLUDE_SUBDOMAINS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving with WhiteNoise\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_PRELOAD",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_HSTS_PRELOAD = True\n# Require HTTPS\nSECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving with WhiteNoise\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# WhiteNoise configuration",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "SECURE_SSL_REDIRECT = True\n# Restrict ALLOWED_HOSTS\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving with WhiteNoise\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# WhiteNoise configuration\nWHITENOISE_AUTOREFRESH = False\nWHITENOISE_USE_FINDERS = False",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')\n# Database connection pooling\nDATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving with WhiteNoise\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# WhiteNoise configuration\nWHITENOISE_AUTOREFRESH = False\nWHITENOISE_USE_FINDERS = False\nWHITENOISE_MANIFEST_STRICT = True\nWHITENOISE_ALLOW_ALL_ORIGINS = False",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "DATABASES['default']['CONN_MAX_AGE']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "DATABASES['default']['CONN_MAX_AGE'] = 600\n# Static files serving with WhiteNoise\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# WhiteNoise configuration\nWHITENOISE_AUTOREFRESH = False\nWHITENOISE_USE_FINDERS = False\nWHITENOISE_MANIFEST_STRICT = True\nWHITENOISE_ALLOW_ALL_ORIGINS = False\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# WhiteNoise configuration\nWHITENOISE_AUTOREFRESH = False\nWHITENOISE_USE_FINDERS = False\nWHITENOISE_MANIFEST_STRICT = True\nWHITENOISE_ALLOW_ALL_ORIGINS = False\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "WHITENOISE_AUTOREFRESH",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "WHITENOISE_AUTOREFRESH = False\nWHITENOISE_USE_FINDERS = False\nWHITENOISE_MANIFEST_STRICT = True\nWHITENOISE_ALLOW_ALL_ORIGINS = False\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "WHITENOISE_USE_FINDERS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "WHITENOISE_USE_FINDERS = False\nWHITENOISE_MANIFEST_STRICT = True\nWHITENOISE_ALLOW_ALL_ORIGINS = False\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "WHITENOISE_MANIFEST_STRICT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "WHITENOISE_MANIFEST_STRICT = True\nWHITENOISE_ALLOW_ALL_ORIGINS = False\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "WHITENOISE_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "WHITENOISE_ALLOW_ALL_ORIGINS = False\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_HOST = env('EMAIL_HOST')\nEMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_PORT = env.int('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    sentry_sdk.init(",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    sentry_sdk.init(\n        dsn=env('SENTRY_DSN'),",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_HOST_USER = env('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    sentry_sdk.init(\n        dsn=env('SENTRY_DSN'),\n        integrations=[",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')\n# Sentry error tracking\nif env('SENTRY_DSN', default=None):\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    sentry_sdk.init(\n        dsn=env('SENTRY_DSN'),\n        integrations=[\n            DjangoIntegration(),",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "LOGGING['handlers']['file']['filename']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "LOGGING['handlers']['file']['filename'] = '/var/log/ganglioside/django.log'\nLOGGING['root']['level'] = 'WARNING'\nLOGGING['loggers']['django']['level'] = 'WARNING'",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "LOGGING['root']['level']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "LOGGING['root']['level'] = 'WARNING'\nLOGGING['loggers']['django']['level'] = 'WARNING'",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "LOGGING['loggers']['django']['level']",
        "kind": 5,
        "importPath": "django_ganglioside.config.settings.production",
        "description": "django_ganglioside.config.settings.production",
        "peekOfCode": "LOGGING['loggers']['django']['level'] = 'WARNING'",
        "detail": "django_ganglioside.config.settings.production",
        "documentation": {}
    },
    {
        "label": "django_asgi_app",
        "kind": 5,
        "importPath": "django_ganglioside.config.asgi",
        "description": "django_ganglioside.config.asgi",
        "peekOfCode": "django_asgi_app = get_asgi_application()\n# Import routing after Django app is initialized\nfrom apps.analysis.routing import websocket_urlpatterns\napplication = ProtocolTypeRouter({\n    \"http\": django_asgi_app,\n    \"websocket\": AuthMiddlewareStack(\n        URLRouter(\n            websocket_urlpatterns\n        )\n    ),",
        "detail": "django_ganglioside.config.asgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "django_ganglioside.config.asgi",
        "description": "django_ganglioside.config.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    \"http\": django_asgi_app,\n    \"websocket\": AuthMiddlewareStack(\n        URLRouter(\n            websocket_urlpatterns\n        )\n    ),\n})",
        "detail": "django_ganglioside.config.asgi",
        "documentation": {}
    },
    {
        "label": "debug_task",
        "kind": 2,
        "importPath": "django_ganglioside.config.celery",
        "description": "django_ganglioside.config.celery",
        "peekOfCode": "def debug_task(self):\n    \"\"\"Debug task to test Celery setup\"\"\"\n    print(f'Request: {self.request!r}')",
        "detail": "django_ganglioside.config.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "django_ganglioside.config.celery",
        "description": "django_ganglioside.config.celery",
        "peekOfCode": "app = Celery('ganglioside_analysis')\n# Load configuration from Django settings with CELERY_ prefix\napp.config_from_object('django.conf:settings', namespace='CELERY')\n# Auto-discover tasks in all installed apps\n# This will look for tasks.py in each app listed in INSTALLED_APPS\napp.autodiscover_tasks()\n# Also manually import tasks to ensure they're registered\ntry:\n    from apps.analysis import tasks  # noqa: F401\nexcept ImportError:",
        "detail": "django_ganglioside.config.celery",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "django_ganglioside.config.urls",
        "description": "django_ganglioside.config.urls",
        "peekOfCode": "urlpatterns = [\n    # Admin\n    path('admin/', admin.site.urls),\n    # API Documentation\n    path('api/schema/', SpectacularAPIView.as_view(), name='schema'),\n    path('api/docs/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),\n    path('api/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),\n    # Web UI\n    path('', include('apps.analysis.urls')),  # Main app (includes both web and API)\n    path('visualization/', include('apps.visualization.urls')),",
        "detail": "django_ganglioside.config.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "django_ganglioside.config.urls",
        "description": "django_ganglioside.config.urls",
        "peekOfCode": "admin.site.site_header = \"Ganglioside Analysis Admin\"\nadmin.site.site_title = \"Ganglioside Analysis\"\nadmin.site.index_title = \"LC-MS/MS Analysis Management\"",
        "detail": "django_ganglioside.config.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "django_ganglioside.config.urls",
        "description": "django_ganglioside.config.urls",
        "peekOfCode": "admin.site.site_title = \"Ganglioside Analysis\"\nadmin.site.index_title = \"LC-MS/MS Analysis Management\"",
        "detail": "django_ganglioside.config.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "django_ganglioside.config.urls",
        "description": "django_ganglioside.config.urls",
        "peekOfCode": "admin.site.index_title = \"LC-MS/MS Analysis Management\"",
        "detail": "django_ganglioside.config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "django_ganglioside.config.wsgi",
        "description": "django_ganglioside.config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "django_ganglioside.config.wsgi",
        "documentation": {}
    },
    {
        "label": "TestAnalysisWorkflow",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_analysis_workflow",
        "description": "django_ganglioside.tests.integration.test_analysis_workflow",
        "peekOfCode": "class TestAnalysisWorkflow:\n    \"\"\"Test complete analysis workflow from upload to results\"\"\"\n    def test_complete_analysis_pipeline(self, test_user, sample_csv_file):\n        \"\"\"Test full analysis pipeline\"\"\"\n        # Create session\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Integration Test\",\n            data_type=\"porcine\",\n            uploaded_file=sample_csv_file,",
        "detail": "django_ganglioside.tests.integration.test_analysis_workflow",
        "documentation": {}
    },
    {
        "label": "TestDatabaseIntegrity",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_analysis_workflow",
        "description": "django_ganglioside.tests.integration.test_analysis_workflow",
        "peekOfCode": "class TestDatabaseIntegrity:\n    \"\"\"Test database integrity constraints\"\"\"\n    def test_session_result_integrity(self, test_user):\n        \"\"\"Test session and result remain consistent\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Integrity Test\",\n            data_type=\"porcine\",\n            status=\"completed\",\n            file_size=1024,",
        "detail": "django_ganglioside.tests.integration.test_analysis_workflow",
        "documentation": {}
    },
    {
        "label": "TestAnalysisPerformance",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_analysis_workflow",
        "description": "django_ganglioside.tests.integration.test_analysis_workflow",
        "peekOfCode": "class TestAnalysisPerformance:\n    \"\"\"Test analysis performance with various data sizes\"\"\"\n    def test_small_dataset_performance(self, test_user, sample_csv_file):\n        \"\"\"Test analysis completes quickly for small dataset\"\"\"\n        import time\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Performance Test Small\",\n            data_type=\"porcine\",\n            uploaded_file=sample_csv_file,",
        "detail": "django_ganglioside.tests.integration.test_analysis_workflow",
        "documentation": {}
    },
    {
        "label": "TestAnalysisAPIEndpoints",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_api_endpoints",
        "description": "django_ganglioside.tests.integration.test_api_endpoints",
        "peekOfCode": "class TestAnalysisAPIEndpoints:\n    \"\"\"Test Analysis API endpoints\"\"\"\n    def test_create_analysis_session_unauthorized(self, api_client, sample_csv_file):\n        \"\"\"Test creating session without authentication fails\"\"\"\n        url = reverse('analysis:session-list')\n        data = {\n            'name': 'Test Analysis',\n            'data_type': 'porcine',\n            'uploaded_file': sample_csv_file,\n        }",
        "detail": "django_ganglioside.tests.integration.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "TestHealthCheckEndpoint",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_api_endpoints",
        "description": "django_ganglioside.tests.integration.test_api_endpoints",
        "peekOfCode": "class TestHealthCheckEndpoint:\n    \"\"\"Test health check endpoint\"\"\"\n    def test_health_check_endpoint(self, api_client):\n        \"\"\"Test health check returns OK\"\"\"\n        url = reverse('health-check')\n        response = api_client.get(url)\n        assert response.status_code == status.HTTP_200_OK\n        assert response.data == {'status': 'ok'}\n@pytest.mark.integration\nclass TestAPIValidation:",
        "detail": "django_ganglioside.tests.integration.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "TestAPIValidation",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_api_endpoints",
        "description": "django_ganglioside.tests.integration.test_api_endpoints",
        "peekOfCode": "class TestAPIValidation:\n    \"\"\"Test API input validation\"\"\"\n    def test_invalid_data_type(self, authenticated_client, sample_csv_file):\n        \"\"\"Test invalid data_type is rejected\"\"\"\n        url = reverse('analysis:session-list')\n        data = {\n            'name': 'Test',\n            'data_type': 'invalid_type',  # Invalid\n            'uploaded_file': sample_csv_file,\n        }",
        "detail": "django_ganglioside.tests.integration.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "TestAPIPagination",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_api_endpoints",
        "description": "django_ganglioside.tests.integration.test_api_endpoints",
        "peekOfCode": "class TestAPIPagination:\n    \"\"\"Test API pagination\"\"\"\n    def test_pagination_works(self, authenticated_client, test_user):\n        \"\"\"Test pagination of session list\"\"\"\n        # Create many sessions\n        for i in range(25):\n            AnalysisSession.objects.create(\n                user=test_user,\n                name=f\"Session {i}\",\n                data_type=\"porcine\",",
        "detail": "django_ganglioside.tests.integration.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "TestAnalysisTasks",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_celery_tasks",
        "description": "django_ganglioside.tests.integration.test_celery_tasks",
        "peekOfCode": "class TestAnalysisTasks:\n    \"\"\"Test Celery analysis tasks\"\"\"\n    def test_run_analysis_async_task(self, test_user, sample_csv_file, celery_eager_mode):\n        \"\"\"Test async analysis task\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Async Test\",\n            data_type=\"porcine\",\n            uploaded_file=sample_csv_file,\n            file_size=sample_csv_file.size,",
        "detail": "django_ganglioside.tests.integration.test_celery_tasks",
        "documentation": {}
    },
    {
        "label": "TestCleanupTasks",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_celery_tasks",
        "description": "django_ganglioside.tests.integration.test_celery_tasks",
        "peekOfCode": "class TestCleanupTasks:\n    \"\"\"Test cleanup tasks\"\"\"\n    def test_cleanup_old_sessions(self, test_user, celery_eager_mode):\n        \"\"\"Test cleanup of old sessions\"\"\"\n        from datetime import timedelta\n        from django.utils import timezone\n        # Create old completed session\n        old_session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Old Session\",",
        "detail": "django_ganglioside.tests.integration.test_celery_tasks",
        "documentation": {}
    },
    {
        "label": "TestNotificationTasks",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_celery_tasks",
        "description": "django_ganglioside.tests.integration.test_celery_tasks",
        "peekOfCode": "class TestNotificationTasks:\n    \"\"\"Test notification tasks\"\"\"\n    @patch('apps.analysis.tasks.send_email')\n    def test_send_completion_notification(self, mock_send_email, test_user, celery_eager_mode):\n        \"\"\"Test sending completion notification\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Notification Test\",\n            data_type=\"porcine\",\n            status=\"completed\",",
        "detail": "django_ganglioside.tests.integration.test_celery_tasks",
        "documentation": {}
    },
    {
        "label": "TestTaskRetry",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_celery_tasks",
        "description": "django_ganglioside.tests.integration.test_celery_tasks",
        "peekOfCode": "class TestTaskRetry:\n    \"\"\"Test task retry logic\"\"\"\n    @patch('apps.analysis.services.analysis_service.AnalysisService.run_analysis')\n    def test_task_retries_on_failure(self, mock_analysis, test_user, sample_csv_file, celery_eager_mode):\n        \"\"\"Test task retries on temporary failure\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Retry Test\",\n            data_type=\"porcine\",\n            uploaded_file=sample_csv_file,",
        "detail": "django_ganglioside.tests.integration.test_celery_tasks",
        "documentation": {}
    },
    {
        "label": "TestTaskChaining",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_celery_tasks",
        "description": "django_ganglioside.tests.integration.test_celery_tasks",
        "peekOfCode": "class TestTaskChaining:\n    \"\"\"Test task chaining and workflow\"\"\"\n    def test_analysis_completion_triggers_notification(self, test_user, sample_csv_file, celery_eager_mode):\n        \"\"\"Test analysis completion triggers notification task\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Chain Test\",\n            data_type=\"porcine\",\n            uploaded_file=sample_csv_file,\n            file_size=sample_csv_file.size,",
        "detail": "django_ganglioside.tests.integration.test_celery_tasks",
        "documentation": {}
    },
    {
        "label": "TestV2ProcessorIntegration",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_v2_processor",
        "description": "django_ganglioside.tests.integration.test_v2_processor",
        "peekOfCode": "class TestV2ProcessorIntegration:\n    \"\"\"Test V2 processor integration with Django\"\"\"\n    def test_v2_processor_prevents_overfitting(self, test_user, sample_csv_file):\n        \"\"\"Test that V2 processor prevents overfitting with small samples\"\"\"\n        # Create session\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"V2 Overfitting Test\",\n            data_type=\"porcine\",\n            uploaded_file=sample_csv_file,",
        "detail": "django_ganglioside.tests.integration.test_v2_processor",
        "documentation": {}
    },
    {
        "label": "TestImprovedRegressionModel",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_v2_processor",
        "description": "django_ganglioside.tests.integration.test_v2_processor",
        "peekOfCode": "class TestImprovedRegressionModel:\n    \"\"\"Unit tests for improved regression model\"\"\"\n    def test_realistic_r2_threshold(self):\n        \"\"\"Test that default R² threshold is realistic\"\"\"\n        model = ImprovedRegressionModel()\n        assert model.r2_threshold == 0.70, \"Should use realistic R² threshold\"\n        assert model.r2_threshold < 0.90, \"R² threshold too high, risks overfitting\"\n    def test_feature_ratio_limit(self):\n        \"\"\"Test that features are limited by sample size\"\"\"\n        model = ImprovedRegressionModel()",
        "detail": "django_ganglioside.tests.integration.test_v2_processor",
        "documentation": {}
    },
    {
        "label": "TestAnalysisServiceV2",
        "kind": 6,
        "importPath": "django_ganglioside.tests.integration.test_v2_processor",
        "description": "django_ganglioside.tests.integration.test_v2_processor",
        "peekOfCode": "class TestAnalysisServiceV2:\n    \"\"\"Test AnalysisService with V2 processor\"\"\"\n    def test_service_uses_v2_by_default(self):\n        \"\"\"Test that service uses V2 by default\"\"\"\n        service = AnalysisService()\n        assert service.processor_version == \"v2\"\n        assert isinstance(service.processor, GangliosideProcessorV2)\n    def test_service_can_use_v1_for_compatibility(self):\n        \"\"\"Test that V1 can still be used if needed\"\"\"\n        service = AnalysisService(use_v2=False)",
        "detail": "django_ganglioside.tests.integration.test_v2_processor",
        "documentation": {}
    },
    {
        "label": "sample_csv_content",
        "kind": 2,
        "importPath": "django_ganglioside.tests.integration.test_v2_processor",
        "description": "django_ganglioside.tests.integration.test_v2_processor",
        "peekOfCode": "def sample_csv_content():\n    \"\"\"Create realistic sample CSV content\"\"\"\n    return \"\"\"Name,RT,Volume,Log P,Anchor\nGD1(36:1;O2),9.572,1000000,1.53,T\nGD1(38:1;O2),10.125,1200000,2.88,T\nGD1(40:1;O2),10.678,1500000,4.23,T\nGD1(42:1;O2),11.231,1800000,5.58,F\nGM1(36:1;O2),10.452,500000,4.00,T\nGM1(38:1;O2),10.987,600000,5.35,T\nGM1(40:1;O2),11.522,700000,6.70,F",
        "detail": "django_ganglioside.tests.integration.test_v2_processor",
        "documentation": {}
    },
    {
        "label": "sample_csv_file",
        "kind": 2,
        "importPath": "django_ganglioside.tests.integration.test_v2_processor",
        "description": "django_ganglioside.tests.integration.test_v2_processor",
        "peekOfCode": "def sample_csv_file(sample_csv_content):\n    \"\"\"Create in-memory CSV file\"\"\"\n    return SimpleUploadedFile(\n        \"test_data.csv\",\n        sample_csv_content.encode('utf-8'),\n        content_type=\"text/csv\"\n    )\n@pytest.mark.integration\nclass TestV2ProcessorIntegration:\n    \"\"\"Test V2 processor integration with Django\"\"\"",
        "detail": "django_ganglioside.tests.integration.test_v2_processor",
        "documentation": {}
    },
    {
        "label": "TestDatabasePerformance",
        "kind": 6,
        "importPath": "django_ganglioside.tests.performance.test_load",
        "description": "django_ganglioside.tests.performance.test_load",
        "peekOfCode": "class TestDatabasePerformance:\n    \"\"\"Test database query performance\"\"\"\n    def test_bulk_compound_creation(self, test_user):\n        \"\"\"Test bulk creation of compounds\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Bulk Test\",\n            data_type=\"porcine\",\n            status=\"completed\",\n            file_size=1024,",
        "detail": "django_ganglioside.tests.performance.test_load",
        "documentation": {}
    },
    {
        "label": "TestAPIPerformance",
        "kind": 6,
        "importPath": "django_ganglioside.tests.performance.test_load",
        "description": "django_ganglioside.tests.performance.test_load",
        "peekOfCode": "class TestAPIPerformance:\n    \"\"\"Test API endpoint performance\"\"\"\n    def test_list_endpoint_performance(self, authenticated_client, test_user):\n        \"\"\"Test list endpoint with many sessions\"\"\"\n        # Create 100 sessions\n        sessions = []\n        for i in range(100):\n            session = AnalysisSession.objects.create(\n                user=test_user,\n                name=f\"Session {i}\",",
        "detail": "django_ganglioside.tests.performance.test_load",
        "documentation": {}
    },
    {
        "label": "TestConcurrencyPerformance",
        "kind": 6,
        "importPath": "django_ganglioside.tests.performance.test_load",
        "description": "django_ganglioside.tests.performance.test_load",
        "peekOfCode": "class TestConcurrencyPerformance:\n    \"\"\"Test concurrent operations\"\"\"\n    def test_concurrent_session_creation(self, test_user):\n        \"\"\"Test creating multiple sessions concurrently\"\"\"\n        from django.db import transaction\n        import concurrent.futures\n        def create_session(index):\n            with transaction.atomic():\n                return AnalysisSession.objects.create(\n                    user=test_user,",
        "detail": "django_ganglioside.tests.performance.test_load",
        "documentation": {}
    },
    {
        "label": "TestMemoryUsage",
        "kind": 6,
        "importPath": "django_ganglioside.tests.performance.test_load",
        "description": "django_ganglioside.tests.performance.test_load",
        "peekOfCode": "class TestMemoryUsage:\n    \"\"\"Test memory-efficient operations\"\"\"\n    def test_iterator_for_large_queryset(self, test_user):\n        \"\"\"Test using iterator for large querysets\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Memory Test\",\n            data_type=\"porcine\",\n            status=\"completed\",\n            file_size=1024,",
        "detail": "django_ganglioside.tests.performance.test_load",
        "documentation": {}
    },
    {
        "label": "TestImprovedRegressionModel",
        "kind": 6,
        "importPath": "django_ganglioside.tests.unit.test_improved_regression",
        "description": "django_ganglioside.tests.unit.test_improved_regression",
        "peekOfCode": "class TestImprovedRegressionModel:\n    \"\"\"Test suite for ImprovedRegressionModel\"\"\"\n    @pytest.fixture\n    def sample_data(self):\n        \"\"\"Create sample ganglioside data for testing\"\"\"\n        return pd.DataFrame({\n            'Name': [\n                'GT3(34:1;O2)', 'GT3(36:1;O2)', 'GT3(38:1;O2)',\n                'GT3(40:1;O2)', 'GT3(42:1;O2)'\n            ],",
        "detail": "django_ganglioside.tests.unit.test_improved_regression",
        "documentation": {}
    },
    {
        "label": "TestRegressionIntegration",
        "kind": 6,
        "importPath": "django_ganglioside.tests.unit.test_improved_regression",
        "description": "django_ganglioside.tests.unit.test_improved_regression",
        "peekOfCode": "class TestRegressionIntegration:\n    \"\"\"Integration tests for regression model with processor\"\"\"\n    def test_regression_prevents_overfitting(self):\n        \"\"\"Test that the improved regression prevents overfitting\"\"\"\n        # Create dataset that would cause overfitting with old model\n        data = pd.DataFrame({\n            'Name': ['GD1(36:1;O2)', 'GD1(38:1;O2)', 'GD1(40:1;O2)'],\n            'RT': [9.5, 10.2, 10.9],\n            'Volume': [1000000, 1500000, 2000000],\n            'Log P': [2.5, 3.8, 5.1],",
        "detail": "django_ganglioside.tests.unit.test_improved_regression",
        "documentation": {}
    },
    {
        "label": "TestAnalysisSessionModel",
        "kind": 6,
        "importPath": "django_ganglioside.tests.unit.test_models",
        "description": "django_ganglioside.tests.unit.test_models",
        "peekOfCode": "class TestAnalysisSessionModel:\n    \"\"\"Test AnalysisSession model\"\"\"\n    def test_create_analysis_session(self, test_user):\n        \"\"\"Test creating an analysis session\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Test Session\",\n            data_type=\"porcine\",\n            status=\"pending\",\n            file_size=1024,",
        "detail": "django_ganglioside.tests.unit.test_models",
        "documentation": {}
    },
    {
        "label": "TestAnalysisResultModel",
        "kind": 6,
        "importPath": "django_ganglioside.tests.unit.test_models",
        "description": "django_ganglioside.tests.unit.test_models",
        "peekOfCode": "class TestAnalysisResultModel:\n    \"\"\"Test AnalysisResult model\"\"\"\n    def test_create_analysis_result(self, test_user):\n        \"\"\"Test creating an analysis result\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Test Session\",\n            data_type=\"porcine\",\n            status=\"completed\",\n            file_size=1024,",
        "detail": "django_ganglioside.tests.unit.test_models",
        "documentation": {}
    },
    {
        "label": "TestCompoundModel",
        "kind": 6,
        "importPath": "django_ganglioside.tests.unit.test_models",
        "description": "django_ganglioside.tests.unit.test_models",
        "peekOfCode": "class TestCompoundModel:\n    \"\"\"Test Compound model\"\"\"\n    def test_create_compound(self, test_user):\n        \"\"\"Test creating a compound\"\"\"\n        session = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Test Session\",\n            data_type=\"porcine\",\n            status=\"completed\",\n            file_size=1024,",
        "detail": "django_ganglioside.tests.unit.test_models",
        "documentation": {}
    },
    {
        "label": "TestModelRelationships",
        "kind": 6,
        "importPath": "django_ganglioside.tests.unit.test_models",
        "description": "django_ganglioside.tests.unit.test_models",
        "peekOfCode": "class TestModelRelationships:\n    \"\"\"Test relationships between models\"\"\"\n    def test_user_sessions_relationship(self, test_user):\n        \"\"\"Test user can have multiple sessions\"\"\"\n        session1 = AnalysisSession.objects.create(\n            user=test_user,\n            name=\"Session 1\",\n            data_type=\"porcine\",\n            status=\"completed\",\n            file_size=1024,",
        "detail": "django_ganglioside.tests.unit.test_models",
        "documentation": {}
    },
    {
        "label": "api_client",
        "kind": 2,
        "importPath": "django_ganglioside.tests.conftest",
        "description": "django_ganglioside.tests.conftest",
        "peekOfCode": "def api_client():\n    \"\"\"Create API client for testing\"\"\"\n    return APIClient()\n@pytest.fixture\ndef test_user(db):\n    \"\"\"Create a test user\"\"\"\n    return User.objects.create_user(\n        username='testuser',\n        email='test@example.com',\n        password='testpass123'",
        "detail": "django_ganglioside.tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_user",
        "kind": 2,
        "importPath": "django_ganglioside.tests.conftest",
        "description": "django_ganglioside.tests.conftest",
        "peekOfCode": "def test_user(db):\n    \"\"\"Create a test user\"\"\"\n    return User.objects.create_user(\n        username='testuser',\n        email='test@example.com',\n        password='testpass123'\n    )\n@pytest.fixture\ndef authenticated_client(api_client, test_user):\n    \"\"\"Create authenticated API client\"\"\"",
        "detail": "django_ganglioside.tests.conftest",
        "documentation": {}
    },
    {
        "label": "authenticated_client",
        "kind": 2,
        "importPath": "django_ganglioside.tests.conftest",
        "description": "django_ganglioside.tests.conftest",
        "peekOfCode": "def authenticated_client(api_client, test_user):\n    \"\"\"Create authenticated API client\"\"\"\n    api_client.force_authenticate(user=test_user)\n    return api_client\n@pytest.fixture\ndef sample_csv_file():\n    \"\"\"Create a sample CSV file for testing\"\"\"\n    csv_content = b\"\"\"Name,RT,Volume,Log P,Anchor\nGM1(36:1;O2),10.452,500000,4.00,F\nGM3(36:1;O2),10.606,2000000,7.74,F",
        "detail": "django_ganglioside.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_csv_file",
        "kind": 2,
        "importPath": "django_ganglioside.tests.conftest",
        "description": "django_ganglioside.tests.conftest",
        "peekOfCode": "def sample_csv_file():\n    \"\"\"Create a sample CSV file for testing\"\"\"\n    csv_content = b\"\"\"Name,RT,Volume,Log P,Anchor\nGM1(36:1;O2),10.452,500000,4.00,F\nGM3(36:1;O2),10.606,2000000,7.74,F\nGD1(36:1;O2),9.572,1000000,1.53,T\nGD3(36:1;O2),10.126,800000,5.27,T\nGT1(36:1;O2),8.701,1200000,-0.94,T\n\"\"\"\n    return SimpleUploadedFile(",
        "detail": "django_ganglioside.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_analysis_data",
        "kind": 2,
        "importPath": "django_ganglioside.tests.conftest",
        "description": "django_ganglioside.tests.conftest",
        "peekOfCode": "def sample_analysis_data():\n    \"\"\"Sample analysis data for testing\"\"\"\n    return {\n        'name': 'Test Analysis',\n        'data_type': 'porcine',\n        'r2_threshold': 0.75,\n        'outlier_threshold': 2.5,\n        'rt_tolerance': 0.1,\n    }\n@pytest.fixture(autouse=True)",
        "detail": "django_ganglioside.tests.conftest",
        "documentation": {}
    },
    {
        "label": "enable_db_access_for_all_tests",
        "kind": 2,
        "importPath": "django_ganglioside.tests.conftest",
        "description": "django_ganglioside.tests.conftest",
        "peekOfCode": "def enable_db_access_for_all_tests(db):\n    \"\"\"Automatically enable database access for all tests\"\"\"\n    pass\n@pytest.fixture\ndef celery_eager_mode(settings):\n    \"\"\"Run Celery tasks synchronously for testing\"\"\"\n    settings.CELERY_TASK_ALWAYS_EAGER = True\n    settings.CELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.tests.conftest",
        "documentation": {}
    },
    {
        "label": "celery_eager_mode",
        "kind": 2,
        "importPath": "django_ganglioside.tests.conftest",
        "description": "django_ganglioside.tests.conftest",
        "peekOfCode": "def celery_eager_mode(settings):\n    \"\"\"Run Celery tasks synchronously for testing\"\"\"\n    settings.CELERY_TASK_ALWAYS_EAGER = True\n    settings.CELERY_TASK_EAGER_PROPAGATES = True",
        "detail": "django_ganglioside.tests.conftest",
        "documentation": {}
    },
    {
        "label": "bind",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "bind = \"127.0.0.1:8000\"\nbacklog = 2048\n# Worker processes\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"sync\"\nworker_connections = 1000\nmax_requests = 1000\nmax_requests_jitter = 50\ntimeout = 30\nkeepalive = 2",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "backlog",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "backlog = 2048\n# Worker processes\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"sync\"\nworker_connections = 1000\nmax_requests = 1000\nmax_requests_jitter = 50\ntimeout = 30\nkeepalive = 2\n# Logging",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "workers",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "workers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"sync\"\nworker_connections = 1000\nmax_requests = 1000\nmax_requests_jitter = 50\ntimeout = 30\nkeepalive = 2\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "worker_class",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "worker_class = \"sync\"\nworker_connections = 1000\nmax_requests = 1000\nmax_requests_jitter = 50\ntimeout = 30\nkeepalive = 2\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = \"info\"",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "worker_connections",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "worker_connections = 1000\nmax_requests = 1000\nmax_requests_jitter = 50\ntimeout = 30\nkeepalive = 2\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "max_requests",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "max_requests = 1000\nmax_requests_jitter = 50\ntimeout = 30\nkeepalive = 2\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n# Process naming",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "max_requests_jitter",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "max_requests_jitter = 50\ntimeout = 30\nkeepalive = 2\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n# Process naming\nproc_name = \"ganglioside_django\"",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "timeout",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "timeout = 30\nkeepalive = 2\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n# Process naming\nproc_name = \"ganglioside_django\"\n# Server mechanics",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "keepalive",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "keepalive = 2\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n# Process naming\nproc_name = \"ganglioside_django\"\n# Server mechanics\ndaemon = False",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "accesslog",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "accesslog = \"-\"\nerrorlog = \"-\"\nloglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n# Process naming\nproc_name = \"ganglioside_django\"\n# Server mechanics\ndaemon = False\npidfile = \"/tmp/gunicorn_ganglioside.pid\"\nuser = None",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "errorlog",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "errorlog = \"-\"\nloglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n# Process naming\nproc_name = \"ganglioside_django\"\n# Server mechanics\ndaemon = False\npidfile = \"/tmp/gunicorn_ganglioside.pid\"\nuser = None\ngroup = None",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "loglevel",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "loglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n# Process naming\nproc_name = \"ganglioside_django\"\n# Server mechanics\ndaemon = False\npidfile = \"/tmp/gunicorn_ganglioside.pid\"\nuser = None\ngroup = None\ntmp_upload_dir = None",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "access_log_format",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "access_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n# Process naming\nproc_name = \"ganglioside_django\"\n# Server mechanics\ndaemon = False\npidfile = \"/tmp/gunicorn_ganglioside.pid\"\nuser = None\ngroup = None\ntmp_upload_dir = None\n# SSL (if needed)",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "proc_name",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "proc_name = \"ganglioside_django\"\n# Server mechanics\ndaemon = False\npidfile = \"/tmp/gunicorn_ganglioside.pid\"\nuser = None\ngroup = None\ntmp_upload_dir = None\n# SSL (if needed)\n# keyfile = \"/path/to/key.pem\"\n# certfile = \"/path/to/cert.pem\"",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "daemon",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "daemon = False\npidfile = \"/tmp/gunicorn_ganglioside.pid\"\nuser = None\ngroup = None\ntmp_upload_dir = None\n# SSL (if needed)\n# keyfile = \"/path/to/key.pem\"\n# certfile = \"/path/to/cert.pem\"\n# Environment variables\nraw_env = [",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "pidfile",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "pidfile = \"/tmp/gunicorn_ganglioside.pid\"\nuser = None\ngroup = None\ntmp_upload_dir = None\n# SSL (if needed)\n# keyfile = \"/path/to/key.pem\"\n# certfile = \"/path/to/cert.pem\"\n# Environment variables\nraw_env = [\n    \"DJANGO_SETTINGS_MODULE=config.settings.production\",",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "user = None\ngroup = None\ntmp_upload_dir = None\n# SSL (if needed)\n# keyfile = \"/path/to/key.pem\"\n# certfile = \"/path/to/cert.pem\"\n# Environment variables\nraw_env = [\n    \"DJANGO_SETTINGS_MODULE=config.settings.production\",\n]",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "group = None\ntmp_upload_dir = None\n# SSL (if needed)\n# keyfile = \"/path/to/key.pem\"\n# certfile = \"/path/to/cert.pem\"\n# Environment variables\nraw_env = [\n    \"DJANGO_SETTINGS_MODULE=config.settings.production\",\n]\n# Reload on code changes (development only)",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "tmp_upload_dir",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "tmp_upload_dir = None\n# SSL (if needed)\n# keyfile = \"/path/to/key.pem\"\n# certfile = \"/path/to/cert.pem\"\n# Environment variables\nraw_env = [\n    \"DJANGO_SETTINGS_MODULE=config.settings.production\",\n]\n# Reload on code changes (development only)\nreload = os.getenv(\"GUNICORN_RELOAD\", \"False\").lower() == \"true\"",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "raw_env",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "raw_env = [\n    \"DJANGO_SETTINGS_MODULE=config.settings.production\",\n]\n# Reload on code changes (development only)\nreload = os.getenv(\"GUNICORN_RELOAD\", \"False\").lower() == \"true\"",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "reload",
        "kind": 5,
        "importPath": "django_ganglioside.gunicorn.conf",
        "description": "django_ganglioside.gunicorn.conf",
        "peekOfCode": "reload = os.getenv(\"GUNICORN_RELOAD\", \"False\").lower() == \"true\"",
        "detail": "django_ganglioside.gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "django_ganglioside.manage",
        "description": "django_ganglioside.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "django_ganglioside.manage",
        "documentation": {}
    },
    {
        "label": "test_basic_functionality",
        "kind": 2,
        "importPath": "django_ganglioside.test_regression_standalone",
        "description": "django_ganglioside.test_regression_standalone",
        "peekOfCode": "def test_basic_functionality():\n    \"\"\"Test basic regression model functionality\"\"\"\n    print(\"Testing ImprovedRegressionModel basic functionality...\")\n    # Create model\n    model = ImprovedRegressionModel(\n        min_samples=3,\n        max_features_ratio=0.3,\n        r2_threshold=0.70\n    )\n    print(f\"✓ Model initialized with r2_threshold={model.r2_threshold}\")",
        "detail": "django_ganglioside.test_regression_standalone",
        "documentation": {}
    },
    {
        "label": "test_overfitting_prevention",
        "kind": 2,
        "importPath": "django_ganglioside.test_regression_standalone",
        "description": "django_ganglioside.test_regression_standalone",
        "peekOfCode": "def test_overfitting_prevention():\n    \"\"\"Test that model prevents overfitting\"\"\"\n    print(\"\\nTesting overfitting prevention...\")\n    model = ImprovedRegressionModel()\n    # Create minimal dataset (3 samples)\n    df = pd.DataFrame({\n        'Name': ['GD1(36:1;O2)', 'GD1(38:1;O2)', 'GD1(40:1;O2)'],\n        'RT': [9.5, 10.1, 10.7],\n        'Log P': [1.5, 2.8, 4.1],\n        'a_component': [36, 38, 40],",
        "detail": "django_ganglioside.test_regression_standalone",
        "documentation": {}
    },
    {
        "label": "test_multicollinearity_handling",
        "kind": 2,
        "importPath": "django_ganglioside.test_regression_standalone",
        "description": "django_ganglioside.test_regression_standalone",
        "peekOfCode": "def test_multicollinearity_handling():\n    \"\"\"Test handling of highly correlated features\"\"\"\n    print(\"\\nTesting multicollinearity handling...\")\n    model = ImprovedRegressionModel()\n    # Create data with perfect correlation\n    df = pd.DataFrame({\n        'Name': ['GD1(36:1;O2)', 'GD1(38:1;O2)', 'GD1(40:1;O2)', 'GD1(42:1;O2)'],\n        'RT': [9.5, 10.1, 10.7, 11.3],\n        'Log P': [1.0, 2.0, 3.0, 4.0],\n        'a_component': [36, 38, 40, 42],  # Perfectly correlated with Log P",
        "detail": "django_ganglioside.test_regression_standalone",
        "documentation": {}
    },
    {
        "label": "test_realistic_r2_threshold",
        "kind": 2,
        "importPath": "django_ganglioside.test_regression_standalone",
        "description": "django_ganglioside.test_regression_standalone",
        "peekOfCode": "def test_realistic_r2_threshold():\n    \"\"\"Test that R² threshold is realistic\"\"\"\n    print(\"\\nTesting realistic R² threshold...\")\n    model = ImprovedRegressionModel()\n    assert model.r2_threshold <= 0.85, \"R² threshold should be realistic (<= 0.85)\"\n    assert model.r2_threshold >= 0.60, \"R² threshold should not be too strict (>= 0.60)\"\n    print(f\"✓ R² threshold is realistic: {model.r2_threshold}\")\n    return True\ndef main():\n    \"\"\"Run all standalone tests\"\"\"",
        "detail": "django_ganglioside.test_regression_standalone",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "django_ganglioside.test_regression_standalone",
        "description": "django_ganglioside.test_regression_standalone",
        "peekOfCode": "def main():\n    \"\"\"Run all standalone tests\"\"\"\n    print(\"=\" * 60)\n    print(\"STANDALONE REGRESSION MODEL TESTS\")\n    print(\"=\" * 60)\n    tests = [\n        (\"Basic Functionality\", test_basic_functionality),\n        (\"Overfitting Prevention\", test_overfitting_prevention),\n        (\"Multicollinearity Handling\", test_multicollinearity_handling),\n        (\"Realistic R² Threshold\", test_realistic_r2_threshold),",
        "detail": "django_ganglioside.test_regression_standalone",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "django_ganglioside.verify_deployment",
        "description": "django_ganglioside.verify_deployment",
        "peekOfCode": "User = get_user_model()\nprint(\"=\" * 80)\nprint(\"DJANGO GANGLIOSIDE PLATFORM - DEPLOYMENT VERIFICATION\")\nprint(\"=\" * 80)\n# Check models\nprint(\"\\n[1/5] Checking database models...\")\ntry:\n    user_count = User.objects.count()\n    session_count = AnalysisSession.objects.count()\n    result_count = AnalysisResult.objects.count()",
        "detail": "django_ganglioside.verify_deployment",
        "documentation": {}
    },
    {
        "label": "custom_apps",
        "kind": 5,
        "importPath": "django_ganglioside.verify_deployment",
        "description": "django_ganglioside.verify_deployment",
        "peekOfCode": "custom_apps = [app for app in settings.INSTALLED_APPS if app.startswith('apps.')]\nprint(f\"✅ Custom apps installed:\")\nfor app in custom_apps:\n    print(f\"   - {app}\")\n# Summary\nprint(\"\\n\" + \"=\" * 80)\nprint(\"DEPLOYMENT VERIFICATION COMPLETE\")\nprint(\"=\" * 80)\nprint(\"\\n✅ System is ready for production use!\")\nprint(\"\\nTo start the server:\")",
        "detail": "django_ganglioside.verify_deployment",
        "documentation": {}
    },
    {
        "label": "create_category_scatter_plot",
        "kind": 2,
        "importPath": "scripts.demos.category_visualization_demo",
        "description": "scripts.demos.category_visualization_demo",
        "peekOfCode": "def create_category_scatter_plot(df, categorizer):\n    \"\"\"Create a scatter plot colored by ganglioside categories\"\"\"\n    # Get categorization\n    categorization = categorizer.categorize_compounds(df)\n    colors = categorizer.get_category_colors()\n    # Add category information to dataframe\n    df_viz = df.copy()\n    df_viz['Category'] = df_viz['Name'].apply(\n        lambda x: categorization['compound_mapping'][x]['category']\n    )",
        "detail": "scripts.demos.category_visualization_demo",
        "documentation": {}
    },
    {
        "label": "create_category_distribution_charts",
        "kind": 2,
        "importPath": "scripts.demos.category_visualization_demo",
        "description": "scripts.demos.category_visualization_demo",
        "peekOfCode": "def create_category_distribution_charts(df, categorizer):\n    \"\"\"Create distribution charts for categories\"\"\"\n    categorization = categorizer.categorize_compounds(df)\n    colors = categorizer.get_category_colors()\n    # Create subplots\n    fig = make_subplots(\n        rows=2, cols=2,\n        subplot_titles=(\n            '📊 Category Distribution',\n            '🏷️ Base Prefix Distribution',",
        "detail": "scripts.demos.category_visualization_demo",
        "documentation": {}
    },
    {
        "label": "create_category_3d_plot",
        "kind": 2,
        "importPath": "scripts.demos.category_visualization_demo",
        "description": "scripts.demos.category_visualization_demo",
        "peekOfCode": "def create_category_3d_plot(df, categorizer):\n    \"\"\"Create 3D plot showing RT vs Log P vs Volume by category\"\"\"\n    # Get categorization\n    categorization = categorizer.categorize_compounds(df)\n    colors = categorizer.get_category_colors()\n    # Add category information\n    df_viz = df.copy()\n    df_viz['Category'] = df_viz['Name'].apply(\n        lambda x: categorization['compound_mapping'][x]['category']\n    )",
        "detail": "scripts.demos.category_visualization_demo",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.demos.category_visualization_demo",
        "description": "scripts.demos.category_visualization_demo",
        "peekOfCode": "def main():\n    print(\"🎨 GANGLIOSIDE CATEGORIZATION VISUALIZATION DEMO\")\n    print(\"=\" * 60)\n    # Load data\n    df = pd.read_csv('data/samples/testwork_user.csv')\n    print(f\"📁 Loaded {len(df)} compounds\")\n    # Initialize categorizer\n    categorizer = GangliosideCategorizer()\n    # Generate categorization summary\n    summary = categorizer.generate_categorization_summary(df)",
        "detail": "scripts.demos.category_visualization_demo",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "interactive_analyzer",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/simple\")\ndef simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/api/health\")\ndef health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "simple_analyzer",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def simple_analyzer():\n    \"\"\"기존 단순 분석기\"\"\"\n    return render_template(\"analyzer.html\")\n@app.route(\"/api/health\")\ndef health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"\n    return jsonify(\n        {\n            \"status\": \"healthy\",\n            \"service\": \"ganglioside-analyzer-flask\",",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def health_check():\n    \"\"\"헬스 체크 엔드포인트\"\"\"\n    return jsonify(\n        {\n            \"status\": \"healthy\",\n            \"service\": \"ganglioside-analyzer-flask\",\n            \"version\": \"2.0.0\",\n            \"timestamp\": datetime.now().isoformat(),\n        }\n    )",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def upload_csv():\n    \"\"\"CSV 파일 업로드 및 기본 검증\"\"\"\n    try:\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        if file.filename == \"\":\n            return jsonify({\"error\": \"파일명이 없습니다.\"}), 400\n        if not file.filename.endswith(\".csv\"):\n            return jsonify(",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "analyze_data",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def analyze_data():\n    \"\"\"데이터 분석 실행\"\"\"\n    try:\n        # 파일 및 설정 가져오기\n        if \"file\" not in request.files:\n            return jsonify({\"error\": \"분석할 파일이 없습니다.\"}), 400\n        file = request.files[\"file\"]\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "create_visualizations",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def create_visualizations():\n    \"\"\"시각화 생성\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # 시각화 생성",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "manage_settings",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def manage_settings():\n    \"\"\"설정 관리\"\"\"\n    try:\n        if request.method == \"GET\":\n            # 현재 설정 반환\n            return jsonify(\n                {\n                    \"current_settings\": ganglioside_processor.get_settings(),\n                    \"default_settings\": {\n                        \"outlier_threshold\": 3.0,",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "download_results",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def download_results():\n    \"\"\"분석 결과 다운로드\"\"\"\n    try:\n        data = request.get_json()\n        if not data or \"results\" not in data:\n            return jsonify(\n                {\"error\": \"분석 결과 데이터가 필요합니다.\"}\n            ), 400\n        results = data[\"results\"]\n        # CSV 생성",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "sample_test",
        "kind": 2,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "def sample_test():\n    \"\"\"샘플 데이터 테스트\"\"\"\n    try:\n        test_type = request.form.get(\"test_type\", \"basic\")\n        data_type = request.form.get(\"data_type\", \"Porcine\")\n        outlier_threshold = float(request.form.get(\"outlier_threshold\", 3.0))\n        r2_threshold = float(request.form.get(\"r2_threshold\", 0.99))\n        rt_tolerance = float(request.form.get(\"rt_tolerance\", 0.1))\n        # 샘플 데이터 생성\n        if test_type == \"basic\":",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)  # CORS 설정\n# 설정\napp.config.update(\n    MAX_CONTENT_LENGTH=50 * 1024 * 1024,  # 50MB 최대 파일 크기\n    UPLOAD_FOLDER=\"uploads\",\n    OUTPUT_FOLDER=\"outputs\",\n)\n# 디렉토리 생성\nos.makedirs(app.config[\"UPLOAD_FOLDER\"], exist_ok=True)",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "ganglioside_processor",
        "kind": 5,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "ganglioside_processor = GangliosideProcessor()\nvisualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\n@app.route(\"/\")\ndef index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "visualization_service",
        "kind": 5,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "visualization_service = VisualizationService()\nregression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\n@app.route(\"/\")\ndef index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "regression_analyzer",
        "kind": 5,
        "importPath": "scripts.utilities.app_backup",
        "description": "scripts.utilities.app_backup",
        "peekOfCode": "regression_analyzer = RegressionAnalyzer()\nprint(\"🧬 Ganglioside Analyzer Flask 서버 초기화 완료\")\n@app.route(\"/\")\ndef index():\n    \"\"\"메인 페이지 - 인터랙티브 분석기\"\"\"\n    return render_template(\"interactive_analyzer.html\")\n@app.route(\"/interactive\")\ndef interactive_analyzer():\n    \"\"\"인터랙티브 분석기 페이지\"\"\"\n    return render_template(\"interactive_analyzer.html\")",
        "detail": "scripts.utilities.app_backup",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "scripts.utilities.app_refactored",
        "description": "scripts.utilities.app_refactored",
        "peekOfCode": "def create_app():\n    \"\"\"Flask application factory\"\"\"\n    # Flask app initialization\n    app = Flask(\n        __name__,\n        template_folder=\"backend/templates\",\n        static_folder=\"backend/static\"\n    )\n    CORS(app)  # CORS settings\n    # Configuration",
        "detail": "scripts.utilities.app_refactored",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.utilities.app_refactored",
        "description": "scripts.utilities.app_refactored",
        "peekOfCode": "def main():\n    \"\"\"Main execution function\"\"\"\n    app = create_app()\n    print(\"🚀 Starting Ganglioside Analyzer Flask server\")\n    print(\"🌐 Available at http://localhost:5001\")\n    try:\n        app.run(\n            host=\"0.0.0.0\",  # Listen on all interfaces\n            port=5001,       # Use port 5001 (5000 conflicts with AirPlay on macOS)\n            debug=True,      # Enable debug mode",
        "detail": "scripts.utilities.app_refactored",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "scripts.utilities.app_refactored_fixed",
        "description": "scripts.utilities.app_refactored_fixed",
        "peekOfCode": "def create_app() -> Flask:\n    \"\"\"\n    Application factory with dependency injection and improved error handling\n    \"\"\"\n    print(\"🔧 Initializing enhanced analysis services...\")\n    try:\n        # Initialize core services\n        analysis_service = AnalysisService()\n        visualization_service = VisualizationService()\n        print(\"✅ Enhanced services initialized successfully\")",
        "detail": "scripts.utilities.app_refactored_fixed",
        "documentation": {}
    },
    {
        "label": "test_all_endpoints",
        "kind": 2,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "def test_all_endpoints():\n    \"\"\"Test all web endpoints\"\"\"\n    print(\"🌐 Testing all web endpoints...\")\n    endpoints = [\n        (\"/\", \"Main page (working analyzer)\"),\n        (\"/working\", \"Working analyzer page\"),\n        (\"/simple\", \"Simple analyzer page\"),\n        (\"/integrated\", \"Integrated analyzer page\"),\n        (\"/diagnostic\", \"Diagnostic test page\"),\n        (\"/api/health\", \"Health API endpoint\")",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "test_full_analysis_workflow",
        "kind": 2,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "def test_full_analysis_workflow():\n    \"\"\"Test complete analysis workflow\"\"\"\n    print(\"\\n🧬 Testing complete analysis workflow...\")\n    # Step 1: Health check\n    print(\"1. Health check...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\")\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"   ✅ Server healthy: {data['status']}\")",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "test_functionality_summary",
        "kind": 2,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "def test_functionality_summary():\n    \"\"\"Test and report functionality summary\"\"\"\n    print(\"\\n📋 Functionality Summary:\")\n    features = [\n        (\"File upload\", \"✅ Working\"),\n        (\"Settings adjustment\", \"✅ Working\"),\n        (\"Analysis API\", \"✅ Working\"),\n        (\"Visualization API\", \"✅ Working\"),\n        (\"2D regression plots\", \"✅ Working\"),\n        (\"3D distribution plots\", \"✅ Working\"),",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "def main():\n    \"\"\"Run comprehensive tests\"\"\"\n    print(\"🧬 LC-MS-MS Analysis Platform - Comprehensive Test Suite\")\n    print(\"=\" * 60)\n    # Test 1: All web endpoints\n    test_all_endpoints()\n    # Test 2: Complete workflow\n    success = test_full_analysis_workflow()\n    # Test 3: Functionality summary\n    test_functionality_summary()",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "scripts.utilities.comprehensive_test",
        "description": "scripts.utilities.comprehensive_test",
        "peekOfCode": "BASE_URL = \"http://localhost:5001\"\ndef test_all_endpoints():\n    \"\"\"Test all web endpoints\"\"\"\n    print(\"🌐 Testing all web endpoints...\")\n    endpoints = [\n        (\"/\", \"Main page (working analyzer)\"),\n        (\"/working\", \"Working analyzer page\"),\n        (\"/simple\", \"Simple analyzer page\"),\n        (\"/integrated\", \"Integrated analyzer page\"),\n        (\"/diagnostic\", \"Diagnostic test page\"),",
        "detail": "scripts.utilities.comprehensive_test",
        "documentation": {}
    },
    {
        "label": "create_working_regression_fix",
        "kind": 2,
        "importPath": "scripts.utilities.create_working_regression",
        "description": "scripts.utilities.create_working_regression",
        "peekOfCode": "def create_working_regression_fix():\n    print(\"🔧 Creating Working Regression Fix\")\n    print(\"=\" * 40)\n    # Read the test data to understand what we're working with\n    import pandas as pd\n    df = pd.read_csv(\"data/sample/testwork.csv\")\n    print(f\"📊 Test data: {len(df)} compounds\")\n    # Show the actual data\n    print(\"\\n📋 Compound Data:\")\n    for _, row in df.iterrows():",
        "detail": "scripts.utilities.create_working_regression",
        "documentation": {}
    },
    {
        "label": "debug_regression_structure",
        "kind": 2,
        "importPath": "scripts.utilities.debug_regression_structure",
        "description": "scripts.utilities.debug_regression_structure",
        "peekOfCode": "def debug_regression_structure():\n    print(\"🔍 DEBUGGING REGRESSION ANALYSIS STRUCTURE\")\n    print(\"=\" * 50)\n    base_url = \"http://localhost:5001\"\n    # Run analysis and examine detailed structure\n    print(\"1. Running analysis with detailed structure inspection...\")\n    try:\n        with open(\"data/sample/testwork.csv\", \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {",
        "detail": "scripts.utilities.debug_regression_structure",
        "documentation": {}
    },
    {
        "label": "debug_visualization",
        "kind": 2,
        "importPath": "scripts.utilities.debug_visualization_detailed",
        "description": "scripts.utilities.debug_visualization_detailed",
        "peekOfCode": "def debug_visualization():\n    print(\"🔍 DETAILED VISUALIZATION DIAGNOSIS\")\n    print(\"=\" * 50)\n    base_url = \"http://localhost:5001\"\n    # Step 1: Run analysis\n    print(\"1. Running analysis...\")\n    try:\n        with open(\"data/sample/testwork.csv\", \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {",
        "detail": "scripts.utilities.debug_visualization_detailed",
        "documentation": {}
    },
    {
        "label": "debug_visualization_structure",
        "kind": 2,
        "importPath": "scripts.utilities.debug_viz_structure",
        "description": "scripts.utilities.debug_viz_structure",
        "peekOfCode": "def debug_visualization_structure():\n    print(\"🔍 Debugging Visualization Data Structure\")\n    print(\"=\" * 50)\n    # Run analysis\n    with open(\"data/sample/testwork.csv\", \"rb\") as f:\n        files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n        data = {\n            \"data_type\": \"Porcine\",\n            \"outlier_threshold\": 2.5,\n            \"r2_threshold\": 0.75,",
        "detail": "scripts.utilities.debug_viz_structure",
        "documentation": {}
    },
    {
        "label": "quick_test",
        "kind": 2,
        "importPath": "scripts.utilities.quick_test_fix",
        "description": "scripts.utilities.quick_test_fix",
        "peekOfCode": "def quick_test():\n    print(\"🧬 Quick Test - Fixed Regression Analysis\")\n    print(\"=\" * 45)\n    # Load data\n    df = pd.read_csv(\"data/sample/testwork.csv\")\n    print(f\"📄 Loaded: {len(df)} compounds\")\n    # Test processor\n    processor = GangliosideProcessor()\n    print(\"🔍 Settings:\")\n    settings = processor.get_settings()",
        "detail": "scripts.utilities.quick_test_fix",
        "documentation": {}
    },
    {
        "label": "test_analysis_api",
        "kind": 2,
        "importPath": "tests.integration.test_api_fix",
        "description": "tests.integration.test_api_fix",
        "peekOfCode": "def test_analysis_api():\n    print(\"🧪 Testing Fixed Analysis API\")\n    print(\"=\" * 30)\n    # Test health\n    print(\"1. Health check...\")\n    health = requests.get(\"http://localhost:5001/api/health\")\n    print(f\"   Status: {health.status_code}\")\n    # Test analysis with real file\n    print(\"2. Analysis test...\")\n    with open(\"data/sample/testwork.csv\", \"rb\") as f:",
        "detail": "tests.integration.test_api_fix",
        "documentation": {}
    },
    {
        "label": "test_with_real_data",
        "kind": 2,
        "importPath": "tests.integration.test_categorizer_real_data",
        "description": "tests.integration.test_categorizer_real_data",
        "peekOfCode": "def test_with_real_data():\n    print(\"🧪 TESTING CATEGORIZER WITH REAL USER DATA\")\n    print(\"=\" * 60)\n    # Load user data\n    try:\n        df = pd.read_csv('testwork_user.csv')\n        print(f\"📁 Loaded {len(df)} compounds from testwork_user.csv\")\n    except Exception as e:\n        print(f\"❌ Failed to load data: {e}\")\n        return",
        "detail": "tests.integration.test_categorizer_real_data",
        "documentation": {}
    },
    {
        "label": "test_complete_pipeline",
        "kind": 2,
        "importPath": "tests.integration.test_complete_pipeline",
        "description": "tests.integration.test_complete_pipeline",
        "peekOfCode": "def test_complete_pipeline():\n    print(\"🎯 Testing Complete Analysis & Visualization Pipeline\")\n    print(\"=\" * 55)\n    # Use the running server on port 5001\n    base_url = \"http://localhost:5001\"\n    # Step 1: Test health\n    print(\"1. Health check...\")\n    try:\n        health = requests.get(f\"{base_url}/api/health\")\n        print(f\"   Status: {health.status_code}\")",
        "detail": "tests.integration.test_complete_pipeline",
        "documentation": {}
    },
    {
        "label": "test_direct_integration",
        "kind": 2,
        "importPath": "tests.integration.test_direct_integration",
        "description": "tests.integration.test_direct_integration",
        "peekOfCode": "def test_direct_integration():\n    print(\"🧪 DIRECT CATEGORIZATION INTEGRATION TEST\")\n    print(\"=\" * 50)\n    # Load test data\n    df = pd.read_csv('../../data/samples/testwork_user.csv')\n    print(f\"📁 Loaded {len(df)} compounds\")\n    # Create processor\n    processor = GangliosideProcessor()\n    print(\"✅ Processor created\")\n    # Test categorization method directly",
        "detail": "tests.integration.test_direct_integration",
        "documentation": {}
    },
    {
        "label": "test_full_analysis",
        "kind": 2,
        "importPath": "tests.integration.test_direct_integration",
        "description": "tests.integration.test_direct_integration",
        "peekOfCode": "def test_full_analysis():\n    print(\"\\n🔬 FULL ANALYSIS WITH CATEGORIZATION TEST\")\n    print(\"=\" * 50)\n    # Load test data\n    df = pd.read_csv('../../data/samples/testwork_user.csv')\n    # Create processor and run full analysis\n    processor = GangliosideProcessor()\n    try:\n        results = processor.process_data(df, \"Porcine\")\n        print(\"✅ Full analysis completed\")",
        "detail": "tests.integration.test_direct_integration",
        "documentation": {}
    },
    {
        "label": "test_fixed_processor",
        "kind": 2,
        "importPath": "tests.integration.test_fixed_regression",
        "description": "tests.integration.test_fixed_regression",
        "peekOfCode": "def test_fixed_processor():\n    \"\"\"Test the fixed processor with sample data\"\"\"\n    print(\"🧬 Testing Fixed Ganglioside Processor\")\n    print(\"=\" * 50)\n    # Initialize fixed processor\n    processor = GangliosideProcessorFixed()\n    # Load sample data\n    try:\n        df = pd.read_csv(\"data/sample/testwork.csv\")\n        print(f\"📄 Loaded sample data: {len(df)} compounds\")",
        "detail": "tests.integration.test_fixed_regression",
        "documentation": {}
    },
    {
        "label": "test_analysis_service",
        "kind": 2,
        "importPath": "tests.integration.test_fixed_regression",
        "description": "tests.integration.test_fixed_regression",
        "peekOfCode": "def test_analysis_service():\n    \"\"\"Test the enhanced analysis service\"\"\"\n    print(\"\\n🚀 Testing Enhanced Analysis Service\")\n    print(\"=\" * 50)\n    try:\n        # Initialize analysis service\n        analysis_service = AnalysisService()\n        # Load sample data\n        df = pd.read_csv(\"data/sample/testwork.csv\")\n        # Test comprehensive analysis",
        "detail": "tests.integration.test_fixed_regression",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_fixed_regression",
        "description": "tests.integration.test_fixed_regression",
        "peekOfCode": "def main():\n    \"\"\"Main test runner\"\"\"\n    print(\"🧬 LC-MS-MS Fixed Regression Analysis Test\")\n    print(\"Testing improved algorithms and realistic thresholds\")\n    print(\"=\" * 60)\n    success_count = 0\n    # Test 1: Fixed processor\n    if test_fixed_processor():\n        success_count += 1\n    # Test 2: Analysis service",
        "detail": "tests.integration.test_fixed_regression",
        "documentation": {}
    },
    {
        "label": "test_health",
        "kind": 2,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "def test_health():\n    \"\"\"Test health endpoint\"\"\"\n    print(\"🔌 Testing health endpoint...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\")\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"✅ Health check passed: {data['status']}\")\n            return True\n        else:",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "test_analysis",
        "kind": 2,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "def test_analysis():\n    \"\"\"Test analysis endpoint with sample file\"\"\"\n    print(\"🚀 Testing analysis endpoint...\")\n    try:\n        # Read sample CSV file\n        with open(\"data/sample/testwork.csv\", \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {\n                \"data_type\": \"Porcine\",\n                \"outlier_threshold\": 3.0,",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "test_visualization",
        "kind": 2,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "def test_visualization(results):\n    \"\"\"Test visualization endpoint\"\"\"\n    print(\"📊 Testing visualization endpoint...\")\n    try:\n        payload = {\"results\": results}\n        response = requests.post(\n            f\"{BASE_URL}/api/visualize\",\n            headers={\"Content-Type\": \"application/json\"},\n            data=json.dumps(payload)\n        )",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "def main():\n    \"\"\"Run all tests\"\"\"\n    print(\"🧬 Starting LC-MS-MS API functionality tests...\\n\")\n    # Test 1: Health check\n    if not test_health():\n        print(\"\\n❌ Health check failed - aborting tests\")\n        sys.exit(1)\n    print()\n    # Test 2: Analysis\n    results = test_analysis()",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "tests.integration.test_functionality",
        "description": "tests.integration.test_functionality",
        "peekOfCode": "BASE_URL = \"http://localhost:5001\"\ndef test_health():\n    \"\"\"Test health endpoint\"\"\"\n    print(\"🔌 Testing health endpoint...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/api/health\")\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"✅ Health check passed: {data['status']}\")\n            return True",
        "detail": "tests.integration.test_functionality",
        "documentation": {}
    },
    {
        "label": "test_integrated_categorization",
        "kind": 2,
        "importPath": "tests.integration.test_integrated_categorization",
        "description": "tests.integration.test_integrated_categorization",
        "peekOfCode": "def test_integrated_categorization():\n    print(\"🧪 TESTING INTEGRATED CATEGORIZATION SYSTEM\")\n    print(\"=\" * 60)\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    # Step 1: Load and analyze the data\n    print(\"1. 📊 Loading test data...\")\n    try:\n        df = pd.read_csv(test_file)\n        print(f\"   📁 Loaded {len(df)} compounds\")",
        "detail": "tests.integration.test_integrated_categorization",
        "documentation": {}
    },
    {
        "label": "test_visualization_with_categorization",
        "kind": 2,
        "importPath": "tests.integration.test_integrated_categorization",
        "description": "tests.integration.test_integrated_categorization",
        "peekOfCode": "def test_visualization_with_categorization():\n    \"\"\"Test if visualization can access categorization data\"\"\"\n    print(\"\\n3. 📊 Testing visualization with categorization data...\")\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    try:\n        # Run analysis first\n        with open(test_file, \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n            data = {",
        "detail": "tests.integration.test_integrated_categorization",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_integrated_categorization",
        "description": "tests.integration.test_integrated_categorization",
        "peekOfCode": "def main():\n    print(\"🔬 INTEGRATED CATEGORIZATION SYSTEM TEST\")\n    print(\"Testing the complete pipeline with categorization\")\n    print()\n    # Test 1: Basic categorization integration\n    cat_success = test_integrated_categorization()\n    # Test 2: Visualization compatibility\n    viz_success = test_visualization_with_categorization()\n    # Final result\n    print(\"\\n\" + \"=\" * 60)",
        "detail": "tests.integration.test_integrated_categorization",
        "documentation": {}
    },
    {
        "label": "test_complete_workflow",
        "kind": 2,
        "importPath": "tests.integration.test_tabs_functionality",
        "description": "tests.integration.test_tabs_functionality",
        "peekOfCode": "def test_complete_workflow():\n    print(\"🧪 TESTING COMPLETE TAB FUNCTIONALITY\")\n    print(\"=\" * 60)\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    # Step 1: Run the analysis\n    print(\"1. 🚀 Running analysis...\")\n    try:\n        with open(test_file, \"rb\") as f:\n            files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}",
        "detail": "tests.integration.test_tabs_functionality",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_tabs_functionality",
        "description": "tests.integration.test_tabs_functionality",
        "peekOfCode": "def main():\n    print(\"🔧 TAB FUNCTIONALITY TEST\")\n    print(\"This test verifies the backend generates proper visualizations\")\n    print(\"Manual steps required:\")\n    print(\"1. Open http://localhost:5001/working in your browser\")\n    print(\"2. Upload testwork_user.csv\")\n    print(\"3. Click 'Start Analysis'\")\n    print(\"4. Click 'Generate Visualizations'\")\n    print(\"5. Test switching between tabs:\")\n    print(\"   - Combined View (should work)\")",
        "detail": "tests.integration.test_tabs_functionality",
        "documentation": {}
    },
    {
        "label": "test_user_data_complete",
        "kind": 2,
        "importPath": "tests.integration.test_user_data_complete",
        "description": "tests.integration.test_user_data_complete",
        "peekOfCode": "def test_user_data_complete():\n    print(\"🧪 COMPREHENSIVE TEST - USER'S ACTUAL DATA\")\n    print(\"=\" * 60)\n    base_url = \"http://localhost:5001\"\n    test_file = \"testwork_user.csv\"\n    # Step 1: Analyze the data first\n    print(\"1. 📊 Analyzing user's test data...\")\n    try:\n        df = pd.read_csv(test_file)\n        total_compounds = len(df)",
        "detail": "tests.integration.test_user_data_complete",
        "documentation": {}
    },
    {
        "label": "test_visualization_strict",
        "kind": 2,
        "importPath": "tests.integration.test_user_data_complete",
        "description": "tests.integration.test_user_data_complete",
        "peekOfCode": "def test_visualization_strict(analysis_result):\n    \"\"\"Strict test of visualization with user's data\"\"\"\n    print(\"\\n4. 📊 STRICT VISUALIZATION TEST\")\n    print(\"-\" * 40)\n    base_url = \"http://localhost:5001\"\n    try:\n        # Extract analysis results for visualization\n        analysis_data = analysis_result['results']\n        viz_payload = {\"results\": analysis_data}\n        viz_response = requests.post(",
        "detail": "tests.integration.test_user_data_complete",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.integration.test_user_data_complete",
        "description": "tests.integration.test_user_data_complete",
        "peekOfCode": "def main():\n    print(\"🚀 STARTING COMPREHENSIVE VISUALIZATION TEST\")\n    print(\"📁 Using user's actual file: testwork_user.csv\")\n    print(\"🎯 Testing complete pipeline with REAL DATA\")\n    # Run analysis\n    analysis_result = test_user_data_complete()\n    if not analysis_result:\n        print(\"\\n❌ ANALYSIS FAILED - Cannot continue to visualization test\")\n        return False\n    # Run strict visualization test",
        "detail": "tests.integration.test_user_data_complete",
        "documentation": {}
    },
    {
        "label": "test_visualization",
        "kind": 2,
        "importPath": "tests.integration.test_visualization",
        "description": "tests.integration.test_visualization",
        "peekOfCode": "def test_visualization():\n    print(\"📊 Testing Visualization Pipeline\")\n    print(\"=\" * 40)\n    # Step 1: Run analysis to get results\n    print(\"1. Running analysis...\")\n    with open(\"data/sample/testwork.csv\", \"rb\") as f:\n        files = {\"file\": (\"testwork.csv\", f, \"text/csv\")}\n        data = {\n            \"data_type\": \"Porcine\",\n            \"outlier_threshold\": 2.5,",
        "detail": "tests.integration.test_visualization",
        "documentation": {}
    }
]